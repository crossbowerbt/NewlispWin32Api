(context 'WIN32)

;; module GDI32.DLL:
;; category GDI:

(setq HGDIOBJ HANDLE)
(setq HFONT HANDLE)
(setq HPALETTE HANDLE)
(setq HBITMAP HANDLE)
(setq HBRUSH HANDLE)
(setq HPEN HANDLE)
(setq HENHMETAFILE HANDLE)
(setq HCOLORSPACE HANDLE)
(setq HGLRC HANDLE)

(setq COLORREF DWORD)
(setq LPCOLORREF "void*")

;; value int _ODD_FAILURE {
(setq _ODD_FAILURE "int")
(setq ODD_FAILURE 0x80000000)
;; };


;; value DWORD _BinaryDrawMode {
(setq _BinaryDrawMode DWORD)
(setq R2_BLACK 1)
(setq R2_NOTMERGEPEN 2)
(setq R2_MASKNOTPEN 3)
(setq R2_NOTCOPYPEN 4)
(setq R2_MASKPENNOT 5)
(setq R2_NOT 6)
(setq R2_XORPEN 7)
(setq R2_NOTMASKPEN 8)
(setq R2_MASKPEN 9)
(setq R2_NOTXORPEN 10)
(setq R2_NOP 11)
(setq R2_MERGENOTPEN 12)
(setq R2_COPYPEN 13)
(setq R2_MERGEPENNOT 14)
(setq R2_MERGEPEN 15)
(setq R2_WHITE 16)
(setq R2_LAST 16)
;; };

;; value DWORD _TernaryDrawMode {
(setq _TernaryDrawMode DWORD)
(setq SRCCOPY 0x00CC0020)
(setq SRCPAINT 0x00EE0086)
(setq SRCAND 0x008800C6)
(setq SRCINVERT 0x00660046)
(setq SRCERASE 0x00440328)
(setq NOTSRCCOPY 0x00330008)
(setq NOTSRCERASE 0x001100A6)
(setq MERGECOPY 0x00C000CA)
(setq MERGEPAINT 0x00BB0226)
(setq PATCOPY 0x00F00021)
(setq PATPAINT 0x00FB0A09)
(setq PATINVERT 0x005A0049)
(setq DSTINVERT 0x00550009)
(setq BLACKNESS 0x00000042)
(setq WHITENESS 0x00FF0062)
(setq NOMIRRORBITMAP 0x80000000)
(setq CAPTUREBLT 0x40000000)
;; };

;; value DWORD _GDI_ERROR {
(setq _GDI_ERROR DWORD)
(setq GDI_ERROR 0xFFFFFFFF)
;; };
;; value DWORD _HGDI_ERROR {
(setq _HGDI_ERROR DWORD)
(setq HGDI_ERROR 0xFFFFFFFF)
;; };

;; value DWORD _RegionFlags {
(setq _RegionFlags DWORD)
(setq ERROR 0)
(setq NULLREGION 1)
(setq SIMPLEREGION 2)
(setq COMPLEXREGION 3)
;; };

;; value int _CombineRgn {
(setq _CombineRgn "int")
(setq RGN_AND 1)
(setq RGN_OR 2)
(setq RGN_XOR 3)
(setq RGN_DIFF 4)
(setq RGN_COPY 5)
;; };

;; value DWORD _COMBINRGN_STYLE {
(setq _COMBINRGN_STYLE DWORD)
(setq BLACKONWHITE 1)
(setq WHITEONBLACK 2)
(setq COLORONCOLOR 3)
(setq HALFTONE 4)
;; };

;; value DWORD _PolyFill {
(setq _PolyFill DWORD)
(setq ALTERNATE 1)
(setq WINDING 2)
(setq POLYFILL_LAST 2)
;; };

;; mask DWORD _LAYOUT {
(setq _LAYOUT DWORD)
(setq LAYOUT_RTL 0x00000001)
(setq LAYOUT_BTT 0x00000002)
(setq LAYOUT_VBH 0x00000004)

(setq LAYOUT_BITMAPORIENTATIONPRESERVED 0x00000008)
;; };

;; mask DWORD _TextAlignmentOptions {
(setq _TextAlignmentOptions DWORD)
(setq TA_LEFT 0)
(setq TA_RIGHT 2)
(setq TA_CENTER 6)
(setq TA_TOP 0)
(setq TA_BOTTOM 8)
(setq TA_BASELINE 24)
(setq TA_RTLREADING 256)
;; };

;; mask DWORD _ETO {
(setq _ETO DWORD)
(setq ETO_OPAQUE 0x0002)
(setq ETO_CLIPPED 0x0004)
(setq ETO_GLYPH_INDEX 0x0010)
(setq ETO_RTLREADING 0x0080)
(setq ETO_NUMERICSLOCAL 0x0400)
(setq ETO_NUMERICSLATIN 0x0800)
(setq ETO_IGNORELANGUAGE 0x1000)
(setq ETO_PDY 0x2000)
;; };

;; mask DWORD _AspectFiltering {
(setq _AspectFiltering DWORD)
(setq ASPECT_FILTERING 0x0001)
;; };


;; mask DWORD _DCB {
(setq _DCB DWORD)

(setq DCB_ERROR 0)
(setq DCB_RESET 0x0001)
(setq DCB_ACCUMULATE 0x0002)
(setq DCB_ENABLE 0x0004)
(setq DCB_DISABLE 0x0008)
;; };

;; value DWORD _Meta {
(setq _Meta DWORD)

(setq META_SETBKCOLOR 0x0201)
(setq META_SETBKMODE 0x0102)
(setq META_SETMAPMODE 0x0103)
(setq META_SETROP2 0x0104)
(setq META_SETRELABS 0x0105)
(setq META_SETPOLYFILLMODE 0x0106)
(setq META_SETSTRETCHBLTMODE 0x0107)
(setq META_SETTEXTCHAREXTRA 0x0108)
(setq META_SETTEXTCOLOR 0x0209)
(setq META_SETTEXTJUSTIFICATION 0x020A)
(setq META_SETWINDOWORG 0x020B)
(setq META_SETWINDOWEXT 0x020C)
(setq META_SETVIEWPORTORG 0x020D)
(setq META_SETVIEWPORTEXT 0x020E)
(setq META_OFFSETWINDOWORG 0x020F)
(setq META_SCALEWINDOWEXT 0x0410)
(setq META_OFFSETVIEWPORTORG 0x0211)
(setq META_SCALEVIEWPORTEXT 0x0412)
(setq META_LINETO 0x0213)
(setq META_MOVETO 0x0214)
(setq META_EXCLUDECLIPRECT 0x0415)
(setq META_INTERSECTCLIPRECT 0x0416)
(setq META_ARC 0x0817)
(setq META_ELLIPSE 0x0418)
(setq META_FLOODFILL 0x0419)
(setq META_PIE 0x081A)
(setq META_RECTANGLE 0x041B)
(setq META_ROUNDRECT 0x061C)
(setq META_PATBLT 0x061D)
(setq META_SAVEDC 0x001E)
(setq META_SETPIXEL 0x041F)
(setq META_OFFSETCLIPRGN 0x0220)
(setq META_TEXTOUT 0x0521)
(setq META_BITBLT 0x0922)
(setq META_STRETCHBLT 0x0B23)
(setq META_POLYGON 0x0324)
(setq META_POLYLINE 0x0325)
(setq META_ESCAPE 0x0626)
(setq META_RESTOREDC 0x0127)
(setq META_FILLREGION 0x0228)
(setq META_FRAMEREGION 0x0429)
(setq META_INVERTREGION 0x012A)
(setq META_PAINTREGION 0x012B)
(setq META_SELECTCLIPREGION 0x012C)
(setq META_SELECTOBJECT 0x012D)
(setq META_SETTEXTALIGN 0x012E)
(setq META_CHORD 0x0830)
(setq META_SETMAPPERFLAGS 0x0231)
(setq META_EXTTEXTOUT 0x0a32)
(setq META_SETDIBTODEV 0x0d33)
(setq META_SELECTPALETTE 0x0234)
(setq META_REALIZEPALETTE 0x0035)
(setq META_ANIMATEPALETTE 0x0436)
(setq META_SETPALENTRIES 0x0037)
(setq META_POLYPOLYGON 0x0538)
(setq META_RESIZEPALETTE 0x0139)
(setq META_DIBBITBLT 0x0940)
(setq META_DIBSTRETCHBLT 0x0b41)
(setq META_DIBCREATEPATTERNBRUSH 0x0142)
(setq META_STRETCHDIB 0x0f43)
(setq META_EXTFLOODFILL 0x0548)
(setq META_SETLAYOUT 0x0149)
(setq META_DELETEOBJECT 0x01f0)
(setq META_CREATEPALETTE 0x00f7)
(setq META_CREATEPATTERNBRUSH 0x01F9)
(setq META_CREATEPENINDIRECT 0x02FA)
(setq META_CREATEFONTINDIRECT 0x02FB)
(setq META_CREATEBRUSHINDIRECT 0x02FC)
(setq META_CREATEREGION 0x06FF)
;; };




;; mask DWORD _EnumFontsMask {
(setq _EnumFontsMask DWORD)

(setq RASTER_FONTTYPE 0x0001)
(setq DEVICE_FONTTYPE 0x002)
(setq TRUETYPE_FONTTYPE 0x004)
;; };



;; mask BYTE _PaletteEntryFlag {
(setq _PaletteEntryFlag BYTE)
(setq PC_RESERVED 0x01)
(setq PC_EXPLICIT 0x02)
(setq PC_NOCOLLAPSE 0x04)
;; };

;; value DWORD _BK_Mode {
(setq _BK_Mode DWORD)

(setq TRANSPARENT 1)
(setq OPAQUE 2)
;; };

;; value DWORD _GM {
(setq _GM DWORD)

(setq GM_COMPATIBLE 1)
(setq GM_ADVANCED 2)
;; };

;; mask DWORD _PT {
(setq _PT DWORD)

(setq PT_CLOSEFIGURE 0x01)
(setq PT_LINETO 0x02)
(setq PT_BEZIERTO 0x04)
(setq PT_MOVETO 0x06)
;; };

;; value DWORD _MM {
(setq _MM DWORD)

(setq MM_TEXT 1)
(setq MM_LOMETRIC 2)
(setq MM_HIMETRIC 3)
(setq MM_LOENGLISH 4)
(setq MM_HIENGLISH 5)
(setq MM_TWIPS 6)
(setq MM_ISOTROPIC 7)
(setq MM_ANISOTROPIC 8)

;; };

;; value DWORD _Coordinate_Mode {
(setq _Coordinate_Mode DWORD)

(setq ABSOLUTE 1)
(setq RELATIVE 2)
;; };

;; value DWORD _StockObject {
(setq _StockObject DWORD)


(setq WHITE_BRUSH 0)
(setq LTGRAY_BRUSH 1)
(setq GRAY_BRUSH 2)
(setq DKGRAY_BRUSH 3)
(setq BLACK_BRUSH 4)
(setq NULL_BRUSH 5)

(setq WHITE_PEN 6)
(setq BLACK_PEN 7)
(setq NULL_PEN 8)
(setq OEM_FIXED_FONT 10)
(setq ANSI_FIXED_FONT 11)
(setq ANSI_VAR_FONT 12)
(setq SYSTEM_FONT 13)
(setq DEVICE_DEFAULT_FONT 14)
(setq DEFAULT_PALETTE 15)
(setq SYSTEM_FIXED_FONT 16)

(setq DEFAULT_GUI_FONT 17)

(setq DC_BRUSH 18)
(setq DC_PEN 19)

;; };

;; value DWORD COLORREF_RETURN {
(setq COLORREF_RETURN DWORD)
(setq CLR_INVALID 0xFFFFFFFF)
;; };

;; value DWORD _BrushStyles {
(setq _BrushStyles DWORD)

(setq BS_SOLID 0)
(setq BS_NULL 1)
(setq BS_HATCHED 2)
(setq BS_PATTERN 3)
(setq BS_INDEXED 4)
(setq BS_DIBPATTERN 5)
(setq BS_DIBPATTERNPT 6)
(setq BS_PATTERN8X8 7)
(setq BS_DIBPATTERN8X8 8)
(setq BS_MONOPATTERN 9)
;; };

;; value ULONG_PTR _HatchStyle {
(setq _HatchStyle ULONG_PTR)

(setq HS_HORIZONTAL 0)
(setq HS_VERTICAL 1)
(setq HS_FDIAGONAL 2)


(setq PSIDENT_GDICENTRIC 0)
(setq PSIDENT_PSCENTRIC 1)
;; };
;; value DWORD _PSINJECTMode {
(setq _PSINJECTMode DWORD)



(setq PSINJECT_APPEND 0)
(setq PSINJECT_REPLACE 1)
;; };





;; value WORD _PSINJECT {
(setq _PSINJECT WORD)
(setq PSINJECT_BEGINSTREAM 1)
(setq PSINJECT_PSADOBE 2)
(setq PSINJECT_PAGESATEND 3)
(setq PSINJECT_PAGES 4)

(setq PSINJECT_DOCNEEDEDRES 5)
(setq PSINJECT_DOCSUPPLIEDRES 6)
(setq PSINJECT_PAGEORDER 7)
(setq PSINJECT_ORIENTATION 8)
(setq PSINJECT_BOUNDINGBOX 9)
(setq PSINJECT_DOCUMENTPROCESSCOLORS 10)

(setq PSINJECT_COMMENTS 11)
(setq PSINJECT_BEGINDEFAULTS 12)
(setq PSINJECT_ENDDEFAULTS 13)
(setq PSINJECT_BEGINPROLOG 14)
(setq PSINJECT_ENDPROLOG 15)
(setq PSINJECT_BEGINSETUP 16)
(setq PSINJECT_ENDSETUP 17)
(setq PSINJECT_TRAILER 18)
(setq PSINJECT_EOF 19)
(setq PSINJECT_ENDSTREAM 20)
(setq PSINJECT_DOCUMENTPROCESSCOLORSATEND 21)

(setq PSINJECT_PAGENUMBER 100)
(setq PSINJECT_BEGINPAGESETUP 101)
(setq PSINJECT_ENDPAGESETUP 102)
(setq PSINJECT_PAGETRAILER 103)
(setq PSINJECT_PLATECOLOR 104)

(setq PSINJECT_SHOWPAGE 105)
(setq PSINJECT_PAGEBBOX 106)
(setq PSINJECT_ENDPAGECOMMENTS 107)

(setq PSINJECT_VMSAVE 200)
(setq PSINJECT_VMRESTORE 201)

;; };

;; value DWORD _PSPROTOCOL {
(setq _PSPROTOCOL DWORD)

(setq PSPROTOCOL_ASCII 0)
(setq PSPROTOCOL_BCP 1)
(setq PSPROTOCOL_TBCP 2)
(setq PSPROTOCOL_BINARY 3)
;; };

;; mask DWORD _QDI {
(setq _QDI DWORD)

(setq QDI_SETDIBITS 1)
(setq QDI_GETDIBITS 2)
(setq QDI_DIBTOSCREEN 4)
(setq QDI_STRETCHDIB 8)
;; };

;; value DWORD _FEATURESETTING {
(setq _FEATURESETTING DWORD)


(setq FEATURESETTING_NUP 0)
(setq FEATURESETTING_OUTPUT 1)
(setq FEATURESETTING_PSLEVEL 2)
(setq FEATURESETTING_CUSTPAPER 3)
(setq FEATURESETTING_MIRROR 4)
(setq FEATURESETTING_NEGATIVE 5)
(setq FEATURESETTING_PROTOCOL 6)
;; };

;; value DWORD _PR_JOBSTATUS {
(setq _PR_JOBSTATUS DWORD)
(setq PR_JOBSTATUS 0x0000)
;; };

;; value DWORD _OBJ {
(setq _OBJ DWORD)
(setq OBJ_ERROR 0)

(setq OBJ_PEN 1)
(setq OBJ_BRUSH 2)
(setq OBJ_DC 3)
(setq OBJ_METADC 4)
(setq OBJ_PAL 5)
(setq OBJ_FONT 6)
(setq OBJ_BITMAP 7)
(setq OBJ_REGION 8)
(setq OBJ_METAFILE 9)
(setq OBJ_MEMDC 10)
(setq OBJ_EXTPEN 11)
(setq OBJ_ENHMETADC 12)
(setq OBJ_ENHMETAFILE 13)
(setq OBJ_COLORSPACE 14)
;; };

;; value DWORD _MWT {
(setq _MWT DWORD)

(setq MWT_IDENTITY 1)
(setq MWT_LEFTMULTIPLY 2)
(setq MWT_RIGHTMULTIPLY 3)
;; };




;; value DWORD _CS {
(setq _CS DWORD)
(setq CS_ENABLE 0x00000001)
(setq CS_DISABLE 0x00000002)
(setq CS_DELETE_TRANSFORM 0x00000003)
;; };


;; value DWORD _OUT {
(setq _OUT DWORD)
(setq OUT_DEFAULT_PRECIS 0)
(setq OUT_STRING_PRECIS 1)
(setq OUT_CHARACTER_PRECIS 2)
(setq OUT_STROKE_PRECIS 3)
(setq OUT_TT_PRECIS 4)
(setq OUT_DEVICE_PRECIS 5)
(setq OUT_RASTER_PRECIS 6)
(setq OUT_TT_ONLY_PRECIS 7)
(setq OUT_OUTLINE_PRECIS 8)
(setq OUT_SCREEN_OUTLINE_PRECIS 9)
(setq OUT_PS_ONLY_PRECIS 10)
;; };

;; value BYTE _OUTBYTE {
(setq _OUTBYTE BYTE)
(setq OUT_DEFAULT_PRECIS 0)
(setq OUT_STRING_PRECIS 1)
(setq OUT_CHARACTER_PRECIS 2)
(setq OUT_STROKE_PRECIS 3)
(setq OUT_TT_PRECIS 4)
(setq OUT_DEVICE_PRECIS 5)
(setq OUT_RASTER_PRECIS 6)
(setq OUT_TT_ONLY_PRECIS 7)
(setq OUT_OUTLINE_PRECIS 8)
(setq OUT_SCREEN_OUTLINE_PRECIS 9)
(setq OUT_PS_ONLY_PRECIS 10)
;; };

;; mask DWORD _CLIP {
(setq _CLIP DWORD)
(setq CLIP_DEFAULT_PRECIS 0)
(setq CLIP_CHARACTER_PRECIS 1)
(setq CLIP_STROKE_PRECIS 2)
(setq CLIP_MASK 0xf)
(setq CLIP_LH_ANGLES 0x10)
(setq CLIP_TT_ALWAYS 0x20)
(setq CLIP_EMBEDDED 0x80)
;; };

;; mask BYTE _CLIPBYTE {
(setq _CLIPBYTE BYTE)
(setq CLIP_DEFAULT_PRECIS 0)
(setq CLIP_CHARACTER_PRECIS 1)
(setq CLIP_STROKE_PRECIS 2)
(setq CLIP_MASK 0xf)
(setq CLIP_LH_ANGLES 0x10)
(setq CLIP_TT_ALWAYS 0x20)
(setq CLIP_EMBEDDED 0x80)
;; };

;; value DWORD _QUALITY {
(setq _QUALITY DWORD)
(setq DEFAULT_QUALITY 0)
(setq DRAFT_QUALITY 1)
(setq PROOF_QUALITY 2)
(setq NONANTIALIASED_QUALITY 3)
(setq ANTIALIASED_QUALITY 4)
(setq CLEARTYPE_QUALITY 5)
;; };

;; value BYTE _QUALITYBYTE {
(setq _QUALITYBYTE BYTE)
(setq DEFAULT_QUALITY 0)
(setq DRAFT_QUALITY 1)
(setq PROOF_QUALITY 2)
(setq NONANTIALIASED_QUALITY 3)
(setq ANTIALIASED_QUALITY 4)
;; };

;; value DWORD _PITCH {
(setq _PITCH DWORD)
(setq DEFAULT_PITCH 0)
(setq FIXED_PITCH 1)
(setq VARIABLE_PITCH 2)
(setq MONO_FONT 8)
;; };

;; value DWORD _CHARSET {
(setq _CHARSET DWORD)
(setq ANSI_CHARSET 0)
(setq DEFAULT_CHARSET 1)
(setq SYMBOL_CHARSET 2)
(setq SHIFTJIS_CHARSET 128)
(setq HANGEUL_CHARSET 129)
(setq HANGUL_CHARSET 129)
(setq GB2312_CHARSET 134)
(setq CHINESEBIG5_CHARSET 136)
(setq OEM_CHARSET 255)
(setq JOHAB_CHARSET 130)
(setq HEBREW_CHARSET 177)
(setq ARABIC_CHARSET 178)
(setq GREEK_CHARSET 161)
(setq TURKISH_CHARSET 162)
(setq VIETNAMESE_CHARSET 163)
(setq THAI_CHARSET 222)
(setq EASTEUROPE_CHARSET 238)
(setq RUSSIAN_CHARSET 204)

(setq MAC_CHARSET 77)
(setq BALTIC_CHARSET 186)
;; };

;; value BYTE _CHARSETBYTE {
(setq _CHARSETBYTE BYTE)
(setq ANSI_CHARSET 0)
(setq DEFAULT_CHARSET 1)
(setq SYMBOL_CHARSET 2)
(setq SHIFTJIS_CHARSET 128)
(setq HANGEUL_CHARSET 129)
(setq HANGUL_CHARSET 129)
(setq GB2312_CHARSET 134)
(setq CHINESEBIG5_CHARSET 136)
(setq OEM_CHARSET 255)
(setq JOHAB_CHARSET 130)
(setq HEBREW_CHARSET 177)
(setq ARABIC_CHARSET 178)
(setq GREEK_CHARSET 161)
(setq TURKISH_CHARSET 162)
(setq VIETNAMESE_CHARSET 163)
(setq THAI_CHARSET 222)
(setq EASTEUROPE_CHARSET 238)
(setq RUSSIAN_CHARSET 204)

(setq MAC_CHARSET 77)
(setq BALTIC_CHARSET 186)
;; };

;; mask DWORD _FS {
(setq _FS DWORD)

(setq FS_LATIN1 0x00000001)
(setq FS_LATIN2 0x00000002)
(setq FS_CYRILLIC 0x00000004)
(setq FS_GREEK 0x00000008)
(setq FS_TURKISH 0x00000010)
(setq FS_HEBREW 0x00000020)
(setq FS_ARABIC 0x00000040)
(setq FS_BALTIC 0x00000080)
(setq FS_VIETNAMESE 0x00000100)
(setq FS_THAI 0x00010000)
(setq FS_JISJAPAN 0x00020000)
(setq FS_CHINESESIMP 0x00040000)
(setq FS_WANSUNG 0x00080000)
(setq FS_CHINESETRAD 0x00100000)
(setq FS_JOHAB 0x00200000)
(setq FS_SYMBOL 0x80000000)
;; };

;; mask DWORD _FF {
(setq _FF DWORD)


(setq FF_DONTCARE 0x00)
(setq FF_ROMAN 0x10)
(setq FF_SWISS 0x20)
(setq FF_MODERN 0x30)
(setq FF_SCRIPT 0x40)
(setq FF_DECORATIVE 0x50)

;; };

;; mask BYTE _FFBYTE {
(setq _FFBYTE BYTE)


(setq FF_DONTCARE 0x00)
(setq FF_ROMAN 0x10)
(setq FF_SWISS 0x20)
(setq FF_MODERN 0x30)
(setq FF_SCRIPT 0x40)
(setq FF_DECORATIVE 0x50)

;; };

;; mask int _FW {
(setq _FW "int")
(setq FW_DONTCARE 0)
(setq FW_THIN 100)
(setq FW_EXTRALIGHT 200)
(setq FW_LIGHT 300)
(setq FW_NORMAL 400)
(setq FW_MEDIUM 500)
(setq FW_SEMIBOLD 600)
(setq FW_BOLD 700)
(setq FW_EXTRABOLD 800)
(setq FW_HEAVY 900)

;; };

;; value DWORD _PAN {
(setq _PAN DWORD)
(setq PAN_FAMILYTYPE_INDEX 0)
(setq PAN_SERIFSTYLE_INDEX 1)
(setq PAN_WEIGHT_INDEX 2)
(setq PAN_PROPORTION_INDEX 3)
(setq PAN_CONTRAST_INDEX 4)
(setq PAN_STROKEVARIATION_INDEX 5)
(setq PAN_ARMSTYLE_INDEX 6)
(setq PAN_LETTERFORM_INDEX 7)
(setq PAN_MIDLINE_INDEX 8)
(setq PAN_XHEIGHT_INDEX 9)
;; };

;; value DWORD _PAN_CULTURE {
(setq _PAN_CULTURE DWORD)
(setq PAN_CULTURE_LATIN 0)
;; };

;; value DWORD _PAN_FAMILY {
(setq _PAN_FAMILY DWORD)
(setq PAN_FAMILY_ANY 0)
(setq PAN_FAMILY_NO_FIT 1)

(setq PAN_FAMILY_TEXT_DISPLAY 2)
(setq PAN_FAMILY_SCRIPT 3)
(setq PAN_FAMILY_DECORATIVE 4)
(setq PAN_FAMILY_PICTORIAL 5)
;; };
;; value DWORD _PAN_SERIF {
(setq _PAN_SERIF DWORD)
(setq PAN_SERIF_ANY 0)
(setq PAN_SERIF_NO_FIT 1)
(setq PAN_SERIF_COVE 2)
(setq PAN_SERIF_OBTUSE_COVE 3)
(setq PAN_SERIF_SQUARE_COVE 4)
(setq PAN_SERIF_OBTUSE_SQUARE_COVE 5)
(setq PAN_SERIF_SQUARE 6)
(setq PAN_SERIF_THIN 7)
(setq PAN_SERIF_BONE 8)
(setq PAN_SERIF_EXAGGERATED 9)
(setq PAN_SERIF_TRIANGLE 10)
(setq PAN_SERIF_NORMAL_SANS 11)
(setq PAN_SERIF_OBTUSE_SANS 12)
(setq PAN_SERIF_PERP_SANS 13)
(setq PAN_SERIF_FLARED 14)
(setq PAN_SERIF_ROUNDED 15)
;; };
;; value DWORD _PAN_WEIGHT_CULTURE {
(setq _PAN_WEIGHT_CULTURE DWORD)
(setq PAN_WEIGHT_ANY 0)
(setq PAN_WEIGHT_NO_FIT 1)
(setq PAN_WEIGHT_VERY_LIGHT 2)
(setq PAN_WEIGHT_LIGHT 3)
(setq PAN_WEIGHT_THIN 4)
(setq PAN_WEIGHT_BOOK 5)
(setq PAN_WEIGHT_MEDIUM 6)
(setq PAN_WEIGHT_DEMI 7)
(setq PAN_WEIGHT_BOLD 8)
(setq PAN_WEIGHT_HEAVY 9)
(setq PAN_WEIGHT_BLACK 10)
(setq PAN_WEIGHT_NORD 11)
;; };
;; value DWORD _PAN_PROP {
(setq _PAN_PROP DWORD)
(setq PAN_PROP_ANY 0)
(setq PAN_PROP_NO_FIT 1)
(setq PAN_PROP_OLD_STYLE 2)
(setq PAN_PROP_MODERN 3)
(setq PAN_PROP_EVEN_WIDTH 4)
(setq PAN_PROP_EXPANDED 5)
(setq PAN_PROP_CONDENSED 6)
(setq PAN_PROP_VERY_EXPANDED 7)
(setq PAN_PROP_VERY_CONDENSED 8)
(setq PAN_PROP_MONOSPACED 9)
;; };
;; value DWORD _PAN_CONTRAST {
(setq _PAN_CONTRAST DWORD)
(setq PAN_CONTRAST_ANY 0)
(setq PAN_CONTRAST_NO_FIT 1)
(setq PAN_CONTRAST_NONE 2)
(setq PAN_CONTRAST_VERY_LOW 3)
(setq PAN_CONTRAST_LOW 4)
(setq PAN_CONTRAST_MEDIUM_LOW 5)
(setq PAN_CONTRAST_MEDIUM 6)
(setq PAN_CONTRAST_MEDIUM_HIGH 7)
(setq PAN_CONTRAST_HIGH 8)
(setq PAN_CONTRAST_VERY_HIGH 9)
;; };
;; value DWORD _PAN_STROKE {
(setq _PAN_STROKE DWORD)
(setq PAN_STROKE_ANY 0)
(setq PAN_STROKE_NO_FIT 1)
(setq PAN_STROKE_GRADUAL_DIAG 2)
(setq PAN_STROKE_GRADUAL_TRAN 3)
(setq PAN_STROKE_GRADUAL_VERT 4)
(setq PAN_STROKE_GRADUAL_HORZ 5)
(setq PAN_STROKE_RAPID_VERT 6)
(setq PAN_STROKE_RAPID_HORZ 7)
(setq PAN_STROKE_INSTANT_VERT 8)
;; };
;; value DWORD _PAN_ARMS {
(setq _PAN_ARMS DWORD)
(setq PAN_ARMS_ANY 0)
(setq PAN_ARMS_NO_FIT 1)
(setq PAN_STRAIGHT_ARMS_HORZ 2)
(setq PAN_STRAIGHT_ARMS_WEDGE 3)
(setq PAN_STRAIGHT_ARMS_VERT 4)
(setq PAN_STRAIGHT_ARMS_SINGLE_SERIF 5)
(setq PAN_STRAIGHT_ARMS_DOUBLE_SERIF 6)
(setq PAN_BENT_ARMS_HORZ 7)
(setq PAN_BENT_ARMS_WEDGE 8)
(setq PAN_BENT_ARMS_VERT 9)
(setq PAN_BENT_ARMS_SINGLE_SERIF 10)
(setq PAN_BENT_ARMS_DOUBLE_SERIF 11)
;; };
;; value DWORD _PAN_LETT {
(setq _PAN_LETT DWORD)
(setq PAN_LETT_ANY 0)
(setq PAN_LETT_NO_FIT 1)
(setq PAN_LETT_NORMAL_CONTACT 2)
(setq PAN_LETT_NORMAL_WEIGHTED 3)
(setq PAN_LETT_NORMAL_BOXED 4)
(setq PAN_LETT_NORMAL_FLATTENED 5)
(setq PAN_LETT_NORMAL_ROUNDED 6)
(setq PAN_LETT_NORMAL_OFF_CENTER 7)
(setq PAN_LETT_NORMAL_SQUARE 8)
(setq PAN_LETT_OBLIQUE_CONTACT 9)
(setq PAN_LETT_OBLIQUE_WEIGHTED 10)
(setq PAN_LETT_OBLIQUE_BOXED 11)
(setq PAN_LETT_OBLIQUE_FLATTENED 12)
(setq PAN_LETT_OBLIQUE_ROUNDED 13)
(setq PAN_LETT_OBLIQUE_OFF_CENTER 14)
(setq PAN_LETT_OBLIQUE_SQUARE 15)
;; };
;; value DWORD _PAN_MIDLINE {
(setq _PAN_MIDLINE DWORD)
(setq PAN_MIDLINE_ANY 0)
(setq PAN_MIDLINE_NO_FIT 1)
(setq PAN_MIDLINE_STANDARD_TRIMMED 2)
(setq PAN_MIDLINE_STANDARD_POINTED 3)
(setq PAN_MIDLINE_STANDARD_SERIFED 4)
(setq PAN_MIDLINE_HIGH_TRIMMED 5)
(setq PAN_MIDLINE_HIGH_POINTED 6)
(setq PAN_MIDLINE_HIGH_SERIFED 7)
(setq PAN_MIDLINE_CONSTANT_TRIMMED 8)
(setq PAN_MIDLINE_CONSTANT_POINTED 9)
(setq PAN_MIDLINE_CONSTANT_SERIFED 10)
(setq PAN_MIDLINE_LOW_TRIMMED 11)
(setq PAN_MIDLINE_LOW_POINTED 12)
(setq PAN_MIDLINE_LOW_SERIFED 13)
;; };
;; value DWORD _PAN_XHEIGHT {
(setq _PAN_XHEIGHT DWORD)
(setq PAN_XHEIGHT_ANY 0)
(setq PAN_XHEIGHT_NO_FIT 1)
(setq PAN_XHEIGHT_CONSTANT_SMALL 2)
(setq PAN_XHEIGHT_CONSTANT_STD 3)
(setq PAN_XHEIGHT_CONSTANT_LARGE 4)
(setq PAN_XHEIGHT_DUCKING_SMALL 5)
(setq PAN_XHEIGHT_DUCKING_STD 6)
(setq PAN_XHEIGHT_DUCKING_LARGE 7)
;; };

;; mask DWORD _DISPLAY_DEVICE {
(setq _DISPLAY_DEVICE DWORD)
(setq DISPLAY_DEVICE_ATTACHED_TO_DESKTOP 0x00000001)
(setq DISPLAY_DEVICE_MULTI_DRIVER 0x00000002)
(setq DISPLAY_DEVICE_PRIMARY_DEVICE 0x00000004)
(setq DISPLAY_DEVICE_MIRRORING_DRIVER 0x00000008)
(setq DISPLAY_DEVICE_VGA_COMPATIBLE 0x00000010)
(setq DISPLAY_DEVICE_REMOVABLE 0x00000020)
(setq DISPLAY_DEVICE_MODESPRUNED 0x08000000)
(setq DISPLAY_DEVICE_REMOTE 0x04000000)
(setq DISPLAY_DEVICE_DISCONNECT 0x02000000)
;; };
;; mask DWORD _DISPLAY_DEVICE_STATE {
(setq _DISPLAY_DEVICE_STATE DWORD)

(setq DISPLAY_DEVICE_ACTIVE 0x00000001)
(setq DISPLAY_DEVICE_ATTACHED 0x00000002)
;; };


;; value DWORD _RDH {
(setq _RDH DWORD)
(setq RDH_RECTANGLES 1)
;; };


;; value DWORD _GGO {
(setq _GGO DWORD)
(setq GGO_METRICS 0)
(setq GGO_BITMAP 1)
(setq GGO_NATIVE 2)
(setq GGO_BEZIER 3)
(setq GGO_GRAY2_BITMAP 4)
(setq GGO_GRAY4_BITMAP 5)
(setq GGO_GRAY8_BITMAP 6)
(setq GGO_GLYPH_INDEX 0x0080)
(setq GGO_UNHINTED 0x0100)
;; };

;; value DWORD _TT_POLYGON {
(setq _TT_POLYGON DWORD)
(setq TT_POLYGON_TYPE 24)
;; };

;; value WORD _TT_PRIM {
(setq _TT_PRIM WORD)
(setq TT_PRIM_LINE 1)
(setq TT_PRIM_QSPLINE 2)
(setq TT_PRIM_CSPLINE 3)
;; };

;; typedef struct tagMETAFILEPICT  { {
(struct 'tagMETAFILEPICT
    LONG ; mm
    LONG ; xExt
    LONG ; yExt
    HMETAFILE ; hMF
)
(setq METAFILEPICT tagMETAFILEPICT)
;; } METAFILEPICT
(setq LPMETAFILEPICT "void*")











(setq LCSCSTYPE LONG)
;; value DWORD _LCSCSTYPE {
(setq _LCSCSTYPE DWORD)
(setq LCS_CALIBRATED_RGB 0x00000000)
(setq LCS_DEVICE_RGB 0x00000001)
(setq LCS_DEVICE_CMYK 0x00000002)
;; };

;; mask DWORD _GCP {
(setq _GCP DWORD)
(setq GCP_DBCS 0x0001)
(setq GCP_REORDER 0x0002)
(setq GCP_USEKERNING 0x0008)
(setq GCP_GLYPHSHAPE 0x0010)
(setq GCP_LIGATE 0x0020)

(setq GCP_DIACRITIC 0x0100)
(setq GCP_KASHIDA 0x0400)
(setq GCP_ERROR 0x8000)


(setq GCP_JUSTIFY 0x00010000)

(setq FLI_GLYPHS 0x00040000)
(setq GCP_CLASSIN 0x00080000)
(setq GCP_MAXEXTENT 0x00100000)
(setq GCP_JUSTIFYIN 0x00200000)
(setq GCP_DISPLAYZWG 0x00400000)
(setq GCP_SYMSWAPOFF 0x00800000)
(setq GCP_NUMERICOVERRIDE 0x01000000)
(setq GCP_NEUTRALOVERRIDE 0x02000000)
(setq GCP_NUMERICSLATIN 0x04000000)
(setq GCP_NUMERICSLOCAL 0x08000000)
;; };
;; mask DWORD _GCPCLASS {
(setq _GCPCLASS DWORD)
(setq GCPCLASS_LATIN 1)
(setq GCPCLASS_HEBREW 2)

(setq GCPCLASS_NEUTRAL 3)
(setq GCPCLASS_LOCALNUMBER 4)
(setq GCPCLASS_LATINNUMBER 5)
(setq GCPCLASS_LATINNUMERICTERMINATOR 6)
(setq GCPCLASS_LATINNUMERICSEPARATOR 7)
(setq GCPCLASS_NUMERICSEPARATOR 8)
(setq GCPCLASS_PREBOUNDLTR 0x80)
(setq GCPCLASS_PREBOUNDRTL 0x40)
(setq GCPCLASS_POSTBOUNDLTR 0x20)
(setq GCPCLASS_POSTBOUNDRTL 0x10)

(setq GCPGLYPH_LINKBEFORE 0x8000)
(setq GCPGLYPH_LINKAFTER 0x4000)
;; };

(setq LCSGAMUTMATCH LONG)
;; value DWORD _LCSGAMUTMATCH {
(setq _LCSGAMUTMATCH DWORD)
(setq LCS_GM_BUSINESS 0x00000001)
(setq LCS_GM_GRAPHICS 0x00000002)
(setq LCS_GM_IMAGES 0x00000004)
(setq LCS_GM_ABS_COLORIMETRIC 0x00000008)
;; };


;; value UINT _UpdateICMRegKey {
(setq _UpdateICMRegKey UINT)

(setq ICM_ADDPROFILE 1)
(setq ICM_DELETEPROFILE 2)
(setq ICM_QUERYPROFILE 3)
(setq ICM_SETDEFAULTPROFILE 4)
(setq ICM_REGISTERICMATCHER 5)
(setq ICM_UNREGISTERICMATCHER 6)
(setq ICM_QUERYMATCH 7)
;; };


;; value DWORD _biCompression {
(setq _biCompression DWORD)

(setq BI_RGB 0)
(setq BI_RLE8 1)
(setq BI_RLE4 2)
(setq BI_BITFIELDS 3)
(setq BI_JPEG 4)
(setq BI_PNG 5)
;; };

;; value DWORD _TCI_SRC {
(setq _TCI_SRC DWORD)
(setq TCI_SRCCHARSET 1)
(setq TCI_SRCCODEPAGE 2)
(setq TCI_SRCFONTSIG 3)
;; };


;; mask WORD _RASTERIZER_STATUS_Flag {
(setq _RASTERIZER_STATUS_Flag WORD)

(setq TT_AVAILABLE 0x0001)
(setq TT_ENABLED 0x0002)
;; };


;; mask BYTE _PFD {
(setq _PFD BYTE)

(setq PFD_TYPE_RGBA 0)
(setq PFD_TYPE_COLORINDEX 1)
;; };

;; mask BYTE _PFD_LAYER {
(setq _PFD_LAYER BYTE)

(setq PFD_MAIN_PLANE 0)
(setq PFD_OVERLAY_PLANE 1)
(setq PFD_UNDERLAY_PLANE -1)
;; };
;; mask DWORD _PIXELFORMATDESCRIPTOR {
(setq _PIXELFORMATDESCRIPTOR DWORD)

(setq PFD_DOUBLEBUFFER 0x00000001)
(setq PFD_STEREO 0x00000002)
(setq PFD_DRAW_TO_WINDOW 0x00000004)
(setq PFD_DRAW_TO_BITMAP 0x00000008)
(setq PFD_SUPPORT_GDI 0x00000010)
(setq PFD_SUPPORT_OPENGL 0x00000020)
(setq PFD_GENERIC_FORMAT 0x00000040)
(setq PFD_NEED_PALETTE 0x00000080)
(setq PFD_NEED_SYSTEM_PALETTE 0x00000100)
(setq PFD_SWAP_EXCHANGE 0x00000200)
(setq PFD_SWAP_COPY 0x00000400)
(setq PFD_SWAP_LAYER_BUFFERS 0x00000800)
(setq PFD_GENERIC_ACCELERATED 0x00001000)
(setq PFD_SUPPORT_DIRECTDRAW 0x00002000)


(setq PFD_DEPTH_DONTCARE 0x20000000)
(setq PFD_DOUBLEBUFFER_DONTCARE 0x40000000)
(setq PFD_STEREO_DONTCARE 0x80000000)
;; };



;; mask DWORD _DeviceMode {
(setq _DeviceMode DWORD)

(setq DM_UPDATE 1)
(setq DM_COPY 2)
(setq DM_PROMPT 4)
(setq DM_MODIFY 8)
;; };

;; value DWORD _DC_PRINTRATEUNIT {
(setq _DC_PRINTRATEUNIT DWORD)
(setq PRINTRATEUNIT_PPM 1)
(setq PRINTRATEUNIT_CPS 2)
(setq PRINTRATEUNIT_LPM 3)
(setq PRINTRATEUNIT_IPM 4)
;; };
;; mask DWORD _DCTT {
(setq _DCTT DWORD)

(setq DCTT_BITMAP 0x0000001)
(setq DCTT_DOWNLOAD 0x0000002)
(setq DCTT_SUBDEV 0x0000004)
(setq DCTT_DOWNLOAD_OUTLINE 0x0000008)
;; };
;; value DWORD _DCBA {
(setq _DCBA DWORD)

(setq DCBA_FACEUPNONE 0x0000)
(setq DCBA_FACEUPCENTER 0x0001)
(setq DCBA_FACEUPLEFT 0x0002)
(setq DCBA_FACEUPRIGHT 0x0003)
(setq DCBA_FACEDOWNNONE 0x0100)
(setq DCBA_FACEDOWNCENTER 0x0101)
(setq DCBA_FACEDOWNLEFT 0x0102)
(setq DCBA_FACEDOWNRIGHT 0x0103)
;; };


;; value DWORD _GS_8BIT_INDICES {
(setq _GS_8BIT_INDICES DWORD)
(setq GS_8BIT_INDICES 0x00000001)
;; };


;; value DWORD _GGI_MARK_NONEXISTING_GLYPHS {
(setq _GGI_MARK_NONEXISTING_GLYPHS DWORD)

(setq GGI_MARK_NONEXISTING_GLYPHS 0X0001)
;; };
;; value DWORD _FR {
(setq _FR DWORD)

(setq FR_PRIVATE 0x10)
(setq FR_NOT_ENUM 0x20)
;; };
;; value BYTE _AC_SRC_OVER {
(setq _AC_SRC_OVER BYTE)



(setq AC_SRC_OVER 0x00)
;; };
;; value BYTE _AC_SRC_ALPHA {
(setq _AC_SRC_ALPHA BYTE)



(setq AC_SRC_ALPHA 0x01)
;; };
;; value ULONG _GRADIENT_FILL {
(setq _GRADIENT_FILL ULONG)




(setq GRADIENT_FILL_RECT_H 0x00000000)
(setq GRADIENT_FILL_RECT_V 0x00000001)
(setq GRADIENT_FILL_TRIANGLE 0x00000002)
(setq GRADIENT_FILL_OP_FLAG 0x000000ff)
;; };
;; value WORD _COLORADJUSTMENTValue {
(setq _COLORADJUSTMENTValue WORD)


(setq CA_NEGATIVE 0x0001)
(setq CA_LOG_FILTER 0x0002)
;; };
;; value WORD _IlluminantIndexValue {
(setq _IlluminantIndexValue WORD)


(setq ILLUMINANT_DEVICE_DEFAULT 0)
(setq ILLUMINANT_A 1)
(setq ILLUMINANT_B 2)
(setq ILLUMINANT_C 3)
(setq ILLUMINANT_D50 4)
(setq ILLUMINANT_D55 5)
(setq ILLUMINANT_D65 6)
(setq ILLUMINANT_D75 7)
(setq ILLUMINANT_F2 8)
;; };

;; value DWORD _ICM {
(setq _ICM DWORD)
(setq ICM_OFF 1)
(setq ICM_ON 2)
(setq ICM_QUERY 3)
(setq ICM_DONE_OUTSIDEDC 4)
;; };

;; value DWORD _EMR {
(setq _EMR DWORD)



(setq EMR_HEADER 1)
(setq EMR_POLYBEZIER 2)
(setq EMR_POLYGON 3)
(setq EMR_POLYLINE 4)
(setq EMR_POLYBEZIERTO 5)
(setq EMR_POLYLINETO 6)
(setq EMR_POLYPOLYLINE 7)
(setq EMR_POLYPOLYGON 8)
(setq EMR_SETWINDOWEXTEX 9)
(setq EMR_SETWINDOWORGEX 10)
(setq EMR_SETVIEWPORTEXTEX 11)
(setq EMR_SETVIEWPORTORGEX 12)
(setq EMR_SETBRUSHORGEX 13)
(setq EMR_EOF 14)
(setq EMR_SETPIXELV 15)
(setq EMR_SETMAPPERFLAGS 16)
(setq EMR_SETMAPMODE 17)
(setq EMR_SETBKMODE 18)
(setq EMR_SETPOLYFILLMODE 19)
(setq EMR_SETROP2 20)
(setq EMR_SETSTRETCHBLTMODE 21)
(setq EMR_SETTEXTALIGN 22)
(setq EMR_SETCOLORADJUSTMENT 23)
(setq EMR_SETTEXTCOLOR 24)
(setq EMR_SETBKCOLOR 25)
(setq EMR_OFFSETCLIPRGN 26)
(setq EMR_MOVETOEX 27)
(setq EMR_SETMETARGN 28)
(setq EMR_EXCLUDECLIPRECT 29)
(setq EMR_INTERSECTCLIPRECT 30)
(setq EMR_SCALEVIEWPORTEXTEX 31)
(setq EMR_SCALEWINDOWEXTEX 32)
(setq EMR_SAVEDC 33)
(setq EMR_RESTOREDC 34)
(setq EMR_SETWORLDTRANSFORM 35)
(setq EMR_MODIFYWORLDTRANSFORM 36)
(setq EMR_SELECTOBJECT 37)
(setq EMR_CREATEPEN 38)
(setq EMR_CREATEBRUSHINDIRECT 39)
(setq EMR_DELETEOBJECT 40)
(setq EMR_ANGLEARC 41)
(setq EMR_ELLIPSE 42)
(setq EMR_RECTANGLE 43)
(setq EMR_ROUNDRECT 44)
(setq EMR_ARC 45)
(setq EMR_CHORD 46)
(setq EMR_PIE 47)
(setq EMR_SELECTPALETTE 48)
(setq EMR_CREATEPALETTE 49)
(setq EMR_SETPALETTEENTRIES 50)
(setq EMR_RESIZEPALETTE 51)
(setq EMR_REALIZEPALETTE 52)
(setq EMR_EXTFLOODFILL 53)
(setq EMR_LINETO 54)
(setq EMR_ARCTO 55)
(setq EMR_POLYDRAW 56)
(setq EMR_SETARCDIRECTION 57)
(setq EMR_SETMITERLIMIT 58)
(setq EMR_BEGINPATH 59)
(setq EMR_ENDPATH 60)
(setq EMR_CLOSEFIGURE 61)
(setq EMR_FILLPATH 62)
(setq EMR_STROKEANDFILLPATH 63)
(setq EMR_STROKEPATH 64)
(setq EMR_FLATTENPATH 65)
(setq EMR_WIDENPATH 66)
(setq EMR_SELECTCLIPPATH 67)
(setq EMR_ABORTPATH 68)

(setq EMR_GDICOMMENT 70)
(setq EMR_FILLRGN 71)
(setq EMR_FRAMERGN 72)
(setq EMR_INVERTRGN 73)
(setq EMR_PAINTRGN 74)
(setq EMR_EXTSELECTCLIPRGN 75)
(setq EMR_BITBLT 76)
(setq EMR_STRETCHBLT 77)
(setq EMR_MASKBLT 78)
(setq EMR_PLGBLT 79)
(setq EMR_SETDIBITSTODEVICE 80)
(setq EMR_STRETCHDIBITS 81)
(setq EMR_EXTCREATEFONTINDIRECTW 82)
(setq EMR_EXTTEXTOUTA 83)
(setq EMR_EXTTEXTOUTW 84)
(setq EMR_POLYBEZIER16 85)
(setq EMR_POLYGON16 86)
(setq EMR_POLYLINE16 87)
(setq EMR_POLYBEZIERTO16 88)
(setq EMR_POLYLINETO16 89)
(setq EMR_POLYPOLYLINE16 90)
(setq EMR_POLYPOLYGON16 91)
(setq EMR_POLYDRAW16 92)
(setq EMR_CREATEMONOBRUSH 93)
(setq EMR_CREATEDIBPATTERNBRUSHPT 94)
(setq EMR_EXTCREATEPEN 95)
(setq EMR_POLYTEXTOUTA 96)
(setq EMR_POLYTEXTOUTW 97)

(setq EMR_SETICMMODE 98)
(setq EMR_CREATECOLORSPACE 99)
(setq EMR_SETCOLORSPACE 100)
(setq EMR_DELETECOLORSPACE 101)
(setq EMR_GLSRECORD 102)
(setq EMR_GLSBOUNDEDRECORD 103)
(setq EMR_PIXELFORMAT 104)

(setq EMR_RESERVED_105 105)
(setq EMR_RESERVED_106 106)
(setq EMR_RESERVED_107 107)
(setq EMR_RESERVED_108 108)
(setq EMR_RESERVED_109 109)
(setq EMR_RESERVED_110 110)
(setq EMR_COLORCORRECTPALETTE 111)
(setq EMR_SETICMPROFILEA 112)
(setq EMR_SETICMPROFILEW 113)
(setq EMR_ALPHABLEND 114)
(setq EMR_SETLAYOUT 115)
(setq EMR_TRANSPARENTBLT 116)
(setq EMR_RESERVED_117 117)
(setq EMR_GRADIENTFILL 118)
(setq EMR_RESERVED_119 119)
(setq EMR_RESERVED_120 120)
(setq EMR_COLORMATCHTOTARGETW 121)
(setq EMR_CREATECOLORSPACEW 122)
;; };
;; value DWORD _SETICMPROFILE_EMBEDED {
(setq _SETICMPROFILE_EMBEDED DWORD)

(setq SETICMPROFILE_EMBEDED 0x00000001)
;; };
;; value DWORD _GDICOMMENT {
(setq _GDICOMMENT DWORD)
(setq GDICOMMENT_IDENTIFIER 0x43494447)
(setq GDICOMMENT_WINDOWS_METAFILE 0x80000001)
(setq GDICOMMENT_BEGINGROUP 0x00000002)
(setq GDICOMMENT_ENDGROUP 0x00000003)
(setq GDICOMMENT_MULTIFORMATS 0x40000004)
(setq GDICOMMENT_UNICODE_STRING 0x00000040)
(setq GDICOMMENT_UNICODE_END 0x00000080)
;; };

;; value DWORD _WGL_FONT {
(setq _WGL_FONT DWORD)

(setq WGL_FONT_LINES 0)
(setq WGL_FONT_POLYGONS 1)
;; };
;; value DWORD _LAYERPLANEDESCRIPTOR {
(setq _LAYERPLANEDESCRIPTOR DWORD)


(setq LPD_DOUBLEBUFFER 0x00000001)
(setq LPD_STEREO 0x00000002)
(setq LPD_SUPPORT_GDI 0x00000010)
(setq LPD_SUPPORT_OPENGL 0x00000020)
(setq LPD_SHARE_DEPTH 0x00000040)
(setq LPD_SHARE_STENCIL 0x00000080)
(setq LPD_SHARE_ACCUM 0x00000100)
(setq LPD_SWAP_EXCHANGE 0x00000200)
(setq LPD_SWAP_COPY 0x00000400)
(setq LPD_TRANSPARENT 0x00001000)
;; };
;; value BYTE _LPD_TYPE {
(setq _LPD_TYPE BYTE)

(setq LPD_TYPE_RGBA 0)
(setq LPD_TYPE_COLORINDEX 1)
;; };
;; value DWORD _WGL_SWAP {
(setq _WGL_SWAP DWORD)


(setq WGL_SWAP_MAIN_PLANE 0x00000001)
(setq WGL_SWAP_OVERLAY1 0x00000002)
(setq WGL_SWAP_OVERLAY2 0x00000004)
(setq WGL_SWAP_OVERLAY3 0x00000008)
(setq WGL_SWAP_OVERLAY4 0x00000010)
(setq WGL_SWAP_OVERLAY5 0x00000020)
(setq WGL_SWAP_OVERLAY6 0x00000040)
(setq WGL_SWAP_OVERLAY7 0x00000080)
(setq WGL_SWAP_OVERLAY8 0x00000100)
(setq WGL_SWAP_OVERLAY9 0x00000200)
(setq WGL_SWAP_OVERLAY10 0x00000400)
(setq WGL_SWAP_OVERLAY11 0x00000800)
(setq WGL_SWAP_OVERLAY12 0x00001000)
(setq WGL_SWAP_OVERLAY13 0x00002000)
(setq WGL_SWAP_OVERLAY14 0x00004000)
(setq WGL_SWAP_OVERLAY15 0x00008000)
(setq WGL_SWAP_UNDERLAY1 0x00010000)
(setq WGL_SWAP_UNDERLAY2 0x00020000)
(setq WGL_SWAP_UNDERLAY3 0x00040000)
(setq WGL_SWAP_UNDERLAY4 0x00080000)
(setq WGL_SWAP_UNDERLAY5 0x00100000)
(setq WGL_SWAP_UNDERLAY6 0x00200000)
(setq WGL_SWAP_UNDERLAY7 0x00400000)
(setq WGL_SWAP_UNDERLAY8 0x00800000)
(setq WGL_SWAP_UNDERLAY9 0x01000000)
(setq WGL_SWAP_UNDERLAY10 0x02000000)
(setq WGL_SWAP_UNDERLAY11 0x04000000)
(setq WGL_SWAP_UNDERLAY12 0x08000000)
(setq WGL_SWAP_UNDERLAY13 0x10000000)
(setq WGL_SWAP_UNDERLAY14 0x20000000)
(setq WGL_SWAP_UNDERLAY15 0x40000000)
;; };

;; mask DWORD _otmfsSelection {
(setq _otmfsSelection DWORD)
(setq Italic 0x00)
(setq Underscore 0x01)
(setq Negative 0x02)
(setq Outline 0x04)
(setq Strikeout 0x08)
(setq Bold 0x10)
;; };

;; value WORD RectangleStyleValue {
(setq RectangleStyleValue WORD)
(setq BlackRectangle 0)
(setq WhiteRectangle 1)
(setq GrayRectangle 2)
;; };

;; mask BYTE _TMPF {
(setq _TMPF BYTE)

(setq TMPF_FIXED_PITCH 0x01)
(setq TMPF_VECTOR 0x02)
(setq TMPF_DEVICE 0x08)
(setq TMPF_TRUETYPE 0x04)
;; };

;; mask DWORD _NTMFlags {
(setq _NTMFlags DWORD)

(setq NTM_REGULAR 0x00000040)
(setq NTM_BOLD 0x00000020)
(setq NTM_ITALIC 0x00000001)

(setq NTM_NONNEGATIVE_AC 0x00010000)
(setq NTM_PS_OPENTYPE 0x00020000)
(setq NTM_TT_OPENTYPE 0x00040000)
(setq NTM_MULTIPLEMASTER 0x00080000)
(setq NTM_TYPE1 0x00100000)
(setq NTM_DSIG 0x00200000)
;; };



;; value BYTE PanFamilyType {
(setq PanFamilyType BYTE)
(setq PAN_ANY 0)
(setq PAN_NO_FIT 1)

(setq PAN_FAMILY_TEXT_DISPLAY 2)
(setq PAN_FAMILY_SCRIPT 3)
(setq PAN_FAMILY_DECORATIVE 4)
(setq PAN_FAMILY_PICTORIAL 5)
;; };
;; value BYTE PanSerifType {
(setq PanSerifType BYTE)
(setq PAN_SERIF_COVE 2)
(setq PAN_SERIF_OBTUSE_COVE 3)
(setq PAN_SERIF_SQUARE_COVE 4)
(setq PAN_SERIF_OBTUSE_SQUARE_COVE 5)
(setq PAN_SERIF_SQUARE 6)
(setq PAN_SERIF_THIN 7)
(setq PAN_SERIF_BONE 8)
(setq PAN_SERIF_EXAGGERATED 9)
(setq PAN_SERIF_TRIANGLE 10)
(setq PAN_SERIF_NORMAL_SANS 11)
(setq PAN_SERIF_OBTUSE_SANS 12)
(setq PAN_SERIF_PERP_SANS 13)
(setq PAN_SERIF_FLARED 14)
(setq PAN_SERIF_ROUNDED 15)
;; };
;; value BYTE PanWeightType {
(setq PanWeightType BYTE)
(setq PAN_WEIGHT_VERY_LIGHT 2)
(setq PAN_WEIGHT_LIGHT 3)
(setq PAN_WEIGHT_THIN 4)
(setq PAN_WEIGHT_BOOK 5)
(setq PAN_WEIGHT_MEDIUM 6)
(setq PAN_WEIGHT_DEMI 7)
(setq PAN_WEIGHT_BOLD 8)
(setq PAN_WEIGHT_HEAVY 9)
(setq PAN_WEIGHT_BLACK 10)
(setq PAN_WEIGHT_NORD 11)
;; };
;; value BYTE PanPropType {
(setq PanPropType BYTE)
(setq PAN_PROP_OLD_STYLE 2)
(setq PAN_PROP_MODERN 3)
(setq PAN_PROP_EVEN_WIDTH 4)
(setq PAN_PROP_EXPANDED 5)
(setq PAN_PROP_CONDENSED 6)
(setq PAN_PROP_VERY_EXPANDED 7)
(setq PAN_PROP_VERY_CONDENSED 8)
(setq PAN_PROP_MONOSPACED 9)
;; };
;; value BYTE PanConstrastType {
(setq PanConstrastType BYTE)
(setq PAN_CONTRAST_NONE 2)
(setq PAN_CONTRAST_VERY_LOW 3)
(setq PAN_CONTRAST_LOW 4)
(setq PAN_CONTRAST_MEDIUM_LOW 5)
(setq PAN_CONTRAST_MEDIUM 6)
(setq PAN_CONTRAST_MEDIUM_HIGH 7)
(setq PAN_CONTRAST_HIGH 8)
(setq PAN_CONTRAST_VERY_HIGH 9)
;; };
;; value BYTE PanStrokeType {
(setq PanStrokeType BYTE)
(setq PAN_STROKE_GRADUAL_DIAG 2)
(setq PAN_STROKE_GRADUAL_TRAN 3)
(setq PAN_STROKE_GRADUAL_VERT 4)
(setq PAN_STROKE_GRADUAL_HORZ 5)
(setq PAN_STROKE_RAPID_VERT 6)
(setq PAN_STROKE_RAPID_HORZ 7)
(setq PAN_STROKE_INSTANT_VERT 8)
;; };
;; value BYTE PanArmsType {
(setq PanArmsType BYTE)
(setq PAN_STRAIGHT_ARMS_HORZ 2)
(setq PAN_STRAIGHT_ARMS_WEDGE 3)
(setq PAN_STRAIGHT_ARMS_VERT 4)
(setq PAN_STRAIGHT_ARMS_SINGLE_SERIF 5)
(setq PAN_STRAIGHT_ARMS_DOUBLE_SERIF 6)
(setq PAN_BENT_ARMS_HORZ 7)
(setq PAN_BENT_ARMS_WEDGE 8)
(setq PAN_BENT_ARMS_VERT 9)
(setq PAN_BENT_ARMS_SINGLE_SERIF 10)
(setq PAN_BENT_ARMS_DOUBLE_SERIF 11)
;; };
;; value BYTE PanLettType {
(setq PanLettType BYTE)
(setq PAN_LETT_NORMAL_CONTACT 2)
(setq PAN_LETT_NORMAL_WEIGHTED 3)
(setq PAN_LETT_NORMAL_BOXED 4)
(setq PAN_LETT_NORMAL_FLATTENED 5)
(setq PAN_LETT_NORMAL_ROUNDED 6)
(setq PAN_LETT_NORMAL_OFF_CENTER 7)
(setq PAN_LETT_NORMAL_SQUARE 8)
(setq PAN_LETT_OBLIQUE_CONTACT 9)
(setq PAN_LETT_OBLIQUE_WEIGHTED 10)
(setq PAN_LETT_OBLIQUE_BOXED 11)
(setq PAN_LETT_OBLIQUE_FLATTENED 12)
(setq PAN_LETT_OBLIQUE_ROUNDED 13)
(setq PAN_LETT_OBLIQUE_OFF_CENTER 14)
(setq PAN_LETT_OBLIQUE_SQUARE 15)
;; };
;; value BYTE PanMidlineType {
(setq PanMidlineType BYTE)
(setq PAN_MIDLINE_STANDARD_TRIMMED 2)
(setq PAN_MIDLINE_STANDARD_POINTED 3)
(setq PAN_MIDLINE_STANDARD_SERIFED 4)
(setq PAN_MIDLINE_HIGH_TRIMMED 5)
(setq PAN_MIDLINE_HIGH_POINTED 6)
(setq PAN_MIDLINE_HIGH_SERIFED 7)
(setq PAN_MIDLINE_CONSTANT_TRIMMED 8)
(setq PAN_MIDLINE_CONSTANT_POINTED 9)
(setq PAN_MIDLINE_CONSTANT_SERIFED 10)
(setq PAN_MIDLINE_LOW_TRIMMED 11)
(setq PAN_MIDLINE_LOW_POINTED 12)
(setq PAN_MIDLINE_LOW_SERIFED 13)
;; };
;; value BYTE PanXHeightType {
(setq PanXHeightType BYTE)
(setq PAN_XHEIGHT_CONSTANT_SMALL 2)
(setq PAN_XHEIGHT_CONSTANT_STD 3)
(setq PAN_XHEIGHT_CONSTANT_LARGE 4)
(setq PAN_XHEIGHT_DUCKING_SMALL 5)
(setq PAN_XHEIGHT_DUCKING_STD 6)
(setq PAN_XHEIGHT_DUCKING_LARGE 7)
;; };

;; value DWORD EMRSignature {
(setq EMRSignature DWORD)
(setq ENHMETA_SIGNATURE 0x464D4520)
(setq EPS_SIGNATURE 0x46535045)
;; };

;; value DWORD EMRColorSpaceFlagMask {
(setq EMRColorSpaceFlagMask DWORD)
(setq CREATECOLORSPACE_EMBEDED 0x00000001)
;; };

;; value DWORD EMRColorMatchFlagMask {
(setq EMRColorMatchFlagMask DWORD)
(setq COLORMATCHTOTARGET_EMBEDED 0x00000001)
;; };






;; typedef struct  tagCOLORADJUSTMENT  { {
(struct 'tagCOLORADJUSTMENT
  WORD ; caSize
  _COLORADJUSTMENTValue ; caFlags
  _IlluminantIndexValue ; caIlluminantIndex
  WORD  ; caRedGamma
  WORD  ; caGreenGamma
  WORD  ; caBlueGamma
  WORD  ; caReferenceBlack
  WORD  ; caReferenceWhite
  SHORT ; caContrast
  SHORT ; caBrightness
  SHORT ; caColorfulness
  SHORT ; caRedGreenTint
)
(setq COLORADJUSTMENT tagCOLORADJUSTMENT)
;; } COLORADJUSTMENT
(setq PCOLORADJUSTMENT "void*")
(setq LPCOLORADJUSTMENT "void*")

;; typedef struct _POINTL  { {
(struct '_POINTL
  LONG ; x
  LONG ; y
)
(setq POINTL _POINTL)
;; } POINTL
(setq PPOINTL "void*") ; "void*")

;; typedef struct tagPOINTS  { {
(struct 'tagPOINTS
  SHORT ; x
  SHORT ; y
)
(setq POINTS tagPOINTS)
;; } POINTS
(setq PPOINTS "void*")

;; typedef struct _DRAWPATRECT  { {
(struct '_DRAWPATRECT
    ;; ptPosition
    LONG ; x
    LONG ; y
    ;; ptSize
    LONG ; x
    LONG ; y
    RectangleStyleValue ; wStyle
    WORD ; wPattern
)
(setq DRAWPATRECT _DRAWPATRECT)
;; } DRAWPATRECT
(setq PDRAWPATRECT "void*")



;; typedef struct _PSFEATURE_OUTPUT  { {
(struct '_PSFEATURE_OUTPUT
    BOOL ; bPageIndependent
    BOOL ; bSetPageDevice
)
(setq PSFEATURE_OUTPUT _PSFEATURE_OUTPUT)
;; } PSFEATURE_OUTPUT
(setq PPSFEATURE_OUTPUT "void*")



;; typedef struct _PSFEATURE_CUSTPAPER  { {
(struct '_PSFEATURE_CUSTPAPER
    LONG ; lOrientation
    LONG ; lWidth
    LONG ; lHeight
    LONG ; lWidthOffset
    LONG ; lHeightOffset

)
(setq PSFEATURE_CUSTPAPER _PSFEATURE_CUSTPAPER)
;; } PSFEATURE_CUSTPAPER
(setq PPSFEATURE_CUSTPAPER "void*")



;; typedef struct _PSINJECTDATA  { {
(struct '_PSINJECTDATA
    DWORD ; DataBytes;
    _PSINJECT ; InjectionPoint;
    WORD ; Flags;
)
;; } PSINJECTDATA,
(setq PPSINJECTDATA "void*")


;; typedef struct  tagXFORM    { {
(struct 'tagXFORM
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
)
(setq PXFORM "void*")
(setq LPXFORM "void*")


;; typedef struct tagBITMAP    { {
(struct 'tagBITMAP
    LONG ; bmType
    LONG ; bmWidth
    LONG ; bmHeight
    LONG ; bmWidthBytes
    WORD ; bmPlanes
    WORD ; bmBitsPixel
    LPVOID ; bmBits  
)
(setq BITMAP tagBITMAP)
(setq PBITMAP "void*")
(setq NPBITMAP "void*")
(setq LPBITMAP "void*")

;; typedef struct tagRGBTRIPLE  { {
(struct 'tagRGBTRIPLE
    BYTE ; rgbtBlue
    BYTE ; rgbtGreen
    BYTE ; rgbtRed
)
(setq RGBTRIPLE tagRGBTRIPLE)
;; } RGBTRIPLE

;; typedef struct tagRGBQUAD  { {
(struct 'tagRGBQUAD
    BYTE ; rgbBlue
    BYTE ; rgbGreen
    BYTE ; rgbRed
    BYTE ; rgbReserved
)
(setq RGBQUAD tagRGBQUAD)
;; } RGBQUAD
(setq LPRGBQUAD "void*")


(setq FXPT16DOT16 "long")
(setq LPFXPT16DOT16 "void*")

(setq FXPT2DOT30 "long")
(setq LPFXPT2DOT30 "void*")




;; typedef struct tagCIEXYZ { {
(struct 'tagCIEXYZ
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
)
(setq CIEXYZ tagCIEXYZ)
;; } CIEXYZ
(setq LPCIEXYZ "void*")

;; typedef struct tagICEXYZTRIPLE { {
(struct 'tagICEXYZTRIPLE
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
)
(setq CIEXYZTRIPLE tagICEXYZTRIPLE)
;; } CIEXYZTRIPLE
(setq LPCIEXYZTRIPLE "void*")







;; typedef struct tagLOGCOLORSPACEA  { {
(struct 'tagLOGCOLORSPACEA
    DWORD ; lcsSignature
    DWORD ; lcsVersion
    DWORD ; lcsSize
    _LCSCSTYPE ; lcsCSType
    _LCSGAMUTMATCH ; lcsIntent
    ;; lcsEndpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; lcsGammaRed
    DWORD ; lcsGammaGreen
    DWORD ; lcsGammaBlue
    CHAR ; lcsFilename
)
(setq LOGCOLORSPACEA tagLOGCOLORSPACEA)
;; } LOGCOLORSPACEA
(setq LPLOGCOLORSPACEA "void*")
;; typedef struct tagLOGCOLORSPACEW  { {
(struct 'tagLOGCOLORSPACEW
    DWORD ; lcsSignature
    DWORD ; lcsVersion
    DWORD ; lcsSize
    _LCSCSTYPE ; lcsCSType
    _LCSGAMUTMATCH ; lcsIntent
    ;; lcsEndpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; lcsGammaRed
    DWORD ; lcsGammaGreen
    DWORD ; lcsGammaBlue
    WCHAR ; lcsFilename
)
(setq LOGCOLORSPACEW tagLOGCOLORSPACEW)
;; } LOGCOLORSPACEW
(setq LPLOGCOLORSPACEW "void*")




;; typedef struct tagBITMAPCOREHEADER  { {
(struct 'tagBITMAPCOREHEADER
    DWORD ; bcSize;
    WORD ; bcWidth
    WORD ; bcHeight
    WORD ; bcPlanes
    WORD ; bcBitCount
)
(setq BITMAPCOREHEADER tagBITMAPCOREHEADER)
;; } BITMAPCOREHEADER
(setq LPBITMAPCOREHEADER "void*")
(setq PBITMAPCOREHEADER "void*")

;; typedef struct tagBITMAPINFOHEADER { {
(struct 'tagBITMAPINFOHEADER
    DWORD ; biSize
    LONG ; biWidth
    LONG ; biHeight
    WORD ; biPlanes
    WORD ; biBitCount
    _biCompression ; biCompression
    DWORD ; biSizeImage
    LONG ; biXPelsPerMeter
    LONG ; biYPelsPerMeter
    DWORD ; biClrUsed
    DWORD ; biClrImportant
)
(setq BITMAPINFOHEADER tagBITMAPINFOHEADER)
;; } BITMAPINFOHEADER
(setq LPBITMAPINFOHEADER "void*")
(setq PBITMAPINFOHEADER "void*")

;; typedef struct tagBITMAPV4HEADER  { {
(struct 'tagBITMAPV4HEADER
    DWORD ; bV4Size
    LONG ; bV4Width
    LONG ; bV4Height
    WORD ; bV4Planes
    WORD ; bV4BitCount
    _biCompression ; bV4V4Compression
    DWORD ; bV4SizeImage
    LONG ; bV4XPelsPerMeter
    LONG ; bV4YPelsPerMeter
    DWORD ; bV4ClrUsed
    DWORD ; bV4ClrImportant
    DWORD ; bV4RedMask
    DWORD ; bV4GreenMask
    DWORD ; bV4BlueMask
    DWORD ; bV4AlphaMask
    DWORD ; bV4CSType
    ;; bV4Endpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; bV4GammaRed
    DWORD ; bV4GammaGreen
    DWORD ; bV4GammaBlue
)
(setq BITMAPV4HEADER tagBITMAPV4HEADER)
;; } BITMAPV4HEADER
(setq LPBITMAPV4HEADER "void*")
(setq PBITMAPV4HEADER "void*")

;; typedef struct tagBITMAPV5HEADER  { {
(struct 'tagBITMAPV5HEADER
    DWORD ; bV5Size
    LONG ; bV5Width
    LONG ; bV5Height
    WORD ; bV5Planes
    WORD ; bV5BitCount
    _biCompression ; bV5Compression
    DWORD ; bV5SizeImage
    LONG ; bV5XPelsPerMeter
    LONG ; bV5YPelsPerMeter
    DWORD ; bV5ClrUsed
    DWORD ; bV5ClrImportant
    DWORD ; bV5RedMask
    DWORD ; bV5GreenMask
    DWORD ; bV5BlueMask
    DWORD ; bV5AlphaMask
    DWORD ; bV5CSType
    ;; bV5Endpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; bV5GammaRed
    DWORD ; bV5GammaGreen
    DWORD ; bV5GammaBlue
    DWORD ; bV5Intent
    DWORD ; bV5ProfileData
    DWORD ; bV5ProfileSize
    DWORD ; bV5Reserved
)
(setq BITMAPV5HEADER tagBITMAPV5HEADER)
;; } BITMAPV5HEADER
(setq LPBITMAPV5HEADER "void*")
(setq PBITMAPV5HEADER "void*")





;; typedef struct tagBITMAPINFO  { {
(struct 'tagBITMAPINFO
    ;; bmiHeader
    DWORD ; biSize
    LONG ; biWidth
    LONG ; biHeight
    WORD ; biPlanes
    WORD ; biBitCount
    _biCompression ; biCompression
    DWORD ; biSizeImage
    LONG ; biXPelsPerMeter
    LONG ; biYPelsPerMeter
    DWORD ; biClrUsed
    DWORD ; biClrImportant
    ;; bmiColors
    BYTE ; rgbBlue
    BYTE ; rgbGreen
    BYTE ; rgbRed
    BYTE ; rgbReserved
)
(setq BITMAPINFO tagBITMAPINFO)
;; } BITMAPINFO
(setq LPBITMAPINFO "void*")
(setq PBITMAPINFO "void*")

;; typedef struct tagBITMAPCOREINFO  { {
(struct 'tagBITMAPCOREINFO
    ;; bmciHeader
    DWORD ; bcSize;
    WORD ; bcWidth
    WORD ; bcHeight
    WORD ; bcPlanes
    WORD ; bcBitCount
    ;; bmciColors
    BYTE ; rgbtBlue
    BYTE ; rgbtGreen
    BYTE ; rgbtRed
)
(setq BITMAPCOREINFO tagBITMAPCOREINFO)
;; } BITMAPCOREINFO
(setq LPBITMAPCOREINFO "void*")
(setq PBITMAPCOREINFO "void*")

;; typedef struct tagBITMAPFILEHEADER  { {
(struct 'tagBITMAPFILEHEADER
    WORD ; bfType
    DWORD ; bfSize
    WORD ; bfReserved1
    WORD ; bfReserved2
    DWORD ; bfOffBits
)
(setq BITMAPFILEHEADER tagBITMAPFILEHEADER)
;; } BITMAPFILEHEADER
(setq LPBITMAPFILEHEADER "void*")
(setq PBITMAPFILEHEADER "void*")


;; typedef struct tagFONTSIGNATURE { {
(struct 'tagFONTSIGNATURE
    DWORD ; fsUsb
    DWORD ; fsCsb
)
(setq FONTSIGNATURE tagFONTSIGNATURE)
;; } FONTSIGNATURE
(setq PFONTSIGNATURE "void*")
(setq LPFONTSIGNATURE "void*")

;; typedef struct tagCHARSETINFO { {
(struct 'tagCHARSETINFO
    UINT ; ciCharset
    UINT ; ciACP
    ;; fs
    DWORD ; fsUsb
    DWORD ; fsCsb
)
(setq CHARSETINFO tagCHARSETINFO)
;; } CHARSETINFO
(setq PCHARSETINFO "void*")
(setq NPCHARSETINFO "void*")
(setq LPCHARSETINFO "void*")

;; typedef struct tagLOCALESIGNATURE { {
(struct 'tagLOCALESIGNATURE
    DWORD ; lsUsb
    DWORD ; lsCsbDefault
    DWORD ; lsCsbSupported
)
(setq LOCALESIGNATURE tagLOCALESIGNATURE)
;; } LOCALESIGNATURE
(setq PLOCALESIGNATURE "void*")
(setq LPLOCALESIGNATURE "void*")





;; typedef struct tagHANDLETABLE    { {
(struct 'tagHANDLETABLE
    HGDIOBJ ; objectHandle
  
)
(setq PHANDLETABLE "void*")
(setq LPHANDLETABLE "void*")

;; typedef struct tagMETARECORD    { {
(struct 'tagMETARECORD
    DWORD ; rdSize
    WORD ; rdFunction
    WORD ; rdParm
  
)
(setq PMETARECORD "void*")
(setq LPMETARECORD "void*")

;; typedef struct tagMETAHEADER { {
(struct 'tagMETAHEADER
    WORD ; mtType
    WORD ; mtHeaderSize
    WORD ; mtVersion
    DWORD ; mtSize
    WORD ; mtNoObjects
    DWORD ; mtMaxRecord
    WORD ; mtNoParameters
)
(setq METAHEADER tagMETAHEADER)
;; } METAHEADER
(setq PMETAHEADER "void*")
(setq LPMETAHEADER "void*")



;; typedef struct tagENHMETARECORD { {
(struct 'tagENHMETARECORD
    DWORD ; iType;
    DWORD ; nSize;
    DWORD ; dParm;
)
(setq ENHMETARECORD tagENHMETARECORD)
;; } ENHMETARECORD
(setq PENHMETARECORD "void*")
(setq LPENHMETARECORD "void*")

;; typedef struct tagENHMETAHEADER { {
(struct 'tagENHMETAHEADER
    DWORD ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    ;; rclFrame;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; dSignature;
    DWORD ; nVersion;
    DWORD ; nBytes;
    DWORD ; nRecords;
    WORD ; nHandles;
    WORD ; sReserved;
    DWORD ; nDescription;
    DWORD ; offDescription;
    DWORD ; nPalEntries;
    ;; szlDevice;
    LONG ; cx
    LONG ; cy
    ;; szlMillimeters;
    LONG ; cx
    LONG ; cy
    DWORD ; cbPixelFormat;
    DWORD ; offPixelFormat;
    DWORD ; bOpenGL;
    ;; szlMicrometers;
    LONG ; cx
    LONG ; cy
    )

(setq ENHMETAHEADER tagENHMETAHEADER)
;; } ENHMETAHEADER
(setq PENHMETAHEADER "void*")
(setq LPENHMETAHEADER "void*")






;; typedef struct tagTEXTMETRICA { {
(struct 'tagTEXTMETRICA
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    BYTE ; tmFirstChar
    BYTE ; tmLastChar
    BYTE ; tmDefaultChar
    BYTE ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
)
(setq TEXTMETRICA tagTEXTMETRICA)
;; } TEXTMETRICA
(setq PTEXTMETRICA "void*")
(setq NPTEXTMETRICA "void*")
(setq LPTEXTMETRICA "void*")

;; typedef struct tagTEXTMETRICW { {
(struct 'tagTEXTMETRICW
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    WCHAR ; tmFirstChar
    WCHAR ; tmLastChar
    WCHAR ; tmDefaultChar
    WCHAR ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
)
(setq TEXTMETRICW tagTEXTMETRICW)
;; } TEXTMETRICW
(setq PTEXTMETRICW "void*")
(setq NPTEXTMETRICW "void*")
(setq LPTEXTMETRICW "void*")

;; typedef struct tagNEWTEXTMETRICA { {
(struct 'tagNEWTEXTMETRICA
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    BYTE ; tmFirstChar
    BYTE ; tmLastChar
    BYTE ; tmDefaultChar
    BYTE ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    DWORD ; ntmFlags
    UINT ; ntmSizeEM
    UINT ; ntmCellHeight
    UINT ; ntmAvgWidth
)
(setq NEWTEXTMETRICA tagNEWTEXTMETRICA)
;; } NEWTEXTMETRICA
(setq PNEWTEXTMETRICA "void*")
(setq NPNEWTEXTMETRICA "void*")
(setq LPNEWTEXTMETRICA "void*")

;; typedef struct tagNEWTEXTMETRICW { {
(struct 'tagNEWTEXTMETRICW
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    WCHAR ; tmFirstChar
    WCHAR ; tmLastChar
    WCHAR ; tmDefaultChar
    WCHAR ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    DWORD ; ntmFlags
    UINT ; ntmSizeEM
    UINT ; ntmCellHeight
    UINT ; ntmAvgWidth
)
(setq NEWTEXTMETRICW tagNEWTEXTMETRICW)
;; } NEWTEXTMETRICW
(setq PNEWTEXTMETRICW "void*")
(setq NPNEWTEXTMETRICW "void*")
(setq LPNEWTEXTMETRICW "void*")

;; typedef struct tagNEWTEXTMETRICEXA { {
(struct 'tagNEWTEXTMETRICEXA
    ;; ntmTm
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    BYTE ; tmFirstChar
    BYTE ; tmLastChar
    BYTE ; tmDefaultChar
    BYTE ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    DWORD ; ntmFlags
    UINT ; ntmSizeEM
    UINT ; ntmCellHeight
    UINT ; ntmAvgWidth
    ;; ntmFontSig
    DWORD ; fsUsb
    DWORD ; fsCsb
)
(setq NEWTEXTMETRICEXA tagNEWTEXTMETRICEXA)
;; }NEWTEXTMETRICEXA

;; typedef struct tagNEWTEXTMETRICEXW { {
(struct 'tagNEWTEXTMETRICEXW
    ;; ntmTm
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    WCHAR ; tmFirstChar
    WCHAR ; tmLastChar
    WCHAR ; tmDefaultChar
    WCHAR ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    DWORD ; ntmFlags
    UINT ; ntmSizeEM
    UINT ; ntmCellHeight
    UINT ; ntmAvgWidth
    ;; ntmFontSig
    DWORD ; fsUsb
    DWORD ; fsCsb
)
(setq NEWTEXTMETRICEXW tagNEWTEXTMETRICEXW)
;; }NEWTEXTMETRICEXW




;; typedef struct tagPELARRAY    { {
(struct 'tagPELARRAY
    LONG ; paXCount
    LONG ; paYCount
    LONG ; paXExt
    LONG ; paYExt
    BYTE ; paRGBs
  
)
(setq PPELARRAY "void*")
(setq NPPELARRAY "void*")
(setq LPPELARRAY "void*")


;; typedef struct tagLOGBRUSH    { {
(struct 'tagLOGBRUSH
    _BrushStyles ; lbStyle
    COLORREF ; lbColor
    _HatchStyle ; lbHatch
  
)
(setq PLOGBRUSH "void*")
(setq NPLOGBRUSH "void*")
(setq LPLOGBRUSH "void*")

;; typedef struct tagLOGBRUSH32    { {
(struct 'tagLOGBRUSH32
    _BrushStyles ; lbStyle
    COLORREF ; lbColor
    _HatchStyle ; lbHatch
  
)
(setq PLOGBRUSH32 "void*")
(setq NPLOGBRUSH32 "void*")
(setq LPLOGBRUSH32 "void*")

(setq PATTERN LOGBRUSH)
(setq PPATTERN "void*")
(setq NPPATTERN "void*")
(setq LPPATTERN "void*")

(setq _PS UINT)

;; typedef struct tagLOGPEN    { {
(struct 'tagLOGPEN
    _PS ; lopnStyle
    ;; lopnWidth
    LONG ; x
    LONG ; y
    COLORREF ; lopnColor
)
(setq PLOGPEN "void*")
(setq NPLOGPEN "void*")
(setq LPLOGPEN "void*")

;; typedef struct tagEXTLOGPEN  { {
(struct 'tagEXTLOGPEN
    _PS ; elpPenStyle
    DWORD ; elpWidth
    _BrushStyles ; elpBrushStyle
    COLORREF ; elpColor
    _HatchStyle ; elpHatch
    DWORD ; elpNumEntries
    DWORD ; elpStyleEntry
)
(setq EXTLOGPEN tagEXTLOGPEN)
;; } EXTLOGPEN
(setq PEXTLOGPEN "void*")
(setq NPEXTLOGPEN "void*")
(setq LPEXTLOGPEN "void*")


;; typedef struct tagLOGPALETTE  { {
(struct 'tagLOGPALETTE
    WORD ; palVersion
    WORD ; palNumEntries
    ;; palPalEntry
    BYTE ; peRed
    BYTE ; peGreen
    BYTE ; peBlue
    BYTE ; peFlags
    )
(setq LOGPALETTE tagLOGPALETTE)
;; } LOGPALETTE
(setq PLOGPALETTE "void*")
(setq NPLOGPALETTE "void*")
(setq LPLOGPALETTE "void*")


;; typedef struct tagLOGFONTA { {
(struct 'tagLOGFONTA
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    CHAR ; lfFaceName
)
(setq LOGFONTA tagLOGFONTA)
;; } LOGFONTA
(setq PLOGFONTA "void*")
(setq NPLOGFONTA "void*")
(setq LPLOGFONTA "void*")
;; typedef struct tagLOGFONTW { {
(struct 'tagLOGFONTW
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    WCHAR ; lfFaceName
)
(setq LOGFONTW tagLOGFONTW)
;; } LOGFONTW
(setq PLOGFONTW "void*")
(setq NPLOGFONTW "void*")
(setq LPLOGFONTW "void*")

;; typedef struct tagENUMLOGFONTA { {
(struct 'tagENUMLOGFONTA
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    CHAR ; lfFaceName
    BYTE ; elfFullName
    BYTE ; elfStyle
)
(setq ENUMLOGFONTA tagENUMLOGFONTA)
;; } ENUMLOGFONTA
(setq LPENUMLOGFONTA "void*")

;; typedef struct tagENUMLOGFONTW { {
(struct 'tagENUMLOGFONTW
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    WCHAR ; lfFaceName
    WCHAR ; elfFullName
    WCHAR ; elfStyle
)
(setq ENUMLOGFONTW tagENUMLOGFONTW)
;; } ENUMLOGFONTW
(setq LPENUMLOGFONTW "void*")

;; typedef struct tagENUMLOGFONTEXA { {
(struct 'tagENUMLOGFONTEXA
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    CHAR ; lfFaceName
    BYTE ; elfFullName
    BYTE ; elfStyle
    BYTE ; elfScript
)
(setq ENUMLOGFONTEXA tagENUMLOGFONTEXA)
;; } ENUMLOGFONTEXA
(setq LPENUMLOGFONTEXA "void*")
;; typedef struct tagENUMLOGFONTEXW { {
(struct 'tagENUMLOGFONTEXW
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    WCHAR ; lfFaceName
    WCHAR ; elfFullName
    WCHAR ; elfStyle
    WCHAR ; elfScript
)
(setq ENUMLOGFONTEXW tagENUMLOGFONTEXW)
;; } ENUMLOGFONTEXW
(setq LPENUMLOGFONTEXW "void*")

;; typedef struct tagPANOSE { {
(struct 'tagPANOSE
    PanFamilyType ; bFamilyType
    PanSerifType ; bSerifStyle
    PanWeightType ; bWeight
    PanPropType ; bProportion
    PanConstrastType ; bContrast
    PanStrokeType ; bStrokeVariation
    PanArmsType ; bArmStyle
    PanLettType ; bLetterform
    PanMidlineType ; bMidline
    PanXHeightType ; bXHeight
)
(setq PANOSE tagPANOSE)
;; } PANOSE
(setq LPPANOSE "void*")

;; typedef struct tagEXTLOGFONTA  { {
(struct 'tagEXTLOGFONTA
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    CHAR ; lfFaceName
    BYTE ; elfFullName
    BYTE ; elfStyle
    DWORD ; elfVersion;
    DWORD ; elfStyleSize
    DWORD ; elfMatch
    DWORD ; elfReserved
    BYTE ; elfVendorId
    DWORD ; elfCulture;
    ;; elfPanose
    PanFamilyType ; bFamilyType
    PanSerifType ; bSerifStyle
    PanWeightType ; bWeight
    PanPropType ; bProportion
    PanConstrastType ; bContrast
    PanStrokeType ; bStrokeVariation
    PanArmsType ; bArmStyle
    PanLettType ; bLetterform
    PanMidlineType ; bMidline
    PanXHeightType ; bXHeight
)
(setq EXTLOGFONTA tagEXTLOGFONTA)
;; } EXTLOGFONTA
(setq PEXTLOGFONTA "void*")
(setq NPEXTLOGFONTA "void*")
(setq LPEXTLOGFONTA "void*")
;; typedef struct tagEXTLOGFONTW  { {
(struct 'tagEXTLOGFONTW
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    WCHAR ; lfFaceName
    WCHAR ; elfFullName
    WCHAR ; elfStyle
    DWORD ; elfVersion;
    DWORD ; elfStyleSize
    DWORD ; elfMatch
    DWORD ; elfReserved
    BYTE ; elfVendorId
    DWORD ; elfCulture;
    ;; elfPanose
    PanFamilyType ; bFamilyType
    PanSerifType ; bSerifStyle
    PanWeightType ; bWeight
    PanPropType ; bProportion
    PanConstrastType ; bContrast
    PanStrokeType ; bStrokeVariation
    PanArmsType ; bArmStyle
    PanLettType ; bLetterform
    PanMidlineType ; bMidline
    PanXHeightType ; bXHeight
)
(setq EXTLOGFONTW tagEXTLOGFONTW)
;; } EXTLOGFONTW
(setq PEXTLOGFONTW "void*")
(setq NPEXTLOGFONTW "void*")
(setq LPEXTLOGFONTW "void*")



;; typedef struct _ABC  { {
(struct '_ABC
    "int" ; abcA
    UINT ; abcB
    "int" ; abcC
)
(setq ABC _ABC)
;; } ABC
(setq PABC "void*")
(setq NPABC "void*")
(setq LPABC "void*")

;; typedef struct _ABCFLOAT  { {
(struct '_ABCFLOAT
    FLOAT ; abcfA
    FLOAT ; abcfB
    FLOAT ; abcfC
)
(setq ABCFLOAT _ABCFLOAT)
;; } ABCFLOAT
(setq PABCFLOAT "void*")
(setq NPABCFLOAT "void*")
(setq LPABCFLOAT "void*")


;; typedef struct _OUTLINETEXTMETRICA  { {
(struct '_OUTLINETEXTMETRICA
    UINT ; otmSize
    ;; otmTextMetrics
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    BYTE ; tmFirstChar
    BYTE ; tmLastChar
    BYTE ; tmDefaultChar
    BYTE ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    BYTE ; otmFiller
    ;; otmPanoseNumber
    PanFamilyType ; bFamilyType
    PanSerifType ; bSerifStyle
    PanWeightType ; bWeight
    PanPropType ; bProportion
    PanConstrastType ; bContrast
    PanStrokeType ; bStrokeVariation
    PanArmsType ; bArmStyle
    PanLettType ; bLetterform
    PanMidlineType ; bMidline
    PanXHeightType ; bXHeight
    _otmfsSelection ; otmfsSelection
    UINT ; otmfsType
    "int" ; otmsCharSlopeRise
    "int" ; otmsCharSlopeRun
    "int" ; otmItalicAngle
    UINT ; otmEMSquare
    "int" ; otmAscent
    "int" ; otmDescent
    UINT ; otmLineGap
    UINT ; otmsCapEmHeight
    UINT ; otmsXHeight
    ;; otmrcFontBox
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    "int" ; otmMacAscent
    "int" ; otmMacDescent
    UINT ; otmMacLineGap
    UINT ; otmusMinimumPPEM
    ;; otmptSubscriptSize
    LONG ; x
    LONG ; y
    ;; otmptSubscriptOffset
    LONG ; x
    LONG ; y
    ;; otmptSuperscriptSize
    LONG ; x
    LONG ; y
    ;; otmptSuperscriptOffset
    LONG ; x
    LONG ; y
    UINT ; otmsStrikeoutSize
    "int" ; otmsStrikeoutPosition
    "int" ; otmsUnderscoreSize
    "int" ; otmsUnderscorePosition
    PSTR ; otmpFamilyName
    PSTR ; otmpFaceName
    PSTR ; otmpStyleName
    PSTR ; otmpFullName
)
(setq OUTLINETEXTMETRICA _OUTLINETEXTMETRICA)
;; } OUTLINETEXTMETRICA
(setq POUTLINETEXTMETRICA "void*")
(setq NPOUTLINETEXTMETRICA "void*")
(setq LPOUTLINETEXTMETRICA "void*")
;; typedef struct _OUTLINETEXTMETRICW  { {
(struct '_OUTLINETEXTMETRICW
    UINT ; otmSize
    ;; otmTextMetrics
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    WCHAR ; tmFirstChar
    WCHAR ; tmLastChar
    WCHAR ; tmDefaultChar
    WCHAR ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    BYTE ; otmFiller
    ;; otmPanoseNumber
    PanFamilyType ; bFamilyType
    PanSerifType ; bSerifStyle
    PanWeightType ; bWeight
    PanPropType ; bProportion
    PanConstrastType ; bContrast
    PanStrokeType ; bStrokeVariation
    PanArmsType ; bArmStyle
    PanLettType ; bLetterform
    PanMidlineType ; bMidline
    PanXHeightType ; bXHeight
    _otmfsSelection ; otmfsSelection
    UINT ; otmfsType
    "int" ; otmsCharSlopeRise
    "int" ; otmsCharSlopeRun
    "int" ; otmItalicAngle
    UINT ; otmEMSquare
    "int" ; otmAscent
    "int" ; otmDescent
    UINT ; otmLineGap
    UINT ; otmsCapEmHeight
    UINT ; otmsXHeight
    ;; otmrcFontBox
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    "int" ; otmMacAscent
    "int" ; otmMacDescent
    UINT ; otmMacLineGap
    UINT ; otmusMinimumPPEM
    ;; otmptSubscriptSize
    LONG ; x
    LONG ; y
    ;; otmptSubscriptOffset
    LONG ; x
    LONG ; y
    ;; otmptSuperscriptSize
    LONG ; x
    LONG ; y
    ;; otmptSuperscriptOffset
    LONG ; x
    LONG ; y
    UINT ; otmsStrikeoutSize
    "int" ; otmsStrikeoutPosition
    "int" ; otmsUnderscoreSize
    "int" ; otmsUnderscorePosition
    PSTR ; otmpFamilyName
    PSTR ; otmpFaceName
    PSTR ; otmpStyleName
    PSTR ; otmpFullName
)
(setq OUTLINETEXTMETRICW _OUTLINETEXTMETRICW)
;; } OUTLINETEXTMETRICW
(setq POUTLINETEXTMETRICW "void*")
(setq NPOUTLINETEXTMETRICW "void*")
(setq LPOUTLINETEXTMETRICW "void*")



;; typedef struct tagPOLYTEXTA { {
(struct 'tagPOLYTEXTA
    "int" ; x
    "int" ; y
    UINT ; n
    LPCSTR ; lpstr
    _ETO ; uiFlags
    ;; rcl
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    "void*" ; pdx
    )
(setq POLYTEXTA tagPOLYTEXTA)
;; } POLYTEXTA
(setq PPOLYTEXTA "void*")
(setq NPPOLYTEXTA "void*")
(setq LPPOLYTEXTA "void*")
;; typedef struct tagPOLYTEXTW { {
(struct 'tagPOLYTEXTW
    "int" ; x
    "int" ; y
    UINT ; n
    LPCWSTR ; lpstr
    _ETO ; uiFlags
    ;; rcl
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    "void*" ; pdx
)
(setq POLYTEXTW tagPOLYTEXTW)
;; } POLYTEXTW
(setq PPOLYTEXTW "void*") ; "void*")
(setq NPPOLYTEXTW "void*")
(setq LPPOLYTEXTW "void*")

;; typedef struct _FIXED  { {
(struct '_FIXED
    WORD ; fract
    WORD ; _value
)
(setq FIXED _FIXED)
;; } FIXED


;; typedef struct _MAT2  { {
(struct '_MAT2
    ;; eM11
    WORD ; fract
    WORD ; _value
    ;; eM12
    WORD ; fract
    WORD ; _value
    ;; eM21
    WORD ; fract
    WORD ; _value
    ;; eM22
    WORD ; fract
    WORD ; _value
)
(setq MAT2 _MAT2)
;; } MAT2
(setq LPMAT2 "void*")



;; typedef struct _GLYPHMETRICS  { {
(struct '_GLYPHMETRICS
    UINT ; gmBlackBoxX
    UINT ; gmBlackBoxY
    ;; gmptGlyphOrigin
    LONG ; x
    LONG ; y
    "short int" ; gmCellIncX
    "short int" ; gmCellIncY
)
(setq GLYPHMETRICS _GLYPHMETRICS)
;; } GLYPHMETRICS
(setq LPGLYPHMETRICS "void*")

;; typedef struct tagPOINTFX { {
(struct 'tagPOINTFX
    ;; x
    WORD ; fract
    WORD ; _value
    ;; y
    WORD ; fract
    WORD ; _value
)
(setq POINTFX tagPOINTFX)
;; } POINTFX
(setq LPPOINTFX "void*")

;; typedef struct tagTTPOLYCURVE { {
(struct 'tagTTPOLYCURVE
    _TT_PRIM ; wType
    WORD ; cpfx
    ;; apfx
    ;; x
    WORD ; fract
    WORD ; _value
    ;; y
    WORD ; fract
    WORD ; _value
)
(setq TTPOLYCURVE tagTTPOLYCURVE)
;; } TTPOLYCURVE
(setq LPTTPOLYCURVE "void*")

;; typedef struct tagTTPOLYGONHEADER { {
(struct 'tagTTPOLYGONHEADER
    DWORD ; cb
    _TT_POLYGON ; dwType
    ;; pfxStart
    ;; x
    WORD ; fract
    WORD ; _value
    ;; y
    WORD ; fract
    WORD ; _value
)
(setq TTPOLYGONHEADER tagTTPOLYGONHEADER)
;; } TTPOLYGONHEADER
(setq LPTTPOLYGONHEADER "void*")


;; typedef struct tagGCP_RESULTSA      { {
(struct 'tagGCP_RESULTSA
    DWORD ; lStructSize
    LPSTR ; lpOutString
    "void*" ; lpOrder
    "void*" ; lpDx
    "void*" ; lpCaretPos
    "void" ; lpClass
    LPWSTR ; lpGlyphs
    UINT ; nGlyphs
    "int" ; nMaxFit
    
)
(setq LPGCP_RESULTSA "void*")
;; typedef struct tagGCP_RESULTSW      { {
(struct 'tagGCP_RESULTSW
    DWORD ; lStructSize
    LPWSTR ; lpOutString
    "void*" ; lpOrder
    "void*" ; lpDx
    "void*" ; lpCaretPos
    "void*" ; lpClass
    LPWSTR ; lpGlyphs
    UINT ; nGlyphs
    "int" ; nMaxFit
    
)
(setq LPGCP_RESULTSW "void*")

;; typedef struct _RASTERIZER_STATUS  { {
(struct '_RASTERIZER_STATUS
    "short int" ; nSize
    _RASTERIZER_STATUS_Flag ; wFlags
    "short int" ; nLanguageID
)
(setq RASTERIZER_STATUS _RASTERIZER_STATUS)
;; } RASTERIZER_STATUS
(setq LPRASTERIZER_STATUS "void*")


;; typedef struct tagPIXELFORMATDESCRIPTOR { {
(struct 'tagPIXELFORMATDESCRIPTOR
    WORD ; nSize
    WORD ; nVersion
    _PIXELFORMATDESCRIPTOR ; dwFlags
    _PFD ; iPixelType
    BYTE ; cColorBits
    BYTE ; cRedBits
    BYTE ; cRedShift
    BYTE ; cGreenBits
    BYTE ; cGreenShift
    BYTE ; cBlueBits
    BYTE ; cBlueShift
    BYTE ; cAlphaBits
    BYTE ; cAlphaShift
    BYTE ; cAccumBits
    BYTE ; cAccumRedBits
    BYTE ; cAccumGreenBits
    BYTE ; cAccumBlueBits
    BYTE ; cAccumAlphaBits
    BYTE ; cDepthBits
    BYTE ; cStencilBits
    BYTE ; cAuxBuffers
    _PFD_LAYER ; iLayerType
    BYTE ; bReserved
    DWORD ; dwLayerMask
    DWORD ; dwVisibleMask
    DWORD ; dwDamageMask
)
(setq PIXELFORMATDESCRIPTOR tagPIXELFORMATDESCRIPTOR)
;; } PIXELFORMATDESCRIPTOR
(setq PPIXELFORMATDESCRIPTOR "void*")
(setq LPPIXELFORMATDESCRIPTOR "void*")

(setq OLDFONTENUMPROCA LPVOID)
(setq OLDFONTENUMPROCW LPVOID)
(setq GOBJENUMPROC LPVOID)
(setq LINEDDAPROC LPVOID)

(setq LPFNDEVMODEA LPVOID)
(setq LPFNDEVMODEW LPVOID)

(setq LPFNDEVCAPSA LPVOID)
(setq LPFNDEVCAPSW LPVOID)

(setq FONTENUMPROCA OLDFONTENUMPROCA)
(setq FONTENUMPROCW OLDFONTENUMPROCW)

;; typedef struct tagWCRANGE { {
(struct 'tagWCRANGE
    WCHAR ; wcLow
    USHORT ; cGlyphs
)
(setq WCRANGE tagWCRANGE)
;; } WCRANGE
(setq PWCRANGE "void*")
(setq LPWCRANGE "void*")


;; typedef struct tagGLYPHSET { {
(struct 'tagGLYPHSET
    DWORD ; cbThis
    _GS_8BIT_INDICES ; flAccel
    DWORD ; cGlyphsSupported
    DWORD ; cRanges
    ;; ranges
    WCHAR ; wcLow
    USHORT ; cGlyphs
)
(setq GLYPHSET tagGLYPHSET)
;; } GLYPHSET
(setq PGLYPHSET "void*")
(setq LPGLYPHSET "void*")

;; typedef struct tagDESIGNVECTOR { {
(struct 'tagDESIGNVECTOR
    DWORD ; dvReserved
    DWORD ; dvNumAxes
    LONG ; dvValues
)
(setq DESIGNVECTOR tagDESIGNVECTOR)
;; } DESIGNVECTOR
(setq PDESIGNVECTOR "void*")
(setq LPDESIGNVECTOR "void*")






;; typedef struct tagAXISINFOA { {
(struct 'tagAXISINFOA
    LONG ; axMinValue
    LONG ; axMaxValue
    BYTE ; axAxisName
)
(setq AXISINFOA tagAXISINFOA)
;; } AXISINFOA
(setq PAXISINFOA "void*")
(setq LPAXISINFOA "void*")
;; typedef struct tagAXISINFOW { {
(struct 'tagAXISINFOW
    LONG ; axMinValue
    LONG ; axMaxValue
    WCHAR ; axAxisName
)
(setq AXISINFOW tagAXISINFOW)
;; } AXISINFOW
(setq PAXISINFOW "void*")
(setq LPAXISINFOW "void*")

;; typedef struct tagAXESLISTA { {
(struct 'tagAXESLISTA
    DWORD ; axlReserved
    DWORD ; axlNumAxes
    ;; axlAxisInfo
    LONG ; axMinValue
    LONG ; axMaxValue
    BYTE ; axAxisName
)
(setq AXESLISTA tagAXESLISTA)
;; } AXESLISTA
(setq PAXESLISTA "void*")
(setq LPAXESLISTA "void*")
;; typedef struct tagAXESLISTW { {
(struct 'tagAXESLISTW
    DWORD ; axlReserved
    DWORD ; axlNumAxes
    ;; axlAxisInfo
    LONG ; axMinValue
    LONG ; axMaxValue
    WCHAR ; axAxisName
)
(setq AXESLISTW tagAXESLISTW)
;; } AXESLISTW
(setq PAXESLISTW "void*")
(setq LPAXESLISTW "void*")





;; typedef struct tagENUMLOGFONTEXDVA { {
(struct 'tagENUMLOGFONTEXDVA
    ;; elfEnumLogfontEx
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    CHAR ; lfFaceName
    BYTE ; elfFullName
    BYTE ; elfStyle
    BYTE ; elfScript
    ;; elfDesignVector
    DWORD ; dvReserved
    DWORD ; dvNumAxes
    LONG ; dvValues
)
(setq ENUMLOGFONTEXDVA tagENUMLOGFONTEXDVA)
;; } ENUMLOGFONTEXDVA
(setq PENUMLOGFONTEXDVA "void*")
(setq LPENUMLOGFONTEXDVA "void*")
;; typedef struct tagENUMLOGFONTEXDVW { {
(struct 'tagENUMLOGFONTEXDVW
    ;; elfEnumLogfontEx
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    WCHAR ; lfFaceName
    WCHAR ; elfFullName
    WCHAR ; elfStyle
    WCHAR ; elfScript
    ;; elfDesignVector
    DWORD ; dvReserved
    DWORD ; dvNumAxes
    LONG ; dvValues
)
(setq ENUMLOGFONTEXDVW tagENUMLOGFONTEXDVW)
;; } ENUMLOGFONTEXDVW
(setq PENUMLOGFONTEXDVW "void*")
(setq LPENUMLOGFONTEXDVW "void*")


;; typedef struct tagENUMTEXTMETRICA { {
(struct 'tagENUMTEXTMETRICA
    ;; etmNewTextMetricEx
    ;; ntmTm
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    BYTE ; tmFirstChar
    BYTE ; tmLastChar
    BYTE ; tmDefaultChar
    BYTE ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    DWORD ; ntmFlags
    UINT ; ntmSizeEM
    UINT ; ntmCellHeight
    UINT ; ntmAvgWidth
    ;; ntmFontSig
    DWORD ; fsUsb
    DWORD ; fsCsb
    ;; etmAxesList
    DWORD ; axlReserved
    DWORD ; axlNumAxes
    ;; axlAxisInfo
    LONG ; axMinValue
    LONG ; axMaxValue
    BYTE ; axAxisName
)
(setq ENUMTEXTMETRICA tagENUMTEXTMETRICA)
;; } ENUMTEXTMETRICA
(setq PENUMTEXTMETRICA "void*")
(setq LPENUMTEXTMETRICA "void*")
;; typedef struct tagENUMTEXTMETRICW { {
(struct 'tagENUMTEXTMETRICW
    ;; etmNewTextMetricEx
    ;; ntmTm
    LONG ; tmHeight
    LONG ; tmAscent
    LONG ; tmDescent
    LONG ; tmInternalLeading
    LONG ; tmExternalLeading
    LONG ; tmAveCharWidth
    LONG ; tmMaxCharWidth
    LONG ; tmWeight
    LONG ; tmOverhang
    LONG ; tmDigitizedAspectX
    LONG ; tmDigitizedAspectY
    WCHAR ; tmFirstChar
    WCHAR ; tmLastChar
    WCHAR ; tmDefaultChar
    WCHAR ; tmBreakChar
    BYTE ; tmItalic
    BYTE ; tmUnderlined
    BYTE ; tmStruckOut
    _TMPF ; tmPitchAndFamily
    _CHARSETBYTE ; tmCharSet
    DWORD ; ntmFlags
    UINT ; ntmSizeEM
    UINT ; ntmCellHeight
    UINT ; ntmAvgWidth
    ;; ntmFontSig
    DWORD ; fsUsb
    DWORD ; fsCsb
    ;; etmAxesList
    DWORD ; axlReserved
    DWORD ; axlNumAxes
    ;; axlAxisInfo
    LONG ; axMinValue
    LONG ; axMaxValue
    WCHAR ; axAxisName
)
(setq ENUMTEXTMETRICW tagENUMTEXTMETRICW)
;; } ENUMTEXTMETRICW
(setq PENUMTEXTMETRICW "void*")
(setq LPENUMTEXTMETRICW "void*")





(setq COLOR16 USHORT)

;; typedef struct _TRIVERTEX { {
(struct '_TRIVERTEX
    LONG ; x
    LONG ; y
    COLOR16 ; Red
    COLOR16 ; Green
    COLOR16 ; Blue
    COLOR16 ; Alpha
)
(setq TRIVERTEX _TRIVERTEX)
;; }TRIVERTEX
(setq PTRIVERTEX "void*")
(setq LPTRIVERTEX "void*")

;; typedef struct _GRADIENT_TRIANGLE { {
(struct '_GRADIENT_TRIANGLE
    ULONG ; Vertex1
    ULONG ; Vertex2
    ULONG ; Vertex3
)
(setq GRADIENT_TRIANGLE _GRADIENT_TRIANGLE)
;; } GRADIENT_TRIANGLE
(setq PGRADIENT_TRIANGLE "void*")
(setq LPGRADIENT_TRIANGLE "void*")

;; typedef struct _GRADIENT_RECT { {
(struct '_GRADIENT_RECT
    ULONG ; UpperLeft
    ULONG ; LowerRight
)
(setq GRADIENT_RECT _GRADIENT_RECT)
;; }GRADIENT_RECT
(setq PGRADIENT_RECT "void*")
(setq LPGRADIENT_RECT "void*")

;; typedef struct _BLENDFUNCTION { {
(struct '_BLENDFUNCTION
    _AC_SRC_OVER ; BlendOp
    BYTE ; BlendFlags
    BYTE ; SourceConstantAlpha
    _AC_SRC_ALPHA ; AlphaFormat
)
(setq BLENDFUNCTION _BLENDFUNCTION)
;; }BLENDFUNCTION
(setq PBLENDFUNCTION "void*")

(setq MFENUMPROC LPVOID)
(setq ENHMFENUMPROC LPVOID)




;; typedef struct tagDIBSECTION  { {
(struct 'tagDIBSECTION
    ;; dsBm
    LONG ; bmType
    LONG ; bmWidth
    LONG ; bmHeight
    LONG ; bmWidthBytes
    WORD ; bmPlanes
    WORD ; bmBitsPixel
    LPVOID ; bmBits
    ;; dsBmih
    DWORD ; biSize
    LONG ; biWidth
    LONG ; biHeight
    WORD ; biPlanes
    WORD ; biBitCount
    _biCompression ; biCompression
    DWORD ; biSizeImage
    LONG ; biXPelsPerMeter
    LONG ; biYPelsPerMeter
    DWORD ; biClrUsed
    DWORD ; biClrImportant
    DWORD ; dsBitfields
    HANDLE ; dshSection
    DWORD ; dsOffset
)
(setq DIBSECTION tagDIBSECTION)
;; } DIBSECTION
(setq LPDIBSECTION "void*")
(setq PDIBSECTION "void*")

;; typedef struct tagKERNINGPAIR  { {
(struct 'tagKERNINGPAIR
   WORD ; wFirst
   WORD ; wSecond
   "int" ; iKernAmount
)
(setq KERNINGPAIR tagKERNINGPAIR)
;; } KERNINGPAIR
(setq LPKERNINGPAIR "void*")

(setq ICMENUMPROCA LPVOID)
(setq ICMENUMPROCW LPVOID)



;; typedef struct tagEMR { {
(struct 'tagEMR
    _EMR ; iType;
    DWORD ; nSize;
)
;; } EMR,
(setq EMR tagEMR)
(setq PEMR "void*")



;; typedef struct tagEMRTEXT { {
(struct 'tagEMRTEXT
    ;; ptlReference
    LONG ; x
    LONG ; y
    DWORD ; nChars
    DWORD ; offString;
    _ETO ; fOptions
    ;; rcl
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; offDx;
)
;; } EMRTEXT,
(setq EMRTEXT tagEMRTEXT)
(setq PEMRTEXT "void*")


;; typedef struct tagABORTPATH { {
(struct 'tagABORTPATH
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
)
(setq EMRABORTPATH tagABORTPATH)
;; } EMRABORTPATH
(setq PEMRABORTPATH "void*")
(setq EMRBEGINPATH tagABORTPATH)
(setq PEMRBEGINPATH "void*")
(setq EMRENDPATH tagABORTPATH)
(setq PEMRENDPATH "void*")
(setq EMRCLOSEFIGURE tagABORTPATH)
(setq PEMRCLOSEFIGURE "void*")
(setq EMRFLATTENPATH tagABORTPATH)
(setq PEMRFLATTENPATH "void*") 
(setq EMRWIDENPATH tagABORTPATH)
(setq PEMRWIDENPATH "void*")
(setq EMRSETMETARGN tagABORTPATH)
(setq PEMRSETMETARGN "void*")
(setq EMRSAVEDC tagABORTPATH)
(setq PEMRSAVEDC "void*")
(setq EMRREALIZEPALETTE tagABORTPATH)
(setq PEMRREALIZEPALETTE "void*")

;; typedef struct tagEMRSELECTCLIPPATH { {
(struct 'tagEMRSELECTCLIPPATH
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; iMode
)
(setq EMRSELECTCLIPPATH tagEMRSELECTCLIPPATH)
;; } EMRSELECTCLIPPATH
(setq PEMRSELECTCLIPPATH "void*")
(setq EMRSETBKMODE tagEMRSELECTCLIPPATH)
(setq PEMRSETBKMODE "void*")
(setq EMRSETMAPMODE tagEMRSELECTCLIPPATH)
(setq PEMRSETMAPMODE "void*")
(setq EMRSETLAYOUT tagEMRSELECTCLIPPATH)
(setq PEMRSETLAYOUT "void*")
(setq EMRSETPOLYFILLMODE tagEMRSELECTCLIPPATH)
(setq PEMRSETPOLYFILLMODE "void*")
(setq EMRSETROP2 tagEMRSELECTCLIPPATH)
(setq PEMRSETROP2 "void*")
(setq EMRSETSTRETCHBLTMODE tagEMRSELECTCLIPPATH)
(setq PEMRSETSTRETCHBLTMODE "void*")
(setq EMRSETICMMODE tagEMRSELECTCLIPPATH)
(setq PEMRSETICMMODE "void*")
(setq EMRSETTEXTALIGN tagEMRSELECTCLIPPATH)
(setq PEMRSETTEXTALIGN "void*")

;; typedef struct tagEMRSETMITERLIMIT { {
(struct 'tagEMRSETMITERLIMIT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    FLOAT ; eMiterLimit
)
(setq EMRSETMITERLIMIT tagEMRSETMITERLIMIT)
;; } EMRSETMITERLIMIT
(setq PEMRSETMITERLIMIT "void*")

;; typedef struct tagEMRRESTOREDC { {
(struct 'tagEMRRESTOREDC
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    LONG ; iRelative;
)
(setq EMRRESTOREDC tagEMRRESTOREDC)
;; } EMRRESTOREDC
(setq PEMRRESTOREDC "void*")

;; typedef struct tagEMRSETARCDIRECTION { {
(struct 'tagEMRSETARCDIRECTION
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; iArcDirection;
) ; EMRSETARCDIRECTION,
(setq EMRSETARCDIRECTION tagEMRSETARCDIRECTION)
(setq PEMRSETARCDIRECTION "void*")

;; typedef struct tagEMRSETMAPPERFLAGS { {
(struct 'tagEMRSETMAPPERFLAGS
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; dwFlags
)
(setq EMRSETMAPPERFLAGS tagEMRSETMAPPERFLAGS)
;; } EMRSETMAPPERFLAGS
(setq PEMRSETMAPPERFLAGS "void*")

;; typedef struct tagEMRSETTEXTCOLOR { {
(struct 'tagEMRSETTEXTCOLOR
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    COLORREF ; crColor
)
(setq EMRSETBKCOLOR tagEMRSETTEXTCOLOR)
;; } EMRSETBKCOLOR
(setq PEMRSETBKCOLOR "void*")
(setq EMRSETTEXTCOLOR tagEMRSETTEXTCOLOR)
(setq PEMRSETTEXTCOLOR "void*")

;; typedef struct tagEMRSELECTOBJECT { {
(struct 'tagEMRSELECTOBJECT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihObject;
)
(setq EMRSELECTOBJECT tagEMRSELECTOBJECT)
;; } EMRSELECTOBJECT
(setq PEMRSELECTOBJECT "void*")
(setq EMRDELETEOBJECT tagEMRSELECTOBJECT)
(setq PEMRDELETEOBJECT "void*")

;; typedef struct tagEMRSELECTPALETTE { {
(struct 'tagEMRSELECTPALETTE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPal;
)
(setq EMRSELECTPALETTE tagEMRSELECTPALETTE)
;; } EMRSELECTPALETTE
(setq PEMRSELECTPALETTE "void*")

;; typedef struct tagEMRRESIZEPALETTE { {
(struct 'tagEMRRESIZEPALETTE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPal;
    DWORD ; cEntries
)
(setq EMRRESIZEPALETTE tagEMRRESIZEPALETTE)
;; } EMRRESIZEPALETTE
(setq PEMRRESIZEPALETTE "void*")

;; typedef struct tagEMRSETPALETTEENTRIES { {
(struct 'tagEMRSETPALETTEENTRIES
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPal;
    DWORD ; iStart
    DWORD ; cEntries
    ;; aPalEntries
    BYTE ; peRed
    BYTE ; peGreen
    BYTE ; peBlue
    BYTE ; peFlags
    )
(setq EMRSETPALETTEENTRIES tagEMRSETPALETTEENTRIES)
;; } EMRSETPALETTEENTRIES
(setq PEMRSETPALETTEENTRIES "void*")

;; typedef struct tagEMRSETCOLORADJUSTMENT { {
(struct 'tagEMRSETCOLORADJUSTMENT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ColorAdjustment
    WORD ; caSize
    _COLORADJUSTMENTValue ; caFlags
    _IlluminantIndexValue ; caIlluminantIndex
    WORD  ; caRedGamma
    WORD  ; caGreenGamma
    WORD  ; caBlueGamma
    WORD  ; caReferenceBlack
    WORD  ; caReferenceWhite
    SHORT ; caContrast
    SHORT ; caBrightness
    SHORT ; caColorfulness
    SHORT ; caRedGreenTint
)
(setq EMRSETCOLORADJUSTMENT tagEMRSETCOLORADJUSTMENT)
;; } EMRSETCOLORADJUSTMENT
(setq PEMRSETCOLORADJUSTMENT "void*")

;; typedef struct tagEMRGDICOMMENT { {
(struct 'tagEMRGDICOMMENT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; cbData;
    BYTE ; Data
)
(setq EMRGDICOMMENT tagEMRGDICOMMENT)
;; } EMRGDICOMMENT
(setq PEMRGDICOMMENT "void*")

;; typedef struct tagEMREOF { {
(struct 'tagEMREOF
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; nPalEntries;
    DWORD ; offPalEntries;
    DWORD ; nSizeLast;
) ; EMREOF,
(setq EMREOF tagEMREOF)
(setq PEMREOF "void*")

;; typedef struct tagEMRLINETO { {
(struct 'tagEMRLINETO
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ptl
    LONG ; x
    LONG ; y
)
(setq EMRLINETO tagEMRLINETO)
;; } EMRLINETO
(setq PEMRLINETO "void*")
(setq EMRMOVETOEX tagEMRLINETO)
(setq PEMRMOVETOEX "void*")

;; typedef struct tagEMROFFSETCLIPRGN { {
(struct 'tagEMROFFSETCLIPRGN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ptlOffset
    LONG ; x
    LONG ; y
)
(setq EMROFFSETCLIPRGN tagEMROFFSETCLIPRGN)
;; } EMROFFSETCLIPRGN
(setq PEMROFFSETCLIPRGN "void*")

;; typedef struct tagEMRFILLPATH { {
(struct 'tagEMRFILLPATH
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
)
(setq EMRFILLPATH tagEMRFILLPATH)
;; } EMRFILLPATH
(setq PEMRFILLPATH "void*")
(setq EMRSTROKEANDFILLPATH tagEMRFILLPATH)
(setq PEMRSTROKEANDFILLPATH "void*")
(setq EMRSTROKEPATH tagEMRFILLPATH)
(setq PEMRSTROKEPATH "void*")

;; typedef struct tagEMREXCLUDECLIPRECT { {
(struct 'tagEMREXCLUDECLIPRECT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclClip
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
)
(setq EMREXCLUDECLIPRECT tagEMREXCLUDECLIPRECT)
;; } EMREXCLUDECLIPRECT
(setq PEMREXCLUDECLIPRECT "void*")
(setq EMRINTERSECTCLIPRECT tagEMREXCLUDECLIPRECT)
(setq PEMRINTERSECTCLIPRECT "void*")

;; typedef struct tagEMRSETVIEWPORTORGEX { {
(struct 'tagEMRSETVIEWPORTORGEX
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ptlOrigin
    LONG ; x
    LONG ; y
)
(setq EMRSETVIEWPORTORGEX tagEMRSETVIEWPORTORGEX)
;; } EMRSETVIEWPORTORGEX
(setq PEMRSETVIEWPORTORGEX "void*")
(setq EMRSETWINDOWORGEX tagEMRSETVIEWPORTORGEX)
(setq PEMRSETWINDOWORGEX "void*")
(setq EMRSETBRUSHORGEX tagEMRSETVIEWPORTORGEX)
(setq PEMRSETBRUSHORGEX "void*")

;; typedef struct tagEMRSETVIEWPORTEXTEX { {
(struct 'tagEMRSETVIEWPORTEXTEX
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; szlExtent
    LONG ; cx
    LONG ; cy
    )
(setq EMRSETVIEWPORTEXTEX tagEMRSETVIEWPORTEXTEX)
;; } EMRSETVIEWPORTEXTEX
(setq PEMRSETVIEWPORTEXTEX "void*")
(setq EMRSETWINDOWEXTEX tagEMRSETVIEWPORTEXTEX)
(setq PEMRSETWINDOWEXTEX "void*")

;; typedef struct tagEMRSCALEVIEWPORTEXTEX { {
(struct 'tagEMRSCALEVIEWPORTEXTEX
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    LONG ; xNum
    LONG ; xDenom
    LONG ; yNum
    LONG ; yDenom
)
(setq EMRSCALEVIEWPORTEXTEX tagEMRSCALEVIEWPORTEXTEX)
;; } EMRSCALEVIEWPORTEXTEX
(setq PEMRSCALEVIEWPORTEXTEX "void*")
(setq EMRSCALEWINDOWEXTEX tagEMRSCALEVIEWPORTEXTEX)
(setq PEMRSCALEWINDOWEXTEX "void*")

;; typedef struct tagEMRSETWORLDTRANSFORM { {
(struct 'tagEMRSETWORLDTRANSFORM
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; xform
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
)
(setq EMRSETWORLDTRANSFORM tagEMRSETWORLDTRANSFORM)
;; } EMRSETWORLDTRANSFORM
(setq PEMRSETWORLDTRANSFORM "void*")

;; typedef struct tagEMRMODIFYWORLDTRANSFORM { {
(struct 'tagEMRMODIFYWORLDTRANSFORM
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; xform
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    _MWT ; iMode
)
(setq EMRMODIFYWORLDTRANSFORM tagEMRMODIFYWORLDTRANSFORM)
;; } EMRMODIFYWORLDTRANSFORM
(setq PEMRMODIFYWORLDTRANSFORM "void*")

;; typedef struct tagEMRSETPIXELV { {
(struct 'tagEMRSETPIXELV
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ptlPixel
    LONG ; x
    LONG ; y
    COLORREF ; crColor
)
(setq EMRSETPIXELV tagEMRSETPIXELV)
;; } EMRSETPIXELV
(setq PEMRSETPIXELV "void*")

;; typedef struct tagEMREXTFLOODFILL { {
(struct 'tagEMREXTFLOODFILL
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ptlStart
    LONG ; x
    LONG ; y
    COLORREF ; crColor
    DWORD ; iMode
)
(setq EMREXTFLOODFILL tagEMREXTFLOODFILL)
;; } EMREXTFLOODFILL
(setq PEMREXTFLOODFILL "void*")

;; typedef struct tagEMRELLIPSE { {
(struct 'tagEMRELLIPSE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBox;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
)
(setq EMRELLIPSE tagEMRELLIPSE)
;; } EMRELLIPSE
(setq PEMRELLIPSE "void*")
(setq EMRRECTANGLE tagEMRELLIPSE)
(setq PEMRRECTANGLE "void*")

;; typedef struct tagEMRROUNDRECT { {
(struct 'tagEMRROUNDRECT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBox;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    ;; szlCorner
    LONG ; cx
    LONG ; cy
    )
(setq EMRROUNDRECT tagEMRROUNDRECT)
;; } EMRROUNDRECT
(setq PEMRROUNDRECT "void*")

;; typedef struct tagEMRARC { {
(struct 'tagEMRARC
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBox;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    ;; ptlStart
    LONG ; x
    LONG ; y
    ;; ptlEnd
    LONG ; x
    LONG ; y
)
(setq EMRARC tagEMRARC)
;; } EMRARC
(setq PEMRARC "void*")
(setq EMRARCTO tagEMRARC)
(setq PEMRARCTO "void*")
(setq EMRCHORD tagEMRARC)
(setq PEMRCHORD "void*")
(setq EMRPIE tagEMRARC)
(setq PEMRPIE "void*")

;; typedef struct tagEMRANGLEARC { {
(struct 'tagEMRANGLEARC
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; ptlCenter
    LONG ; x
    LONG ; y
    DWORD ; nRadius
    FLOAT ; eStartAngle
    FLOAT ; eSweepAngle
)
(setq EMRANGLEARC tagEMRANGLEARC)
;; } EMRANGLEARC
(setq PEMRANGLEARC "void*")

;; typedef struct tagEMRPOLYLINE { {
(struct 'tagEMRPOLYLINE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cptl
    ;; aptl
    LONG ; x
    LONG ; y
)
(setq EMRPOLYLINE tagEMRPOLYLINE)
;; } EMRPOLYLINE
(setq PEMRPOLYLINE "void*")
(setq EMRPOLYBEZIER tagEMRPOLYLINE)
(setq PEMRPOLYBEZIER "void*")
(setq EMRPOLYGON tagEMRPOLYLINE)
(setq PEMRPOLYGON "void*")
(setq EMRPOLYBEZIERTO tagEMRPOLYLINE)
(setq PEMRPOLYBEZIERTO "void*")
(setq EMRPOLYLINETO tagEMRPOLYLINE)
(setq PEMRPOLYLINETO "void*")

;; typedef struct tagEMRPOLYLINE16 { {
(struct 'tagEMRPOLYLINE16
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cpts
    ;; apts
    SHORT ; x
    SHORT ; y
)
(setq EMRPOLYLINE16 tagEMRPOLYLINE16)
;; } EMRPOLYLINE16
(setq PEMRPOLYLINE16 "void*")
(setq EMRPOLYBEZIER16 tagEMRPOLYLINE16)
(setq PEMRPOLYBEZIER16 "void*")
(setq EMRPOLYGON16 tagEMRPOLYLINE16)
(setq PEMRPOLYGON16 "void*")
(setq EMRPOLYBEZIERTO16 tagEMRPOLYLINE16)
(setq PEMRPOLYBEZIERTO16 "void*")
(setq EMRPOLYLINETO16 tagEMRPOLYLINE16)
(setq PEMRPOLYLINETO16 "void*")

;; typedef struct tagEMRPOLYDRAW { {
(struct 'tagEMRPOLYDRAW
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cptl;
    ;; aptl;
    LONG ; x
    LONG ; y
    BYTE ; abTypes;
)
(setq EMRPOLYDRAW tagEMRPOLYDRAW)
;; } EMRPOLYDRAW
(setq PEMRPOLYDRAW "void*")

;; typedef struct tagEMRPOLYDRAW16 { {
(struct 'tagEMRPOLYDRAW16
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cpts;
    ;; apts;
    SHORT ; x
    SHORT ; y
    BYTE ; abTypes;
)
(setq EMRPOLYDRAW16 tagEMRPOLYDRAW16)
;; } EMRPOLYDRAW16
(setq PEMRPOLYDRAW16 "void*")

;; typedef struct tagEMRPOLYPOLYLINE { {
(struct 'tagEMRPOLYPOLYLINE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; nPolys;
    DWORD ; cptl;
    DWORD ; aPolyCounts;
    ;; aptl;
    LONG ; x
    LONG ; y
)
(setq EMRPOLYPOLYLINE tagEMRPOLYPOLYLINE)
;; } EMRPOLYPOLYLINE
(setq PEMRPOLYPOLYLINE "void*")
(setq EMRPOLYPOLYGON tagEMRPOLYPOLYLINE)
(setq PEMRPOLYPOLYGON "void*")

;; typedef struct tagEMRPOLYPOLYLINE16 { {
(struct 'tagEMRPOLYPOLYLINE16
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; nPolys;
    DWORD ; cpts;
    DWORD ; aPolyCounts;
    ;; apts;
    SHORT ; x
    SHORT ; y
    )
(setq EMRPOLYPOLYLINE16 tagEMRPOLYPOLYLINE16)
;; } EMRPOLYPOLYLINE16
(setq PEMRPOLYPOLYLINE16 "void*")
(setq EMRPOLYPOLYGON16 tagEMRPOLYPOLYLINE16)
(setq PEMRPOLYPOLYGON16 "void*")

;; typedef struct tagEMRINVERTRGN { {
(struct 'tagEMRINVERTRGN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cbRgnData;
    BYTE ; RgnData
)
(setq EMRINVERTRGN tagEMRINVERTRGN)
;; } EMRINVERTRGN
(setq PEMRINVERTRGN "void*")
(setq EMRPAINTRGN tagEMRINVERTRGN)
(setq PEMRPAINTRGN "void*")

;; typedef struct tagEMRFILLRGN { {
(struct 'tagEMRFILLRGN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cbRgnData;
    DWORD ; ihBrush;
    BYTE ; RgnData
)
(setq EMRFILLRGN tagEMRFILLRGN)
;; } EMRFILLRGN
(setq PEMRFILLRGN "void*")

;; typedef struct tagEMRFRAMERGN { {
(struct 'tagEMRFRAMERGN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cbRgnData;
    DWORD ; ihBrush;
    ;; szlStroke
    LONG ; cx
    LONG ; cy
    BYTE ; RgnData
)
(setq EMRFRAMERGN tagEMRFRAMERGN)
;; } EMRFRAMERGN
(setq PEMRFRAMERGN "void*")


;; typedef struct tagEMREXTSELECTCLIPRGN { {
(struct 'tagEMREXTSELECTCLIPRGN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; cbRgnData;
    DWORD ; iMode
    BYTE ; RgnData
)
(setq EMREXTSELECTCLIPRGN tagEMREXTSELECTCLIPRGN)
;; } EMREXTSELECTCLIPRGN
(setq PEMREXTSELECTCLIPRGN "void*")

;; typedef struct tagEMREXTTEXTOUTA { {
(struct 'tagEMREXTTEXTOUTA
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    _GM ; iGraphicsMode;
    FLOAT ; exScale;
    FLOAT ; eyScale;
    ;; emrtext;
    ;; ptlReference
    LONG ; x
    LONG ; y
    DWORD ; nChars
    DWORD ; offString;
    _ETO ; fOptions
    ;; rcl
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; offDx;
) ; EMREXTTEXTOUTA,
(setq EMREXTTEXTOUTA tagEMREXTTEXTOUTA)
(setq PEMREXTTEXTOUTA "void*")
(setq EMREXTTEXTOUTW tagEMREXTTEXTOUTA)
(setq PEMREXTTEXTOUTW "void*")

;; typedef struct tagEMRPOLYTEXTOUTA { {
(struct 'tagEMRPOLYTEXTOUTA
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    _GM ; iGraphicsMode;
    FLOAT ; exScale;
    FLOAT ; eyScale;
    LONG ; cStrings
    ;; aemrtext;
    ;; ptlReference
    LONG ; x
    LONG ; y
    DWORD ; nChars
    DWORD ; offString;
    _ETO ; fOptions
    ;; rcl
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; offDx;
) ; EMRPOLYTEXTOUTA,
(setq EMRPOLYTEXTOUTA tagEMRPOLYTEXTOUTA)
(setq PEMRPOLYTEXTOUTA "void*")
(setq EMRPOLYTEXTOUTW tagEMRPOLYTEXTOUTA)
(setq PEMRPOLYTEXTOUTW "void*")

(setq _DIB_Color DWORD)

;; typedef struct tagEMRBITBLT { {
(struct 'tagEMRBITBLT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; cxDest
    LONG ; cyDest
    _TernaryDrawMode ; dwRop
    LONG ; xSrc
    LONG ; ySrc
    ;; xformSrc;
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    COLORREF ; crBkColorSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
)
(setq EMRBITBLT tagEMRBITBLT)
;; } EMRBITBLT
(setq PEMRBITBLT "void*")

;; typedef struct tagEMRSTRETCHBLT { {
(struct 'tagEMRSTRETCHBLT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; cxDest
    LONG ; cyDest
    _TernaryDrawMode ; dwRop
    LONG ; xSrc
    LONG ; ySrc
    ;; xformSrc;
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    COLORREF ; crBkColorSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    LONG ; cxSrc
    LONG ; cySrc
)
(setq EMRSTRETCHBLT tagEMRSTRETCHBLT)
;; } EMRSTRETCHBLT
(setq PEMRSTRETCHBLT "void*")

;; typedef struct tagEMRMASKBLT { {
(struct 'tagEMRMASKBLT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; cxDest
    LONG ; cyDest
    _TernaryDrawMode ; dwRop
    LONG ; xSrc
    LONG ; ySrc
    ;; xformSrc;
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    COLORREF ; crBkColorSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    LONG ; xMask
    LONG ; yMask
    DWORD ; iUsageMask;
    DWORD ; offBmiMask;
    DWORD ; cbBmiMask;
    DWORD ; offBitsMask;
    DWORD ; cbBitsMask;
)
(setq EMRMASKBLT tagEMRMASKBLT)
;; } EMRMASKBLT
(setq PEMRMASKBLT "void*")

;; typedef struct tagEMRPLGBLT { {
(struct 'tagEMRPLGBLT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    ;; aptlDest
    LONG ; x
    LONG ; y
    LONG ; xSrc
    LONG ; ySrc
    LONG ; cxSrc
    LONG ; cySrc
    ;; xformSrc;
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    COLORREF ; crBkColorSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    LONG ; xMask
    LONG ; yMask
    DWORD ; iUsageMask;
    DWORD ; offBmiMask;
    DWORD ; cbBmiMask;
    DWORD ; offBitsMask;
    DWORD ; cbBitsMask;
)
(setq EMRPLGBLT tagEMRPLGBLT)
;; } EMRPLGBLT
(setq PEMRPLGBLT "void*")

;; typedef struct tagEMRSETDIBITSTODEVICE { {
(struct 'tagEMRSETDIBITSTODEVICE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; xSrc
    LONG ; ySrc
    LONG ; cxSrc
    LONG ; cySrc
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; iStartScan
    DWORD ; cScans
)
(setq EMRSETDIBITSTODEVICE tagEMRSETDIBITSTODEVICE)
;; } EMRSETDIBITSTODEVICE
(setq PEMRSETDIBITSTODEVICE "void*")

;; typedef struct tagEMRSTRETCHDIBITS { {
(struct 'tagEMRSTRETCHDIBITS
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; xSrc
    LONG ; ySrc
    LONG ; cxSrc
    LONG ; cySrc
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    _DIB_Color ; iUsageSrc;
    _TernaryDrawMode ; dwRop
    LONG ; cxDest
    LONG ; cyDest
)
(setq EMRSTRETCHDIBITS tagEMRSTRETCHDIBITS)
;; } EMRSTRETCHDIBITS
(setq PEMRSTRETCHDIBITS "void*")

;; typedef struct tagEMREXTCREATEFONTINDIRECTW { {
(struct 'tagEMREXTCREATEFONTINDIRECTW
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihFont;
    ;; elfw
    ;; elfLogFont
    LONG ; lfHeight
    LONG ; lfWidth
    LONG ; lfEscapement
    LONG ; lfOrientation
    _FW ; lfWeight
    BYTE ; lfItalic
    BYTE ; lfUnderline
    BYTE ; lfStrikeOut
    _CHARSETBYTE ; lfCharSet
    _OUTBYTE ; lfOutPrecision
    _CLIPBYTE ; lfClipPrecision
    _QUALITYBYTE ; lfQuality
    _FFBYTE ; lfPitchAndFamily
    WCHAR ; lfFaceName
    WCHAR ; elfFullName
    WCHAR ; elfStyle
    DWORD ; elfVersion;
    DWORD ; elfStyleSize
    DWORD ; elfMatch
    DWORD ; elfReserved
    BYTE ; elfVendorId
    DWORD ; elfCulture;
    ;; elfPanose
    PanFamilyType ; bFamilyType
    PanSerifType ; bSerifStyle
    PanWeightType ; bWeight
    PanPropType ; bProportion
    PanConstrastType ; bContrast
    PanStrokeType ; bStrokeVariation
    PanArmsType ; bArmStyle
    PanLettType ; bLetterform
    PanMidlineType ; bMidline
    PanXHeightType ; bXHeight
)
(setq EMREXTCREATEFONTINDIRECTW tagEMREXTCREATEFONTINDIRECTW)
;; } EMREXTCREATEFONTINDIRECTW
(setq PEMREXTCREATEFONTINDIRECTW "void*")


;; typedef struct tagEMRCREATEPALETTE { {
(struct 'tagEMRCREATEPALETTE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPal;
    ;; lgpl;
    WORD ; palVersion
    WORD ; palNumEntries
    ;; palPalEntry
    BYTE ; peRed
    BYTE ; peGreen
    BYTE ; peBlue
    BYTE ; peFlags
) ; EMRCREATEPALETTE
(setq EMRCREATEPALETTE tagEMRCREATEPALETTE)
(setq PEMRCREATEPALETTE "void*")

;; typedef struct tagEMRCREATEPEN { {
(struct 'tagEMRCREATEPEN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPen;
    ;; lopn
    _PS ; lopnStyle
    ;; lopnWidth
    LONG ; x
    LONG ; y
    COLORREF ; lopnColor
)
(setq EMRCREATEPEN tagEMRCREATEPEN)
;; } EMRCREATEPEN
(setq PEMRCREATEPEN "void*")

;; typedef struct tagEMREXTCREATEPEN { {
(struct 'tagEMREXTCREATEPEN
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPen;
    DWORD ; offBmi;
    DWORD ; cbBmi;
    DWORD ; offBits;
    DWORD ; cbBits;
    ;; elp;
    _PS ; elpPenStyle
    DWORD ; elpWidth
    _BrushStyles ; elpBrushStyle
    COLORREF ; elpColor
    _HatchStyle ; elpHatch
    DWORD ; elpNumEntries
    DWORD ; elpStyleEntry
)
(setq EMREXTCREATEPEN tagEMREXTCREATEPEN)
;; } EMREXTCREATEPEN
(setq PEMREXTCREATEPEN "void*")

;; typedef struct tagEMRCREATEBRUSHINDIRECT { {
(struct 'tagEMRCREATEBRUSHINDIRECT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihBrush;
    ;; lb;
    _BrushStyles ; lbStyle
    COLORREF ; lbColor
    _HatchStyle ; lbHatch
) ; EMRCREATEBRUSHINDIRECT
(setq EMRCREATEBRUSHINDIRECT tagEMRCREATEBRUSHINDIRECT)
(setq PEMRCREATEBRUSHINDIRECT "void*")

;; typedef struct tagEMRCREATEMONOBRUSH { {
(struct 'tagEMRCREATEMONOBRUSH
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihBrush;
    DWORD ; iUsage;
    DWORD ; offBmi;
    DWORD ; cbBmi;
    DWORD ; offBits;
    DWORD ; cbBits;
)
(setq EMRCREATEMONOBRUSH tagEMRCREATEMONOBRUSH)
;; } EMRCREATEMONOBRUSH
(setq PEMRCREATEMONOBRUSH "void*")

;; typedef struct tagEMRCREATEDIBPATTERNBRUSHPT { {
(struct 'tagEMRCREATEDIBPATTERNBRUSHPT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihBrush;
    DWORD ; iUsage;
    DWORD ; offBmi;
    DWORD ; cbBmi;
    DWORD ; offBits;
    DWORD ; cbBits;
)
(setq EMRCREATEDIBPATTERNBRUSHPT tagEMRCREATEDIBPATTERNBRUSHPT)
;; } EMRCREATEDIBPATTERNBRUSHPT
(setq PEMRCREATEDIBPATTERNBRUSHPT "void*")

;; typedef struct tagEMRFORMAT { {
(struct 'tagEMRFORMAT
    EMRSignature ; dSignature;
    DWORD ; nVersion;
    DWORD ; cbData;
    DWORD ; offData;
) ; EMRFORMAT,
(setq EMRFORMAT tagEMRFORMAT)
(setq PEMRFORMAT "void*") 

;; typedef struct tagEMRGLSRECORD { {
(struct 'tagEMRGLSRECORD
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; cbData;
    BYTE ; Data
)
(setq EMRGLSRECORD tagEMRGLSRECORD)
;; } EMRGLSRECORD
(setq PEMRGLSRECORD "void*")

;; typedef struct tagEMRGLSBOUNDEDRECORD { {
(struct 'tagEMRGLSBOUNDEDRECORD
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; cbData;
    BYTE ; Data
)
(setq EMRGLSBOUNDEDRECORD tagEMRGLSBOUNDEDRECORD)
;; } EMRGLSBOUNDEDRECORD
(setq PEMRGLSBOUNDEDRECORD "void*")

;; typedef struct tagEMRPIXELFORMAT { {
(struct 'tagEMRPIXELFORMAT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; pfd
    WORD ; nSize
    WORD ; nVersion
    _PIXELFORMATDESCRIPTOR ; dwFlags
    _PFD ; iPixelType
    BYTE ; cColorBits
    BYTE ; cRedBits
    BYTE ; cRedShift
    BYTE ; cGreenBits
    BYTE ; cGreenShift
    BYTE ; cBlueBits
    BYTE ; cBlueShift
    BYTE ; cAlphaBits
    BYTE ; cAlphaShift
    BYTE ; cAccumBits
    BYTE ; cAccumRedBits
    BYTE ; cAccumGreenBits
    BYTE ; cAccumBlueBits
    BYTE ; cAccumAlphaBits
    BYTE ; cDepthBits
    BYTE ; cStencilBits
    BYTE ; cAuxBuffers
    _PFD_LAYER ; iLayerType
    BYTE ; bReserved
    DWORD ; dwLayerMask
    DWORD ; dwVisibleMask
    DWORD ; dwDamageMask
)
(setq EMRPIXELFORMAT tagEMRPIXELFORMAT)
;; } EMRPIXELFORMAT
(setq PEMRPIXELFORMAT "void*")


;; typedef struct tagEMRCREATECOLORSPACE { {
(struct 'tagEMRCREATECOLORSPACE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihCS;
    ;; lcs;
    DWORD ; lcsSignature
    DWORD ; lcsVersion
    DWORD ; lcsSize
    _LCSCSTYPE ; lcsCSType
    _LCSGAMUTMATCH ; lcsIntent
    ;; lcsEndpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; lcsGammaRed
    DWORD ; lcsGammaGreen
    DWORD ; lcsGammaBlue
    CHAR ; lcsFilename
)
(setq EMRCREATECOLORSPACE tagEMRCREATECOLORSPACE)
;; } EMRCREATECOLORSPACE
(setq PEMRCREATECOLORSPACE "void*")

;; typedef struct tagEMRSETCOLORSPACE { {
(struct 'tagEMRSETCOLORSPACE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihCS;
)
(setq EMRSETCOLORSPACE tagEMRSETCOLORSPACE)
;; } EMRSETCOLORSPACE
(setq PEMRSETCOLORSPACE "void*")
(setq EMRSELECTCOLORSPACE tagEMRSETCOLORSPACE)
(setq PEMRSELECTCOLORSPACE "void*")
(setq EMRDELETECOLORSPACE tagEMRSETCOLORSPACE)
(setq PEMRDELETECOLORSPACE "void*") 


;; typedef struct tagEMREXTESCAPE { {
(struct 'tagEMREXTESCAPE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    INT ; iEscape;
    INT ; cbEscData;
    BYTE ; EscData;
)
(setq EMREXTESCAPE tagEMREXTESCAPE)
;; } EMREXTESCAPE
(setq PEMREXTESCAPE "void*")
(setq EMRDRAWESCAPE tagEMREXTESCAPE)
(setq PEMRDRAWESCAPE "void*")

;; typedef struct tagEMRNAMEDESCAPE { {
(struct 'tagEMRNAMEDESCAPE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    INT ; iEscape;
    INT ; cbDriver;
    INT ; cbEscData;
    BYTE ; EscData;
)
(setq EMRNAMEDESCAPE tagEMRNAMEDESCAPE)
;; } EMRNAMEDESCAPE
(setq PEMRNAMEDESCAPE "void*")
(setq EMRSETICMPROFILEA tagEMRNAMEDESCAPE)
(setq PEMRSETICMPROFILEA "void*")
(setq EMRSETICMPROFILE tagEMRNAMEDESCAPE)
(setq PEMRSETICMPROFILEW "void*") 


;; typedef struct tagEMRCREATECOLORSPACEA { {
(struct 'tagEMRCREATECOLORSPACEA
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihCS;
    ;; lcs;
    DWORD ; lcsSignature
    DWORD ; lcsVersion
    DWORD ; lcsSize
    _LCSCSTYPE ; lcsCSType
    _LCSGAMUTMATCH ; lcsIntent
    ;; lcsEndpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; lcsGammaRed
    DWORD ; lcsGammaGreen
    DWORD ; lcsGammaBlue
    CHAR ; lcsFilename
    EMRColorSpaceFlagMask ; dwFlags;
    DWORD ; cbData;
    BYTE ; Data;
)
(setq EMRCREATECOLORSPACEA tagEMRCREATECOLORSPACEA)
;; } EMRCREATECOLORSPACEA
(setq PEMRCREATECOLORSPACEA "void*")

;; typedef struct tagEMRCREATECOLORSPACEW { {
(struct 'tagEMRCREATECOLORSPACEW
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihCS;
    ;; lcs;
    DWORD ; lcsSignature
    DWORD ; lcsVersion
    DWORD ; lcsSize
    _LCSCSTYPE ; lcsCSType
    _LCSGAMUTMATCH ; lcsIntent
    ;; lcsEndpoints
    ;; ciexyzRed
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzGreen
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    ;; ciexyzBlue
    FXPT2DOT30 ; ciexyzX
    FXPT2DOT30 ; ciexyzY
    FXPT2DOT30 ; ciexyzZ
    DWORD ; lcsGammaRed
    DWORD ; lcsGammaGreen
    DWORD ; lcsGammaBlue
    WCHAR ; lcsFilename
    EMRColorSpaceFlagMask ; dwFlags;
    DWORD ; cbData;
    BYTE ; Data;
)
(setq EMRCREATECOLORSPACEW tagEMRCREATECOLORSPACEW)
;; } EMRCREATECOLORSPACEW
(setq PEMRCREATECOLORSPACEW "void*")



;; typedef struct tagCOLORMATCHTOTARGET { {
(struct 'tagCOLORMATCHTOTARGET
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    _CS ; dwAction;
    EMRColorMatchFlagMask ; dwFlags;
    DWORD ; cbName;
    DWORD ; cbData;
    BYTE ; Data;
)
(setq EMRCOLORMATCHTOTARGET tagCOLORMATCHTOTARGET)
;; } EMRCOLORMATCHTOTARGET
(setq PEMRCOLORMATCHTOTARGET "void*")

;; typedef struct tagCOLORCORRECTPALETTE { {
(struct 'tagCOLORCORRECTPALETTE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; ihPalette;
    DWORD ; nFirstEntry;
    DWORD ; nPalEntries;
    DWORD ; nReserved;
)
(setq EMRCOLORCORRECTPALETTE tagCOLORCORRECTPALETTE)
;; } EMRCOLORCORRECTPALETTE
(setq PEMRCOLORCORRECTPALETTE "void*")

;; typedef struct tagEMRALPHABLEND { {
(struct 'tagEMRALPHABLEND
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; cxDest
    LONG ; cyDest
    _TernaryDrawMode ; dwRop
    LONG ; xSrc
    LONG ; ySrc
    ;; xformSrc;
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    COLORREF ; crBkColorSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    LONG ; cxSrc
    LONG ; cySrc
)
(setq EMRALPHABLEND tagEMRALPHABLEND)
;; } EMRALPHABLEND
(setq PEMRALPHABLEND "void*")

;; typedef struct tagEMRGRADIENTFILL { {
(struct 'tagEMRGRADIENTFILL
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    DWORD ; nVer
    DWORD ; nTri
    _GRADIENT_FILL ; ulMode
    ;; Ver
    LONG ; x
    LONG ; y
    COLOR16 ; Red
    COLOR16 ; Green
    COLOR16 ; Blue
    COLOR16 ; Alpha
)
(setq EMRGRADIENTFILL tagEMRGRADIENTFILL)
;; }EMRGRADIENTFILL
(setq PEMRGRADIENTFILL "void*")

;; typedef struct tagEMRTRANSPARENTBLT { {
(struct 'tagEMRTRANSPARENTBLT
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    ;; rclBounds;
    LONG ; left
    LONG ; top
    LONG ; right
    LONG ; bottom
    LONG ; xDest
    LONG ; yDest
    LONG ; cxDest
    LONG ; cyDest
    _TernaryDrawMode ; dwRop
    LONG ; xSrc
    LONG ; ySrc
    ;; xformSrc;
    FLOAT ; eM11
    FLOAT ; eM12
    FLOAT ; eM21
    FLOAT ; eM22
    FLOAT ; eDx
    FLOAT ; eDy
    COLORREF ; crBkColorSrc;
    _DIB_Color ; iUsageSrc;
    DWORD ; offBmiSrc;
    DWORD ; cbBmiSrc;
    DWORD ; offBitsSrc;
    DWORD ; cbBitsSrc;
    LONG ; cxSrc
    LONG ; cySrc
)
(setq EMRTRANSPARENTBLT tagEMRTRANSPARENTBLT)
;; } EMRTRANSPARENTBLT
(setq PEMRTRANSPARENTBLT "void*")

;; typedef struct tagEMRSETICMPROFILE { {
(struct 'tagEMRSETICMPROFILE
    ;; emr
    _EMR ; iType;
    DWORD ; nSize;
    DWORD ; dwFlags;
    DWORD ; cbName;
    DWORD ; cbData;
    BYTE ; Data;
)
(setq EMRSETICMPROFILE tagEMRSETICMPROFILE)
;; } EMRSETICMPROFILE
(setq PEMRSETICMPROFILE "void*")

;; typedef struct _POINTFLOAT  { {
(struct '_POINTFLOAT
    FLOAT ; x
    FLOAT ; y
)
(setq POINTFLOAT _POINTFLOAT)
;; } POINTFLOAT
(setq PPOINTFLOAT "void*")

;; typedef struct _GLYPHMETRICSFLOAT  { {
(struct '_GLYPHMETRICSFLOAT
    FLOAT ; gmfBlackBoxX
    FLOAT ; gmfBlackBoxY
    ;; gmfptGlyphOrigin
    FLOAT ; x
    FLOAT ; y
    FLOAT ; gmfCellIncX
    FLOAT ; gmfCellIncY
)
(setq GLYPHMETRICSFLOAT _GLYPHMETRICSFLOAT)
;; } GLYPHMETRICSFLOAT
(setq PGLYPHMETRICSFLOAT "void*")
(setq LPGLYPHMETRICSFLOAT "void*")


;; typedef struct tagLAYERPLANEDESCRIPTOR  { {
(struct 'tagLAYERPLANEDESCRIPTOR
    WORD ; nSize
    WORD ; nVersion
    _LAYERPLANEDESCRIPTOR ; dwFlags
    _LPD_TYPE ; iPixelType
    BYTE ; cColorBits
    BYTE ; cRedBits
    BYTE ; cRedShift
    BYTE ; cGreenBits
    BYTE ; cGreenShift
    BYTE ; cBlueBits
    BYTE ; cBlueShift
    BYTE ; cAlphaBits
    BYTE ; cAlphaShift
    BYTE ; cAccumBits
    BYTE ; cAccumRedBits
    BYTE ; cAccumGreenBits
    BYTE ; cAccumBlueBits
    BYTE ; cAccumAlphaBits
    BYTE ; cDepthBits
    BYTE ; cStencilBits
    BYTE ; cAuxBuffers
    BYTE ; iLayerPlane
    BYTE ; bReserved
    COLORREF ; crTransparent
)
(setq LAYERPLANEDESCRIPTOR tagLAYERPLANEDESCRIPTOR)
;; } LAYERPLANEDESCRIPTOR
(setq PLAYERPLANEDESCRIPTOR "void*")
(setq LPLAYERPLANEDESCRIPTOR "void*")

;; typedef struct _WGLSWAP { {
(struct '_WGLSWAP
    HDC ; hdc
    UINT ; uiFlags
)
(setq WGLSWAP _WGLSWAP)
;; } WGLSWAP
(setq PWGLSWAP "void*")
(setq LPWGLSWAP "void*")







(import "GDI32.DLL" "AddFontResourceA" IntFailIfZero
    LPCSTR ; lpszFilename
)
(import "GDI32.DLL" "AddFontResourceW" IntFailIfZero
    LPCWSTR ; lpszFilename
)
(import "GDI32.DLL" "AnimatePalette" FailOnFalse
    HPALETTE ; hpal,
    UINT ; iStartIndex,
    UINT ; cEntries,
    "void*" ; ppe
)
(import "GDI32.DLL" "Arc" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect,
    "int" ; nXStartArc,
    "int" ; nYStartArc,
    "int" ; nXEndArc,
    "int" ; nYEndArc
)
(import "GDI32.DLL" "BitBlt" FailOnFalse
    HDC ; hdcDest,
    "int" ; nXDest,
    "int" ; nYDest,
    "int" ; nWidth,
    "int" ; nHeight,
    HDC ; hdcSrc,
    "int" ; nXSrc,
    "int" ; nYSrc,
    _TernaryDrawMode ; dwRop
)
(import "GDI32.DLL" "CancelDC" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "Chord" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect,
    "int" ; nXRadial1,
    "int" ; nYRadial1,
    "int" ; nXRadial2,
    "int" ; nYRadial2
)
(import "GDI32.DLL" "ChoosePixelFormat" IntFailIfZero
    HDC ; hdc,
    "void*" ; ppfd
)
(import "GDI32.DLL" "CloseMetaFile" HMETAFILE
    HDC ; hdc
)
(import "GDI32.DLL" "CombineRgn" _RegionFlags
    HRGN ; hrgnDest,
    HRGN ; hrgnSrc1,
    HRGN ; hrgnSrc2,
    _CombineRgn ; fnCombineMode
)
(import "GDI32.DLL" "CopyMetaFileA" HMETAFILE
    HMETAFILE ; hmfSrc,
    LPCSTR ; lpszFile
)
(import "GDI32.DLL" "CopyMetaFileW" HMETAFILE
    HMETAFILE ; hmfSrc,
    LPCWSTR ; lpszFile
)
(import "GDI32.DLL" "CreateBitmap" HBITMAP
    "int" ; nWidth,
    "int" ; nHeight,
    UINT ; cPlanes,
    UINT ; cBitsPerPel,
    "void*" ; lpvBits
)
(import "GDI32.DLL" "CreateBitmapIndirect" HBITMAP
    "void*" ; lpbm
)
(import "GDI32.DLL" "CreateBrushIndirect" HBRUSH
    "void*" ; lplb
)
(import "GDI32.DLL" "CreateCompatibleBitmap" HBITMAP
    HDC ; hdc,
    "int" ; nWidth,
    "int" ; nHeight
)
(import "GDI32.DLL" "CreateDiscardableBitmap" HBITMAP
    HDC ; hdc,
    "int" ; nWidth,
    "int" ; nHeight
)
(import "GDI32.DLL" "CreateCompatibleDC" HDC
    HDC ; hdc
)
(import "GDI32.DLL" "CreateDCA" HDC
    LPCSTR ; lpszDriver,
    LPCSTR ; lpszDevice,
    LPCSTR ; lpszOutput,
    "void*" ; lpInitData
)
(import "GDI32.DLL" "CreateDCW" HDC
    LPCWSTR ; lpszDriver,
    LPCWSTR ; lpszDevice,
    LPCWSTR ; lpszOutput,
    "void*" ; lpInitData
)

(setq _CreateDIBitmap DWORD)

(import "GDI32.DLL" "CreateDIBitmap" HBITMAP
    HDC ; hdc,
    "void*" ; lpbmih,
    _CreateDIBitmap ; fdwInit,
    "void*" ; lpbInit,
    "void*" ; lpbmi,
    _DIB_Color ; fuUsage
)
(import "GDI32.DLL" "CreateDIBPatternBrush" HBRUSH
    HGLOBAL ; hglbDIBPacked,
    _DIB_Color ; fuColorSpec
)
(import "GDI32.DLL" "CreateDIBPatternBrushPt" HBRUSH
    "void*" ; lpPackedDIB,
    _DIB_Color ; iUsage
)
(import "GDI32.DLL" "CreateEllipticRgn" HRGN
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "CreateEllipticRgnIndirect" HRGN
    "void*" ; lprc
)
(import "GDI32.DLL" "CreateFontIndirectA" HFONT
    "void*" ; lplf
)
(import "GDI32.DLL" "CreateFontIndirectW" HFONT
    "void*" ; lplf
)
(import "GDI32.DLL" "CreateFontA" HFONT
    "int" ; nHeight,
    "int" ; nWidth,
    "int" ; nEscapement,
    "int" ; nOrientation,
    _FW ; fnWeight,
    DWORD ; fdwItalic,
    DWORD ; fdwUnderline,
    DWORD ; fdwStrikeOut,
    _CHARSET ; fdwCharSet,
    _OUT ; fdwOutputPrecision,
    _CLIP ; fdwClipPrecision,
    _OUT ; fdwQuality,
    _FF ; fdwPitchAndFamily,
    LPCSTR ; lpszFace
)
(import "GDI32.DLL" "CreateFontW" HFONT
    "int" ; nHeight,
    "int" ; nWidth,
    "int" ; nEscapement,
    "int" ; nOrientation,
    _FW ; fnWeight,
    DWORD ; fdwItalic,
    DWORD ; fdwUnderline,
    DWORD ; fdwStrikeOut,
    _CHARSET ; fdwCharSet,
    _OUT ; fdwOutputPrecision,
    _CLIP ; fdwClipPrecision,
    _OUT ; fdwQuality,
    _FF ; fdwPitchAndFamily,
    LPCWSTR ; lpszFace
)
(import "GDI32.DLL" "CreateHatchBrush" HBRUSH
    "int" ; fnStyle,
    COLORREF ; clrref
)
(import "GDI32.DLL" "CreateICA" HDC
    LPCSTR ; lpszDriver,
    LPCSTR ; lpszDevice,
    LPCSTR ; lpszOutput,
    "void*" ; lpdvmInit
)
(import "GDI32.DLL" "CreateICW" HDC
    LPCWSTR ; lpszDriver,
    LPCWSTR ; lpszDevice,
    LPCWSTR ; lpszOutput,
    "void*" ; lpdvmInit
)
(import "GDI32.DLL" "CreateMetaFileA" HDC
    LPCSTR ; lpszFile
)
(import "GDI32.DLL" "CreateMetaFileW" HDC
    LPCWSTR ; lpszFile
)
(import "GDI32.DLL" "CreatePalette" HPALETTE
    "void*" ; lplgpl
)
(import "GDI32.DLL" "CreatePen" HPEN
    _PS ; fnPenStyle,
    "int" ; nWidth,
    COLORREF ; crColor
)
(import "GDI32.DLL" "CreatePenIndirect" HPEN
    "void*" ; lplgpn
)
(import "GDI32.DLL" "CreatePolyPolygonRgn" HRGN
    "void*" ; lppt,
    "void*" ; lpPolyCounts,
    "int" ; nCount,
    _PolyFill ; fnPolyFillMode
)
(import "GDI32.DLL" "CreatePatternBrush" HBRUSH
    HBITMAP ; hbmp
)
(import "GDI32.DLL" "CreateRectRgn" HRGN
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "CreateRectRgnIndirect" HRGN
    "void*" ; lprc
)
(import "GDI32.DLL" "CreateRoundRectRgn" HRGN
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect,
    "int" ; nWidthEllipse,
    "int" ; nHeightEllipse
)
(import "GDI32.DLL" "CreateScalableFontResourceA" FailOnFalse
    DWORD ; fdwHidden,
    LPCSTR ; lpszFontRes,
    LPCSTR ; lpszFontFile,
    LPCSTR ; lpszCurrentPath
)
(import "GDI32.DLL" "CreateScalableFontResourceW" FailOnFalse
    DWORD ; fdwHidden,
    LPCWSTR ; lpszFontRes,
    LPCWSTR ; lpszFontFile,
    LPCWSTR ; lpszCurrentPath
)
(import "GDI32.DLL" "CreateSolidBrush" HBRUSH
    COLORREF ; crColor
)
(import "GDI32.DLL" "DeleteDC" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "DeleteMetaFile" FailOnFalse
    HMETAFILE ; hmf
)
(import "GDI32.DLL" "DeleteObject" FailOnFalse
    HGDIOBJ ; hobj
)
(import "GDI32.DLL" "DescribePixelFormat" IntFailIfZero
    HDC ; hdc,
    "int" ; iPixelFormat,
    UINT ; nBytes,
    LPPIXELFORMATDESCRIPTOR ; ppfd
)
(import "GDI32.DLL" "DrawEscape" SpoolerError
    HDC ; hdc,
    "int" ; nEscape,
    "int" ; cbInput,
    LPCSTR ; lpszInData
)
(import "GDI32.DLL" "Ellipse" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "EnumFontFamiliesExA" "int"
    HDC ; hdc,
    LPLOGFONTA ; lpLogfont,
    FONTENUMPROCA ; lpEnumFontFamExProc,
    LPARAM ; lParam,
    DWORD ; dwFlags
)
(import "GDI32.DLL" "EnumFontFamiliesExW" "int"
    HDC ; hdc,
    LPLOGFONTW ; lpLogfont,
    FONTENUMPROCW ; lpEnumFontFamExProc,
    LPARAM ; lParam,
    DWORD ; dwFlags
)
(import "GDI32.DLL" "EnumFontFamiliesA" "int"
    HDC ; hdc,
    LPCSTR ; lpszFamily,
    FONTENUMPROCA ; lpEnumFontFamProc,
    LPARAM ; lParam
)
(import "GDI32.DLL" "EnumFontFamiliesW" "int"
    HDC ; hdc,
    LPCWSTR ; lpszFamily,
    FONTENUMPROCW ; lpEnumFontFamProc,
    LPARAM ; lParam
)
(import "GDI32.DLL" "EnumFontsA" "int"
    HDC ; hdc,
    LPCSTR ; lpFaceName,
    FONTENUMPROCA ; lpFontFunc,
    LPARAM ; lParam
)
(import "GDI32.DLL" "EnumFontsW" "int"
    HDC ; hdc,
    LPCWSTR ; lpFaceName,
    FONTENUMPROCW ; lpFontFunc,
    LPARAM ; lParam
)
(import "GDI32.DLL" "EnumObjects" "int"
    HDC ; hdc,
    "int" ; nObjectType,
    GOBJENUMPROC ; lpObjectFunc,
    LPARAM ; lParam
)
(import "GDI32.DLL" "EqualRgn" FailOnFalse
    HRGN ; hSrcRgn1,
    HRGN ; hSrcRgn2
)
(import "GDI32.DLL" "ExcludeClipRect" _RegionFlags
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "ExtCreateRegion" HRGN
    "void*" ; lpXform,
    DWORD ; nCount,
    "void*" ; lpRgnData
)

(setq _FLOODFILL UINT)

(import "GDI32.DLL" "ExtFloodFill" FailOnFalse
    HDC ; hdc,
    "int" ; nXStart,
    "int" ; nYStart,
    COLORREF ; crColor,
    _FLOODFILL ; fuFillType
)
(import "GDI32.DLL" "FillRgn" FailOnFalse
    HDC ; hdc,
    HRGN ; hrgn,
    HBRUSH ; hbr
)
(import "GDI32.DLL" "FloodFill" FailOnFalse
    HDC ; hdc,
    "int" ; nXStart,
    "int" ; nYStart,
    COLORREF ; crFill
)
(import "GDI32.DLL" "FrameRgn" FailOnFalse
    HDC ; hdc,
    HRGN ; hrgn,
    HBRUSH ; hbr,
    "int" ; nWidth,
    "int" ; nHeight
)
(import "GDI32.DLL" "GetROP2" _BinaryDrawMode
    HDC ; hdc
)
(import "GDI32.DLL" "GetAspectRatioFilterEx" FailOnFalse
    HDC ; hdc,
    LPSIZE ; lpAspectRatio
)
(import "GDI32.DLL" "GetBkColor" COLORREF_RETURN
    HDC ; hdc

)
(import "GDI32.DLL" "GetDCBrushColor" COLORREF_RETURN
    HDC ; hdc
)
(import "GDI32.DLL" "GetDCPenColor" COLORREF_RETURN
    HDC ; hdc
)
(import "GDI32.DLL" "GetBkMode" IntFailIfZero
    HDC ; hdc
)
(import "GDI32.DLL" "GetBitmapBits" LONG
    HBITMAP ; hbmp,
    LONG ; cbBuffer,
    LPVOID ; lpvBits
)
(import "GDI32.DLL" "GetBitmapDimensionEx" FailOnFalse
    HBITMAP ; hBitmap,
    LPSIZE ; lpDimension
)
(import "GDI32.DLL" "GetBoundsRect" _DCB
    HDC ; hdc,
    LPRECT ; lprcBounds,
    _DCB ; flags
)
(import "GDI32.DLL" "GetBrushOrgEx" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lppt
)
(import "GDI32.DLL" "GetCharWidthA" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    LPINT ; lpBuffer
)
(import "GDI32.DLL" "GetCharWidthW" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    LPINT ; lpBuffer

)
(import "GDI32.DLL" "GetCharWidth32A" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    LPINT ; lpBuffer
)
(import "GDI32.DLL" "GetCharWidth32W" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    LPINT ; lpBuffer
)
(import "GDI32.DLL" "GetCharWidthFloatA" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    PFLOAT ; pxBuffer
)
(import "GDI32.DLL" "GetCharWidthFloatW" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    PFLOAT ; pxBuffer
)
(import "GDI32.DLL" "GetCharABCWidthsA" FailOnFalse
    HDC ; hdc,
    UINT ; uFirstChar,
    UINT ; uLastChar,
    LPABC ; lpabc
)
(import "GDI32.DLL" "GetCharABCWidthsW" FailOnFalse
    HDC ; hdc,
    UINT ; uFirstChar,
    UINT ; uLastChar,
    LPABC ; lpabc
)
(import "GDI32.DLL" "GetCharABCWidthsFloatA" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    LPABCFLOAT ; lpABCF
)
(import "GDI32.DLL" "GetCharABCWidthsFloatW" FailOnFalse
    HDC ; hdc,
    UINT ; iFirstChar,
    UINT ; iLastChar,
    LPABCFLOAT ; lpABCF
)
(import "GDI32.DLL" "GetClipBox" _RegionFlags
    HDC ; hdc,
    LPRECT ; lprc
)
(import "GDI32.DLL" "GetClipRgn" IntFailIfNeg1
    HDC ; hdc,
    HRGN ; hrgn
)
(import "GDI32.DLL" "GetMetaRgn" IntFailIfZero
    HDC ; hdc,
    HRGN ; hrgn
)
(import "GDI32.DLL" "GetCurrentObject" HGDIOBJ
    HDC ; hdc,
    _OBJ ; uObjectType
)
(import "GDI32.DLL" "GetCurrentPositionEx" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lpPoint
)

(setq _DeviceParameters "int")

(import "GDI32.DLL" "GetDeviceCaps" "int"
    HDC ; hdc,
    _DeviceParameters ; nIndex
)
(import "GDI32.DLL" "GetDIBits" IntFailIfZero
    HDC ; hdc,
    HBITMAP ; hbmp,
    UINT ; uStartScan,
    UINT ; cScanLines,
    LPVOID ; lpvBits,
    LPBITMAPINFO ; lpbi,
    _DIB_Color ; uUsage
)
(import "GDI32.DLL" "GetFontData" _GDI_ERROR
    HDC ; hdc,
    DWORD ; dwTable,
    DWORD ; dwOffset,
    LPVOID ; lpvBuffer,
    DWORD ; cbData
)
(import "GDI32.DLL" "GetGlyphOutlineA" DWORD
    HDC ; hdc,
    UINT ; uChar,
    _GGO ; uFormat,
    LPGLYPHMETRICS ; lpgm,
    DWORD ; cbBuffer,
    LPVOID ; lpvBuffer,
    "void*" ; lpmat2
)
(import "GDI32.DLL" "GetGlyphOutlineW" DWORD
    HDC ; hdc,
    UINT ; uChar,
    _GGO ; uFormat,
    LPGLYPHMETRICS ; lpgm,
    DWORD ; cbBuffer,
    LPVOID ; lpvBuffer,
    "void*" ; lpmat2
)
(import "GDI32.DLL" "GetGraphicsMode" _GM
    HDC ; hdc
)
(import "GDI32.DLL" "GetMapMode" _MM
    HDC ; hdc
)
(import "GDI32.DLL" "GetMetaFileBitsEx" UintFailIfZero
    HMETAFILE ; hmf,
    UINT ; nSize,
    LPVOID ; lpvData
)
(import "GDI32.DLL" "GetMetaFileA" HMETAFILE
    LPCSTR ; lpszMetaFile
)
(import "GDI32.DLL" "GetMetaFileW" HMETAFILE
    LPCWSTR ; lpszMetaFile
)
(import "GDI32.DLL" "GetNearestColor" COLORREF_RETURN
    HDC ; hdc,
    COLORREF ; crColor
)
(import "GDI32.DLL" "GetNearestPaletteIndex" COLORREF_RETURN
    HPALETTE ; hpal,
    COLORREF ; crColor
)
(import "GDI32.DLL" "GetObjectType" _OBJ
    HGDIOBJ ; h
)
(import "GDI32.DLL" "GetOutlineTextMetricsA" UintFailIfZero
    HDC ; hdc,
    UINT ; cbData,
    LPOUTLINETEXTMETRICA ; lpOTM
)
(import "GDI32.DLL" "GetOutlineTextMetricsW" UintFailIfZero
    HDC ; hdc,
    UINT ; cbData,
    LPOUTLINETEXTMETRICW ; lpOTM
)
(import "GDI32.DLL" "GetPaletteEntries" UintFailIfZero
    HPALETTE ; hpal,
    UINT ; iStartIndex,
    UINT ; nEntries,
    LPPALETTEENTRY ; lppe
)
(import "GDI32.DLL" "GetPixel" COLORREF_RETURN
    HDC ; hdc,
    "int" ; nXPos,
    "int" ; nYPos
)
(import "GDI32.DLL" "GetPixelFormat" IntFailIfZero
    HDC ; hdc
)
(import "GDI32.DLL" "GetPolyFillMode" _PolyFill
    HDC ; hdc
)
(import "GDI32.DLL" "GetRasterizerCaps" FailOnFalse
    LPRASTERIZER_STATUS ; lprs
    UINT ; cb
)
(import "GDI32.DLL" "GetRandomRgn" IntFailIfNeg1
    HDC ; hdc
    HRGN ; hrgn,
    INT ; iNum
)
(import "GDI32.DLL" "GetRegionData" IntFailIfZero
    HRGN ; hRgn,
    DWORD ; dwCount,
    LPRGNDATA ; lpRgnData
)
(import "GDI32.DLL" "GetRgnBox" _RegionFlags
    HRGN ; hrgn,
    LPRECT ; lprc
)
(import "GDI32.DLL" "GetStockObject" HGDIOBJ
    _StockObject ; fnObject
)
(import "GDI32.DLL" "GetStretchBltMode" IntFailIfZero
    HDC ; hdc
)
(import "GDI32.DLL" "GetSystemPaletteEntries" UINT
    HDC ; hdc,
    UINT ; iStartIndex,
    UINT ; nEntries,
    LPPALETTEENTRY ; lppe
)

(setq _SYSPAL UINT)

(import "GDI32.DLL" "GetSystemPaletteUse" _SYSPAL
    HDC ; hdc
)
(import "GDI32.DLL" "GetTextCharacterExtra" _ODD_FAILURE
    HDC ; hdc
)
(import "GDI32.DLL" "GetTextAlign" _TextAlignmentOptions
    HDC ; hdc
)
(import "GDI32.DLL" "GetTextColor" COLORREF_RETURN
    HDC ; hdc
)
(import "GDI32.DLL" "GetTextExtentPointA" FailOnFalse
    HDC ; hdc,
    LPCSTR ; lpString,
    "int" ; cbString,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextExtentPointW" FailOnFalse
    HDC ; hdc,
    LPCWSTR ; lpString,
    "int" ; cbString,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextExtentPoint32A" FailOnFalse
    HDC ; hdc,
    LPCSTR ; lpString,
    "int" ; cbString,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextExtentPoint32W" FailOnFalse
    HDC ; hdc,
    LPCWSTR ; lpString,
    "int" ; cbString,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextExtentExPointA" FailOnFalse
    HDC ; hdc,
    LPCSTR ; lpszStr,
    "int" ; cchString,
    "int" ; nMaxExtent,
    LPINT ; lpnFit,
    LPINT ; alpDx,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextExtentExPointW" FailOnFalse
    HDC ; hdc,
    LPCWSTR ; lpszStr,
    "int" ; cchString,
    "int" ; nMaxExtent,
    LPINT ; lpnFit,
    LPINT ; alpDx,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextCharset" _CHARSET
    HDC ; hdc
)
(import "GDI32.DLL" "GetTextCharsetInfo" _CHARSET
    HDC ; hdc,
    LPFONTSIGNATURE ; lpSig,
    DWORD ; dwFlags
)
(import "GDI32.DLL" "TranslateCharsetInfo" FailOnFalse
    "void*" ; lpSrc,
    LPCHARSETINFO ; lpCs,
    _TCI_SRC ; dwFlags
)
(import "GDI32.DLL" "GetFontLanguageInfo" _GCP
    HDC ; hdc
)
(import "GDI32.DLL" "GetCharacterPlacementA" IntFailIfZero
    HDC ; hdc,
    LPCSTR ; lpString,
    "int" ; nCount,
    "int" ; nMaxExtent,
    LPGCP_RESULTSA ; lpResults,
    _GCP ; dwFlags
)
(import "GDI32.DLL" "GetCharacterPlacementW" IntFailIfZero
    HDC ; hdc,
    LPCWSTR ; lpString,
    "int" ; nCount,
    "int" ; nMaxExtent,
    LPGCP_RESULTSW ; lpResults,
    _GCP ; dwFlags
)
(import "GDI32.DLL" "GetFontUnicodeRanges" IntFailIfZero
    HDC ; hdc,
    LPGLYPHSET ; lpgs
)
(import "GDI32.DLL" "GetGlyphIndicesA" DwordFailIfZero
    HDC ; hdc,
    LPCSTR ; lpstr,
    "int" ; c,
    LPWORD ; pgi,
    _GGI_MARK_NONEXISTING_GLYPHS ; fl
)
(import "GDI32.DLL" "GetGlyphIndicesW" DwordFailIfZero
    HDC ; hdc,
    LPCWSTR ; lpstr,
    "int" ; c,
    LPWORD ; pgi,
    _GGI_MARK_NONEXISTING_GLYPHS ; fl
)
(import "GDI32.DLL" "GetTextExtentPointI" FailOnFalse
    HDC ; hdc,
    LPWORD ; pgiIn,
    "int" ; cgi,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetTextExtentExPointI" FailOnFalse
    HDC ; hdc,
    LPWORD ; pgiIn,
    "int" ; cgi,
    "int" ; nMaxExtent,
    LPINT ; lpnFit,
    LPINT ; alpDx,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetCharWidthI" FailOnFalse
    HDC ; hdc,
    UINT ; giFirst,
    UINT ; cgi,
    LPWORD ; pgi,
    LPINT ; lpBuffer
)
(import "GDI32.DLL" "GetCharABCWidthsI" FailOnFalse
    HDC ; hdc,
    UINT ; giFirst,
    UINT ; cgi,
    LPWORD ; pgi,
    LPABC ; lpabc
)
(import "GDI32.DLL" "AddFontResourceExA" IntFailIfZero
    LPCSTR ; lpszFilename,
    _FR ; fl,
    "void*" ; pdv
)
(import "GDI32.DLL" "AddFontResourceExW" IntFailIfZero
    LPCWSTR ; lpszFilename,
    _FR ; fl,
    "void*" ; pdv
)
(import "GDI32.DLL" "RemoveFontResourceExA" FailOnFalse
    LPCSTR ; lpFileName,
    _FR ; fl,
    "void*" ; pdv
)
(import "GDI32.DLL" "RemoveFontResourceExW" FailOnFalse
    LPCWSTR ; lpFileName,
    _FR ; fl,
    "void*" ; pdv
)
(import "GDI32.DLL" "AddFontMemResourceEx" HANDLE
    PVOID ; pbFont,
    DWORD ; cbFont,
    PVOID ; pdv,
    "void*" ; pcFonts
)
(import "GDI32.DLL" "RemoveFontMemResourceEx" FailOnFalse
    HANDLE ; fh
)
(import "GDI32.DLL" "CreateFontIndirectExA" HFONT
    "void*" ; penumlfex
)
(import "GDI32.DLL" "CreateFontIndirectExW" HFONT
    "void*" ; penumlfex
)
(import "GDI32.DLL" "GetViewportExtEx" FailOnFalse
    HDC ; hdc,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetViewportOrgEx" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "GetWindowExtEx" FailOnFalse
    HDC ; hdc,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "GetWindowOrgEx" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "IntersectClipRect" _RegionFlags
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "InvertRgn" FailOnFalse
    HDC ; hdc,
    HRGN ; hrgn
)
(import "GDI32.DLL" "LineDDA" FailOnFalse
    "int" ; nXStart,
    "int" ; nYStart,
    "int" ; nXEnd,
    "int" ; nYEnd,
    LINEDDAPROC ; lpLineFunc,
    LPARAM ; lpData
)
(import "GDI32.DLL" "LineTo" FailOnFalse
    HDC ; hdc,
    "int" ; nXEnd,
    "int" ; nYEnd
)
(import "GDI32.DLL" "MaskBlt" FailOnFalse
    HDC ; hdcDest,
    "int" ; nXDest,
    "int" ; nYDest,
    "int" ; nWidth,
    "int" ; nHeight,
    HDC ; hdcSrc,
    "int" ; nXSrc,
    "int" ; nYSrc,
    HBITMAP ; hbmMask,
    "int" ; xMask,
    "int" ; yMask,
    _TernaryDrawMode ; dwRop
)
(import "GDI32.DLL" "PlgBlt" FailOnFalse
    HDC ; hdcDest,
    "void*" ; POINT * lpPoint,
    HDC ; hdcSrc,
    "int" ; nXSrc,
    "int" ; nYSrc,
    "int" ; nWidth,
    "int" ; nHeight,
    HBITMAP ; hbmMask,
    "int" ; xMask,
    "int" ; yMask
)
(import "GDI32.DLL" "OffsetClipRgn" _RegionFlags
    HDC ; hdc,
    "int" ; nXOffset,
    "int" ; nYOffset
)
(import "GDI32.DLL" "OffsetRgn" _RegionFlags
    HRGN ; hrgn,
    "int" ; nXOffset,
    "int" ; nYOffset
)
(import "GDI32.DLL" "PatBlt" FailOnFalse
    HDC ; hdc,
    "int" ; nXLeft,
    "int" ; nYLeft,
    "int" ; nWidth,
    "int" ; nHeight,
    _TernaryDrawMode ; dwRop
)
(import "GDI32.DLL" "Pie" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect,
    "int" ; nXRadial1,
    "int" ; nYRadial1,
    "int" ; nXRadial2,
    "int" ; nYRadial2
)
(import "GDI32.DLL" "PlayMetaFile" FailOnFalse
    HDC ; hdc,
    HMETAFILE ; hmf
)
(import "GDI32.DLL" "PaintRgn" FailOnFalse
    HDC ; hdc,
    HRGN ; hrgn
)

(import "GDI32.DLL" "PolyPolygon" FailOnFalse
    HDC ; hdc,
    "void*" ; lpPoints,
    "void*" ; lpPolyCounts,
    "int" ; nCount
)
(import "GDI32.DLL" "PtInRegion" BOOL
    HRGN ; hrgn,
    "int" ; X,
    "int" ; Y
)
(import "GDI32.DLL" "PtVisible" BOOL
    HDC ; hdc,
    "int" ; X,
    "int" ; Y
)
(import "GDI32.DLL" "RectInRegion" BOOL
    HRGN ; hrgn,
    "void*" ; lprc
)
(import "GDI32.DLL" "RectVisible" BOOL
    HDC ; hdc,
    "void*" ; lprc
)
(import "GDI32.DLL" "Rectangle" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "RestoreDC" FailOnFalse
    HDC ; hdc,
    "int" ; nSavedDC
)
(import "GDI32.DLL" "ResetDCA" HDC
    HDC ; hdc,
    "void*" ; lpInitData
)
(import "GDI32.DLL" "ResetDCW" HDC
    HDC ; hdc,
    "void*" ; lpInitData
)
(import "GDI32.DLL" "RealizePalette" _GDI_ERROR
    HDC ; hdc
)
(import "GDI32.DLL" "RemoveFontResourceA" FailOnFalse
    LPCSTR ; lpFileName
)
(import "GDI32.DLL" "RemoveFontResourceW" FailOnFalse
    LPCWSTR ; lpFileName
)
(import "GDI32.DLL" "RoundRect" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect,
    "int" ; nWidth,
    "int" ; nHeight
)
(import "GDI32.DLL" "ResizePalette" FailOnFalse
    HPALETTE ; hpal,
    UINT ; nEntries
)
(import "GDI32.DLL" "SaveDC" IntFailIfZero
    HDC ; hdc
)
(import "GDI32.DLL" "SelectClipRgn" _RegionFlags
    HDC ; hdc,
    HRGN ; hrgn
)
(import "GDI32.DLL" "ExtSelectClipRgn" _RegionFlags
    HDC ; hdc,
    HRGN ; hrgn,
    _CombineRgn ; fnMode
)
(import "GDI32.DLL" "SetMetaRgn" _RegionFlags
    HDC ; hdc
)
(import "GDI32.DLL" "SelectObject" HGDIOBJ
    HDC ; hdc,
    HGDIOBJ ; hgdiobj
)
(import "GDI32.DLL" "SelectPalette" HPALETTE
    HDC ; hdc,
    HPALETTE ; hpal,
    BOOL ; bForceBackground
)
(import "GDI32.DLL" "SetBkColor" COLORREF_RETURN
    HDC ; hdc,
    COLORREF ; crColor
)
(import "GDI32.DLL" "SetDCBrushColor" COLORREF_RETURN
    HDC ; hdc,
    COLORREF ; crColor
)
(import "GDI32.DLL" "SetDCPenColor" COLORREF_RETURN
    HDC ; hdc,
    COLORREF ; crColor
)
(import "GDI32.DLL" "SetBkMode" IntFailIfZero
    HDC ; hdc,
    "int" ; iBkMode
)
(import "GDI32.DLL" "SetBitmapBits" LongFailIfZero
    HBITMAP ; hbmp,
    DWORD ; cBytes,
    "void*" ; lpBits
)
(import "GDI32.DLL" "SetBoundsRect" _DCB
    HDC ; hdc,
    "void*" ; lprcBounds,
    _DCB ; flags
)
(import "GDI32.DLL" "SetDIBits" IntFailIfZero
    HDC ; hdc,
    HBITMAP ; hbmp,
    UINT ; uStartScan,
    UINT ; cScanLines,
    "void*" ; lpvBits,
    "void*" ; lpbmi,
    _DIB_Color ; fuColorUse
)
(import "GDI32.DLL" "SetDIBitsToDevice" IntFailIfZero
    HDC ; hdc,
    "int" ; XDest,
    "int" ; YDest,
    DWORD ; dwWidth,
    DWORD ; dwHeight,
    "int" ; XSrc,
    "int" ; YSrc,
    UINT ; uStartScan,
    UINT ; cScanLines,
    "void*" ; lpvBits,
    "void*" ; lpbmi,
    _DIB_Color ; fuColorUse
)
(import "GDI32.DLL" "SetMapperFlags" _GDI_ERROR
    HDC ; hdc,
    DWORD ; dwFlag
)
(import "GDI32.DLL" "SetGraphicsMode" IntFailIfZero
    HDC ; hdc,
    _GM ; iMode
)
(import "GDI32.DLL" "SetMapMode" IntFailIfZero
    HDC ; hdc,
    _MM ; fnMapMode
)
(import "GDI32.DLL" "SetLayout" _GDI_ERROR
    HDC ; hdc,
    _LAYOUT ; dwLayout
)
(import "GDI32.DLL" "GetLayout" _GDI_ERROR
    HDC ; hdc
)
(import "GDI32.DLL" "SetMetaFileBitsEx" HMETAFILE
    UINT ; nSize,
    "void*" ; lpData
)
(import "GDI32.DLL" "SetPaletteEntries" UintFailIfZero
    HPALETTE ; hpal,
    UINT ; iStart,
    UINT ; cEntries,
    "void*" ; lppe
)
(import "GDI32.DLL" "SetPixel" COLORREF_RETURN
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    COLORREF ; crColor
)
(import "GDI32.DLL" "SetPixelV" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    COLORREF ; crColor
)
(import "GDI32.DLL" "SetPixelFormat" FailOnFalse
    HDC ; hdc,
    "int" ; iPixelFormat,
    "void*" ; ppfd
)
(import "GDI32.DLL" "SetPolyFillMode" FailOnFalse
    HDC ; hdc,
    _PolyFill ; iPolyFillMode
)
(import "GDI32.DLL" "StretchBlt" FailOnFalse
    HDC ; hdcDest,
    "int" ; nXOriginDest,
    "int" ; nYOriginDest,
    "int" ; nWidthDest,
    "int" ; nHeightDest,
    HDC ; hdcSrc,
    "int" ; nXOriginSrc,
    "int" ; nYOriginSrc,
    "int" ; nWidthSrc,
    "int" ; nHeightSrc,
    _TernaryDrawMode ; dwRop
)
(import "GDI32.DLL" "SetRectRgn" FailOnFalse
    HRGN ; hrgn,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect
)
(import "GDI32.DLL" "StretchDIBits" _GDI_ERROR
    HDC ; hdc,
    "int" ; XDest,
    "int" ; YDest,
    "int" ; nDestWidth,
    "int" ; nDestHeight,
    "int" ; XSrc,
    "int" ; YSrc,
    "int" ; nSrcWidth,
    "int" ; nSrcHeight,
    "void*" ; lpBits,
    "void*" ; lpBitsInfo,
    _DIB_Color ; iUsage,
    _TernaryDrawMode ; dwRop
)
(import "GDI32.DLL" "SetROP2" IntFailIfZero
    HDC ; hdc,
    _BinaryDrawMode ; fnDrawMode
)
(import "GDI32.DLL" "SetStretchBltMode" IntFailIfZero
    HDC ; hdc,
    _COMBINRGN_STYLE ; iStretchMode
)
(import "GDI32.DLL" "SetSystemPaletteUse" _SYSPAL
    HDC ; hdc,
    _SYSPAL ; uUsage
)
(import "GDI32.DLL" "SetTextCharacterExtra" _ODD_FAILURE
    HDC ; hdc,
    "int" ; nCharExtra
)
(import "GDI32.DLL" "SetTextColor" COLORREF_RETURN
    HDC ; hdc,
    COLORREF ; crColor
)
(import "GDI32.DLL" "SetTextAlign" UINT
    HDC ; hdc,
    _TextAlignmentOptions ; fMode
)
(import "GDI32.DLL" "SetTextJustification" FailOnFalse
    HDC ; hdc,
    "int" ; nBreakExtra,
    "int" ; nBreakCount
)
(import "GDI32.DLL" "UpdateColors" FailOnFalse
    HDC ; hdc
)
;; module MSIMG32.DLL:

(import "MSIMG32.DLL" "AlphaBlend" FailOnFalse
    HDC ; hdcDest,
    "int" ; nXOriginDest,
    "int" ; nYOriginDest,
    "int" ; nWidthDest,
    "int" ; nHeightDest,
    HDC ; hdcSrc,
    "int" ; nXOriginSrc,
    "int" ; nYOriginSrc,
    "int" ; nWidthSrc,
    "int" ; nHeightSrc,
    ;; blendFunction
    _AC_SRC_OVER ; BlendOp
    BYTE ; BlendFlags
    BYTE ; SourceConstantAlpha
    _AC_SRC_ALPHA ; AlphaFormat
)
(import "MSIMG32.DLL" "TransparentBlt" FailOnFalse
    HDC ; hdcDest,
    "int" ; nXOriginDest,
    "int" ; nYOriginDest,
    "int" ; nWidthDest,
    "int" ; hHeightDest,
    HDC ; hdcSrc,
    "int" ; nXOriginSrc,
    "int" ; nYOriginSrc,
    "int" ; nWidthSrc,
    "int" ; nHeightSrc,
    UINT ; crTransparent
)
(import "MSIMG32.DLL" "GradientFill" FailOnFalse
    HDC ; hdc,
    PTRIVERTEX ; pVertex,
    ULONG ; dwNumVertex,
    PVOID ; pMesh,
    ULONG ; dwNumMesh,
    _GRADIENT_FILL ; dwMode
)
;; module GDI32.DLL:
(import "GDI32.DLL" "PlayMetaFileRecord" FailOnFalse
    HDC ; hdc,
    LPHANDLETABLE ; lpHandletable,
    LPMETARECORD ; lpMetaRecord,
    UINT ; nHandles
)
(import "GDI32.DLL" "EnumMetaFile" FailOnFalse
    HDC ; hdc,
    HMETAFILE ; hmf,
    MFENUMPROC ; lpMetaFunc,
    LPARAM ; lParam
)


(import "GDI32.DLL" "CloseEnhMetaFile" HENHMETAFILE
    HDC ; hdc
)
(import "GDI32.DLL" "CopyEnhMetaFileA" HENHMETAFILE
    HENHMETAFILE ; hemfSrc,
    LPCSTR ; lpszFile
)
(import "GDI32.DLL" "CopyEnhMetaFileW" HENHMETAFILE
    HENHMETAFILE ; hemfSrc,
    LPCWSTR ; lpszFile
)
(import "GDI32.DLL" "CreateEnhMetaFileA" HDC
    HDC ; hdcRef,
    LPCSTR ; lpFilename,
    "void*" ; lpRect,
    LPCSTR ; lpDescription
)
(import "GDI32.DLL" "CreateEnhMetaFileW" HDC
    HDC ; hdcRef,
    LPCWSTR ; lpFilename,
    "void*" ; lpRect,
    LPCWSTR ; lpDescription
)
(import "GDI32.DLL" "DeleteEnhMetaFile" FailOnFalse
    HENHMETAFILE ; hemf
)
(import "GDI32.DLL" "EnumEnhMetaFile" FailOnFalse
    HDC ; hdc,
    HENHMETAFILE ; hemf,
    ENHMFENUMPROC ; lpEnhMetaFunc,
    LPVOID ; lpData,
    "void*" ; lpRect
)
(import "GDI32.DLL" "GetEnhMetaFileA" HENHMETAFILE
    LPCSTR ; lpszMetaFile
)
(import "GDI32.DLL" "GetEnhMetaFileW" HENHMETAFILE
    LPCWSTR ; lpszMetaFile
)
(import "GDI32.DLL" "GetEnhMetaFileBits" UintFailIfZero
    HENHMETAFILE ; hemf,
    UINT ; cbBuffer,
    LPBYTE ; lpbBuffer
)
(import "GDI32.DLL" "GetEnhMetaFileDescriptionA" UintFailIfZero
    HENHMETAFILE ; hemf,
    UINT ; cchBuffer,
    LPSTR ; lpszDescription
)
(import "GDI32.DLL" "GetEnhMetaFileDescriptionW" UintFailIfZero
    HENHMETAFILE ; hemf,
    UINT ; cchBuffer,
    LPWSTR ; lpszDescription
)
(import "GDI32.DLL" "GetEnhMetaFileHeader" UintFailIfZero
    HENHMETAFILE ; hemf,
    UINT ; cbBuffer,
    LPENHMETAHEADER ; lpemh
)
(import "GDI32.DLL" "GetEnhMetaFilePaletteEntries" UintFailIfZero
    HENHMETAFILE ; hemf,
    UINT ; cEntries,
    LPPALETTEENTRY ; lppe
)
(import "GDI32.DLL" "GetEnhMetaFilePixelFormat" UintFailIfZero
    HENHMETAFILE ; hemf,
    DWORD ; cbBuffer,
    "void*" ; ppfd
)
(import "GDI32.DLL" "GetWinMetaFileBits" UintFailIfZero
    HENHMETAFILE ; hemf,
    UINT ; cbBuffer,
    LPBYTE ; lpbBuffer,
    INT ; fnMapMode,
    HDC ; hdcRef
)
(import "GDI32.DLL" "PlayEnhMetaFile" FailOnFalse
    HDC ; hdc,
    HENHMETAFILE ; hemf,
    "void*" ; lpRect
)
(import "GDI32.DLL" "PlayEnhMetaFileRecord" FailOnFalse
    HDC ; hdc,
    LPHANDLETABLE ; lpHandletable,
    "void*" ; lpEnhMetaRecord,
    UINT ; nHandles
)
(import "GDI32.DLL" "SetEnhMetaFileBits" HENHMETAFILE
    UINT ; cbBuffer,
    "void*" ; lpData
)
(import "GDI32.DLL" "SetWinMetaFileBits" HENHMETAFILE
    UINT ; cbBuffer,
    "void*" ; lpbBuffer,
    HDC ; hdcRef,
    "void*" ; lpmfp
)
(import "GDI32.DLL" "GdiComment" FailOnFalse
    HDC ; hdc,
    UINT ; cbSize,
    "void*" ; lpData
)
(import "GDI32.DLL" "GetTextMetricsA" FailOnFalse
    HDC ; hdc,
    LPTEXTMETRICA ; lptm
)
(import "GDI32.DLL" "GetTextMetricsW" FailOnFalse
    HDC ; hdc,
    LPTEXTMETRICW ; lptm

)
(import "GDI32.DLL" "AngleArc" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    DWORD ; dwRadius,
    FLOAT ; eStartAngle,
    FLOAT ; eSweepAngle
)
(import "GDI32.DLL" "PolyPolyline" FailOnFalse
    HDC ; hdc,
    "void*" ; lppt,
    "void*" ; lpdwPolyPoints,
    DWORD ; cCount
)
(import "GDI32.DLL" "GetWorldTransform" FailOnFalse
    HDC ; hdc,
    LPXFORM ; lpXform
)
(import "GDI32.DLL" "SetWorldTransform" FailOnFalse
    HDC ; hdc,
    "void*" ; lpXform
)
(import "GDI32.DLL" "ModifyWorldTransform" FailOnFalse
    HDC ; hdc,
    "void*" ; lpXform,
    DWORD ; iMode
)
(import "GDI32.DLL" "CombineTransform" FailOnFalse
    LPXFORM ; lpxformResult,
    "void*" ; lpxform1,
    "void*" ; lpxform2
)
(import "GDI32.DLL" "CreateDIBSection" HBITMAP
    HDC ; hdc,
    "void*" ; pbmi,
    UINT ; iUsage,
    "void*" ; ppvBits,
    HANDLE ; hSection,
    DWORD ; dwOffset
)
(import "GDI32.DLL" "GetDIBColorTable" UintFailIfZero
    HDC ; hdc,
    UINT ; uStartIndex,
    UINT ; cEntries,
    "void*" ; pColors
)
(import "GDI32.DLL" "SetDIBColorTable" UintFailIfZero
    HDC ; hdc,
    UINT ; uStartIndex,
    UINT ; cEntries,
    "void*" ; pColors
)
(import "GDI32.DLL" "SetColorAdjustment" FailOnFalse
    HDC ; hdc,
    "void*" ; lpca
)
(import "GDI32.DLL" "GetColorAdjustment" FailOnFalse
    HDC ; hdc,
    LPCOLORADJUSTMENT ; lpca
)
(import "GDI32.DLL" "CreateHalftonePalette" HPALETTE
    HDC ; hdc
)
(import "GDI32.DLL" "AbortPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "ArcTo" FailOnFalse
    HDC ; hdc,
    "int" ; nLeftRect,
    "int" ; nTopRect,
    "int" ; nRightRect,
    "int" ; nBottomRect,
    "int" ; nXRadial1,
    "int" ; nYRadial1,
    "int" ; nXRadial2,
    "int" ; nYRadial2
)
(import "GDI32.DLL" "BeginPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "CloseFigure" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "EndPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "FillPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "FlattenPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "GetPath" IntFailIfNeg1
    HDC ; hdc,
    LPPOINT ; lpPoints,
    "void*" ; lpTypes,
    "int" ; nSize
)
(import "GDI32.DLL" "PathToRegion" HRGN
    HDC ; hdc
)
(import "GDI32.DLL" "PolyDraw" FailOnFalse
    HDC ; hdc,
    "void*" ; lppt,
    "void*" ; lpbTypes,
    "int" ; cCount
)
(import "GDI32.DLL" "SelectClipPath" FailOnFalse
    HDC ; hdc,
    _CombineRgn ; iMode
)

(setq _AD "int")

(import "GDI32.DLL" "SetArcDirection" IntFailIfZero
    HDC ; hdc,
    _AD ; ArcDirection

)
(import "GDI32.DLL" "SetMiterLimit" FailOnFalse
    HDC ; hdc,
    FLOAT ; eNewLimit,
    PFLOAT ; peOldLimit
)
(import "GDI32.DLL" "StrokeAndFillPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "StrokePath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "WidenPath" FailOnFalse
    HDC ; hdc
)
(import "GDI32.DLL" "ExtCreatePen" HPEN
    _PS ; dwPenStyle,
    DWORD ; dwWidth,
    "void*" ; lplb,
    DWORD ; dwStyleCount,
    "void*" ; lpStyle
)
(import "GDI32.DLL" "GetMiterLimit" FailOnFalse
    HDC ; hdc,
    PFLOAT ; peLimit
)
(import "GDI32.DLL" "GetArcDirection" _AD
    HDC ; hdc
)
(import "GDI32.DLL" "GetObjectA" IntFailIfZero
    HGDIOBJ ; hgdiobj,
    "int" ; cbBuffer,
    LPVOID ; lpvObject
)
(import "GDI32.DLL" "GetObjectW" IntFailIfZero
    HGDIOBJ ; hgdiobj,
    "int" ; cbBuffer,
    LPVOID ; lpvObject
)
(import "GDI32.DLL" "MoveToEx" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "TextOutA" FailOnFalse
    HDC ; hdc,
    "int" ; nXStart,
    "int" ; nYStart,
    LPCSTR ; lpString,
    "int" ; cbString
)
(import "GDI32.DLL" "TextOutW" FailOnFalse
    HDC ; hdc,
    "int" ; nXStart,
    "int" ; nYStart,
    LPCWSTR ; lpString,
    "int" ; cbString
)
(import "GDI32.DLL" "ExtTextOutA" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    _ETO ; fuOptions,
    "void*" ; lprc,
    LPCSTR ; lpString,
    UINT ; cbCount,
    "void*" ; lpDx
)
(import "GDI32.DLL" "ExtTextOutW" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    _ETO ; fuOptions,
    "void*" ; lprc,
    LPCWSTR ; lpString,
    UINT ; cbCount,
    "void*" ; lpDx
)
(import "GDI32.DLL" "PolyTextOutA" FailOnFalse
    HDC ; hdc,
    "void*" ; pptxt,
    "int" ; cStrings
)
(import "GDI32.DLL" "PolyTextOutW" FailOnFalse
    HDC ; hdc,
    "void*" ; pptxt,
    "int" ; cStrings
)
(import "GDI32.DLL" "CreatePolygonRgn" HRGN
    "void*" ; lppt,
    "int" ; cPoints,
    _PolyFill ; fnPolyFillMode
)
(import "GDI32.DLL" "DPtoLP" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lpPoints,
    "int" ; nCount
)
(import "GDI32.DLL" "LPtoDP" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lpPoints,
    "int" ; nCount
)
(import "GDI32.DLL" "Polygon" FailOnFalse
    HDC ; hdc,
    "void*" ; lpPoints,
    "int" ; nCount
)
(import "GDI32.DLL" "Polyline" FailOnFalse
    HDC ; hdc,
    "void*" ; lppt,
    "int" ; cPoints

)
(import "GDI32.DLL" "PolyBezier" FailOnFalse
    HDC ; hdc,
    "void*" ; lppt,
    DWORD ; cPoints
)
(import "GDI32.DLL" "PolyBezierTo" FailOnFalse
    HDC ; hdc,
    "void*" ; lppt,
    DWORD ; cCount
)
(import "GDI32.DLL" "PolylineTo" FailOnFalse
    HDC ; hdc,
    "void*" ; lppt,
    DWORD ; cCount

)
(import "GDI32.DLL" "SetViewportExtEx" FailOnFalse
    HDC ; hdc,
    "int" ; nXExtent,
    "int" ; nYExtent,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "SetViewportOrgEx" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "SetWindowExtEx" FailOnFalse
    HDC ; hdc,
    "int" ; nXExtent,
    "int" ; nYExtent,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "SetWindowOrgEx" FailOnFalse
    HDC ; hdc,
    "int" ; X,
    "int" ; Y,
    LPPOINT ; lpPoint

)
(import "GDI32.DLL" "OffsetViewportOrgEx" FailOnFalse
    HDC ; hdc,
    "int" ; nXOffset,
    "int" ; nYOffset,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "OffsetWindowOrgEx" FailOnFalse
    HDC ; hdc,
    "int" ; nXOffset,
    "int" ; nYOffset,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "ScaleViewportExtEx" FailOnFalse
    HDC ; hdc,
    "int" ; Xnum,
    "int" ; Xdenom,
    "int" ; Ynum,
    "int" ; Ydenom,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "ScaleWindowExtEx" FailOnFalse
    HDC ; hdc,
    "int" ; Xnum,
    "int" ; Xdenom,
    "int" ; Ynum,
    "int" ; Ydenom,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "SetBitmapDimensionEx" FailOnFalse
    HBITMAP ; hBitmap,
    "int" ; nWidth,
    "int" ; nHeight,
    LPSIZE ; lpSize
)
(import "GDI32.DLL" "SetBrushOrgEx" FailOnFalse
    HDC ; hdc,
    "int" ; nXOrg,
    "int" ; nYOrg,
    LPPOINT ; lppt

)
(import "GDI32.DLL" "GetTextFaceA" IntFailIfZero
    HDC ; hdc,
    "int" ; nCount,
    LPSTR ; lpFaceName
)
(import "GDI32.DLL" "GetTextFaceW" IntFailIfZero
    HDC ; hdc,
    "int" ; nCount,
    LPWSTR ; lpFaceName

)
(import "GDI32.DLL" "GetKerningPairsA" DwordFailIfZero
    HDC ; hdc,
    DWORD ; nNumPairs,
    LPKERNINGPAIR ; lpkrnpair
)
(import "GDI32.DLL" "GetKerningPairsW" DwordFailIfZero
    HDC ; hdc,
    DWORD ; nNumPairs,
    LPKERNINGPAIR ; lpkrnpair
)
(import "GDI32.DLL" "GetDCOrgEx" FailOnFalse
    HDC ; hdc,
    LPPOINT ; lpPoint
)
(import "GDI32.DLL" "FixBrushOrgEx" FailOnFalse
    HDC ; hdc,
    "int" ; arg1,
    "int" ; arg2,
    LPPOINT ; point
)
(import "GDI32.DLL" "UnrealizeObject" FailOnFalse
    HGDIOBJ ; hgdiobj
)
(import "GDI32.DLL" "GdiFlush" FailOnFalse
)

(import "GDI32.DLL" "GdiSetBatchLimit" DwordFailIfZero
    DWORD ; dwLimit
)
(import "GDI32.DLL" "GdiGetBatchLimit" DwordFailIfZero
)


(import "GDI32.DLL" "SetICMMode" IntFailIfZero
    HDC ; hDC,
    _ICM ; iEnableICM
)

(import "GDI32.DLL" "CheckColorsInGamut" FailOnFalse
    HDC ; hDC,
    LPVOID ; lpRGBTriples,
    LPVOID ; lpBuffer,
    UINT ; nCount
)

(import "GDI32.DLL" "GetColorSpace" HCOLORSPACE
    HDC ; hDC
)

(import "GDI32.DLL" "GetLogColorSpaceA" FailOnFalse
    HCOLORSPACE ; hColorSpace,
    LPLOGCOLORSPACEA ; lpBuffer,
    DWORD ; nSize
)

(import "GDI32.DLL" "GetLogColorSpaceW" FailOnFalse
    HCOLORSPACE ; hColorSpace,
    LPLOGCOLORSPACEW ; lpBuffer,
    DWORD ; nSize
)

(import "GDI32.DLL" "CreateColorSpaceA" HCOLORSPACE
    LPLOGCOLORSPACEA ; lpLogColorSpace
)

(import "GDI32.DLL" "CreateColorSpaceW" HCOLORSPACE
    LPLOGCOLORSPACEW ; lpLogColorSpace
)

(import "GDI32.DLL" "SetColorSpace" HCOLORSPACE
    HDC ; hDC,
    HCOLORSPACE ; hColorSpace
)

(import "GDI32.DLL" "DeleteColorSpace" FailOnFalse
    HCOLORSPACE ; hColorSpace
)

(import "GDI32.DLL" "GetICMProfileA" FailOnFalse
    HDC ; hDC,
    LPDWORD ; lpcbName,
    LPSTR ; lpszFilename
)
(import "GDI32.DLL" "GetICMProfileW" FailOnFalse
    HDC ; hDC,
    LPDWORD ; lpcbName,
    LPWSTR ; lpszFilename
)
(import "GDI32.DLL" "SetICMProfileA" FailOnFalse
    HDC ; hDC,
    LPSTR ; lpFileName
)
(import "GDI32.DLL" "SetICMProfileW" FailOnFalse
    HDC ; hDC,
    LPWSTR ; lpFileName
)
(import "GDI32.DLL" "GetDeviceGammaRamp" FailOnFalse
    HDC ; hDC,
    LPVOID ; lpRamp
)
(import "GDI32.DLL" "SetDeviceGammaRamp" FailOnFalse
    HDC ; hDC,
    LPVOID ; lpRamp
)
(import "GDI32.DLL" "ColorMatchToTarget" FailOnFalse
    HDC ; hDC,
    HDC ; hdcTarget,
    DWORD ; uiAction
)
(import "GDI32.DLL" "EnumICMProfilesA" "int"
    HDC ; hDC,
    ICMENUMPROCA ; lpEnumICMProfilesFunc,
    LPARAM ; lParam
)
(import "GDI32.DLL" "EnumICMProfilesW" "int"
    HDC ; hDC,
    ICMENUMPROCW ; lpEnumICMProfilesFunc,
    LPARAM ; lParam
)

(import "GDI32.DLL" "UpdateICMRegKeyA" FailOnFalse
    DWORD ; dwReserved,
    LPSTR ; lpszCMID,
    LPSTR ; lpszFileName,
    _UpdateICMRegKey ; nCommand
)

(import "GDI32.DLL" "UpdateICMRegKeyW" FailOnFalse
    DWORD ; dwReserved,
    LPWSTR ; lpszCMID,
    LPWSTR ; lpszFileName,
    _UpdateICMRegKey ; nCommand
)

(import "GDI32.DLL" "ColorCorrectPalette" FailOnFalse
    HDC ; hDC,
    HPALETTE ; hPalette,
    DWORD ; dwFirstEntry,
    DWORD ; dwNumOfEntries
)
