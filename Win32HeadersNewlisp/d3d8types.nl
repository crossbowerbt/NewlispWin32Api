(context 'WIN32)


















;; mask DWORD d3dUsage8 {
(setq D3DUSAGE_RENDERTARGET 0x00000001)
(setq D3DUSAGE_DEPTHSTENCIL 0x00000002)
(setq D3DUSAGE_WRITEONLY 0x00000008)
(setq D3DUSAGE_SOFTWAREPROCESSING 0x00000010)
(setq D3DUSAGE_DONOTCLIP 0x00000020)
(setq D3DUSAGE_POINTS 0x00000040)
(setq D3DUSAGE_RTPATCHES 0x00000080)
(setq D3DUSAGE_NPATCHES 0x00000100)
(setq D3DUSAGE_DYNAMIC 0x00000200)
;; };

;; mask DWORD d3dPresentParamsFlags8 {
(setq D3DPRESENTFLAG_LOCKABLE_BACKBUFFER 0x00000001)
;; };

;; mask DWORD d3dPresentationIntervals8 {
(setq D3DPRESENT_INTERVAL_ONE 0x00000001)
(setq D3DPRESENT_INTERVAL_TWO 0x00000002)
(setq D3DPRESENT_INTERVAL_THREE 0x00000004)
(setq D3DPRESENT_INTERVAL_FOUR 0x00000008)
(setq D3DPRESENT_INTERVAL_IMMEDIATE 0x80000000)
;; };

;; mask DWORD d3dLockFlags8 {
(setq D3DLOCK_READONLY 0x00000010)
(setq D3DLOCK_DISCARD 0x00002000)
(setq D3DLOCK_NOOVERWRITE 0x00001000)
(setq D3DLOCK_NOSYSLOCK 0x00000800)
(setq D3DLOCK_NO_DIRTY_UPDATE 0x00008000)
;; };

;; mask DWORD d3dFVF8 {
(setq D3DFVF_RESERVED0 0x001)
(setq D3DFVF_XYZ 0x002)
(setq D3DFVF_XYZRHW 0x004)
(setq D3DFVF_XYZB2 0x008)
(setq D3DFVF_NORMAL 0x010)
(setq D3DFVF_PSIZE 0x020)
(setq D3DFVF_DIFFUSE 0x040)
(setq D3DFVF_SPECULAR 0x080)
(setq D3DFVF_TEX1 0x100)
(setq D3DFVF_TEX2 0x200)
(setq D3DFVF_TEX4 0x400)
(setq D3DFVF_TEX8 0x800)
(setq D3DFVF_LASTBETA_UBYTE4 0x1000)
(setq D3DFVF_RESERVED 0xFFFFE000)
;; };

;; mask DWORD d3dBehaviorFlags8 {
(setq D3DCREATE_FPU_PRESERVE 0x00000002)
(setq D3DCREATE_MULTITHREADED 0x00000004)
(setq D3DCREATE_PUREDEVICE 0x00000010)
(setq D3DCREATE_SOFTWARE_VERTEXPROCESSING 0x00000020)
(setq D3DCREATE_HARDWARE_VERTEXPROCESSING 0x00000040)
(setq D3DCREATE_MIXED_VERTEXPROCESSING 0x00000080)
;; };

;; mask DWORD d3dClearFlags8 {
(setq D3DCLEAR_TARGET 0x00000001)
(setq D3DCLEAR_ZBUFFER 0x00000002)
(setq D3DCLEAR_STENCIL 0x00000004)
;; };

;; mask DWORD d3dClipStatus8 {
(setq D3DCS_LEFT 0x00000001L)
(setq D3DCS_RIGHT 0x00000002L)
(setq D3DCS_TOP 0x00000004L)
(setq D3DCS_BOTTOM 0x00000008L)
(setq D3DCS_FRONT 0x00000010L)
(setq D3DCS_BACK 0x00000020L)
(setq D3DCS_PLANE0 0x00000040L)
(setq D3DCS_PLANE1 0x00000080L)
(setq D3DCS_PLANE2 0x00000100L)
(setq D3DCS_PLANE3 0x00000200L)
(setq D3DCS_PLANE4 0x00000400L)
(setq D3DCS_PLANE5 0x00000800L)
;; };

;; mask DWORD d3dProcessVerticesFlags {
(setq D3DPV_DONOTCOPYDATA 1)
;; };






;; value UINT d3dAdapterID8 {
(setq D3DADAPTER_DEFAULT 0)
;; };

;; value DWORD D3DDEVTYPE {
(setq D3DDEVTYPE_HAL 1)
(setq D3DDEVTYPE_REF 2)
(setq D3DDEVTYPE_SW 3)
;; };

;; value DWORD D3DMULTISAMPLE_TYPE {
(setq D3DMULTISAMPLE_NONE 0)
(setq D3DMULTISAMPLE_2_SAMPLES 2)
(setq D3DMULTISAMPLE_3_SAMPLES 3)
(setq D3DMULTISAMPLE_4_SAMPLES 4)
(setq D3DMULTISAMPLE_5_SAMPLES 5)
(setq D3DMULTISAMPLE_6_SAMPLES 6)
(setq D3DMULTISAMPLE_7_SAMPLES 7)
(setq D3DMULTISAMPLE_8_SAMPLES 8)
(setq D3DMULTISAMPLE_9_SAMPLES 9)
(setq D3DMULTISAMPLE_10_SAMPLES 10)
(setq D3DMULTISAMPLE_11_SAMPLES 11)
(setq D3DMULTISAMPLE_12_SAMPLES 12)
(setq D3DMULTISAMPLE_13_SAMPLES 13)
(setq D3DMULTISAMPLE_14_SAMPLES 14)
(setq D3DMULTISAMPLE_15_SAMPLES 15)
(setq D3DMULTISAMPLE_16_SAMPLES 16)
;; };

;; value DWORD D3DRESOURCETYPE {
(setq D3DRTYPE_SURFACE 1)
(setq D3DRTYPE_VOLUME 2)
(setq D3DRTYPE_TEXTURE 3)
(setq D3DRTYPE_VOLUMETEXTURE 4)
(setq D3DRTYPE_CUBETEXTURE 5)
(setq D3DRTYPE_VERTEXBUFFER 6)
(setq D3DRTYPE_INDEXBUFFER 7)
;; };

;; value DWORD D3DSWAPEFFECT {
(setq D3DSWAPEFFECT_DEFAULT 0)
(setq D3DSWAPEFFECT_DISCARD 1)
(setq D3DSWAPEFFECT_FLIP 2)
(setq D3DSWAPEFFECT_COPY 3)
(setq D3DSWAPEFFECT_COPY_VSYNC 4)
;; };

;; value UINT d3dRefreshRate8 {
(setq D3DPRESENT_RATE_DEFAULT 0x00000000)
(setq D3DPRESENT_RATE_UNLIMITED 0x7fffffff)
;; };

;; value DWORD D3DPOOL {
(setq D3DPOOL_DEFAULT 0)
(setq D3DPOOL_MANAGED 1)
(setq D3DPOOL_SYSTEMMEM 2)
;; };

;; value DWORD D3DCUBEMAP_FACES {
(setq D3DCUBEMAP_FACE_POSITIVE_X 0)
(setq D3DCUBEMAP_FACE_NEGATIVE_X 1)
(setq D3DCUBEMAP_FACE_POSITIVE_Y 2)
(setq D3DCUBEMAP_FACE_NEGATIVE_Y 3)
(setq D3DCUBEMAP_FACE_POSITIVE_Z 4)
(setq D3DCUBEMAP_FACE_NEGATIVE_Z 5)
;; };

;; value DWORD D3DBACKBUFFER_TYPE {
(setq D3DBACKBUFFER_TYPE_MONO 0)
(setq D3DBACKBUFFER_TYPE_LEFT 1)
(setq D3DBACKBUFFER_TYPE_RIGHT 2)
;; };

;; value DWORD D3DTRANSFORMSTATETYPE8 {
(setq D3DTS_VIEW 2)
(setq D3DTS_PROJECTION 3)
(setq D3DTS_TEXTURE0 16)
(setq D3DTS_TEXTURE1 17)
(setq D3DTS_TEXTURE2 18)
(setq D3DTS_TEXTURE3 19)
(setq D3DTS_TEXTURE4 20)
(setq D3DTS_TEXTURE5 21)
(setq D3DTS_TEXTURE6 22)
(setq D3DTS_TEXTURE7 23)
(setq D3DTS_WORLD 256)
(setq D3DTS_WORLD1 257)
(setq D3DTS_WORLD2 258)
(setq D3DTS_WORLD3 259)
;; };

;; value DWORD D3DLIGHTTYPE8 {
(setq D3DLIGHT_POINT 1)
(setq D3DLIGHT_SPOT 2)
(setq D3DLIGHT_DIRECTIONAL 3)
;; };

;; value DWORD D3DRENDERSTATETYPE8 {
(setq D3DRS_ZENABLE 7)
(setq D3DRS_FILLMODE 8)
(setq D3DRS_SHADEMODE 9)
(setq D3DRS_LINEPATTERN 10)
(setq D3DRS_ZWRITEENABLE 14)
(setq D3DRS_ALPHATESTENABLE 15)
(setq D3DRS_LASTPIXEL 16)
(setq D3DRS_SRCBLEND 19)
(setq D3DRS_DESTBLEND 20)
(setq D3DRS_CULLMODE 22)
(setq D3DRS_ZFUNC 23)
(setq D3DRS_ALPHAREF 24)
(setq D3DRS_ALPHAFUNC 25)
(setq D3DRS_DITHERENABLE 26)
(setq D3DRS_ALPHABLENDENABLE 27)
(setq D3DRS_FOGENABLE 28)
(setq D3DRS_SPECULARENABLE 29)
(setq D3DRS_ZVISIBLE 30)
(setq D3DRS_FOGCOLOR 34)
(setq D3DRS_FOGTABLEMODE 35)
(setq D3DRS_FOGSTART 36)
(setq D3DRS_FOGEND 37)
(setq D3DRS_FOGDENSITY 38)
(setq D3DRS_EDGEANTIALIAS 40)
(setq D3DRS_ZBIAS 47)
(setq D3DRS_RANGEFOGENABLE 48)
(setq D3DRS_STENCILENABLE 52)
(setq D3DRS_STENCILFAIL 53)
(setq D3DRS_STENCILZFAIL 54)
(setq D3DRS_STENCILPASS 55)
(setq D3DRS_STENCILFUNC 56)
(setq D3DRS_STENCILREF 57)
(setq D3DRS_STENCILMASK 58)
(setq D3DRS_STENCILWRITEMASK 59)
(setq D3DRS_TEXTUREFACTOR 60)
(setq D3DRS_WRAP0 128)
(setq D3DRS_WRAP1 129)
(setq D3DRS_WRAP2 130)
(setq D3DRS_WRAP3 131)
(setq D3DRS_WRAP4 132)
(setq D3DRS_WRAP5 133)
(setq D3DRS_WRAP6 134)
(setq D3DRS_WRAP7 135)
(setq D3DRS_CLIPPING 136)
(setq D3DRS_LIGHTING 137)
(setq D3DRS_AMBIENT 139)
(setq D3DRS_FOGVERTEXMODE 140)
(setq D3DRS_COLORVERTEX 141)
(setq D3DRS_LOCALVIEWER 142)
(setq D3DRS_NORMALIZENORMALS 143)
(setq D3DRS_DIFFUSEMATERIALSOURCE 145)
(setq D3DRS_SPECULARMATERIALSOURCE 146)
(setq D3DRS_AMBIENTMATERIALSOURCE 147)
(setq D3DRS_EMISSIVEMATERIALSOURCE 148)
(setq D3DRS_VERTEXBLEND 151)
(setq D3DRS_CLIPPLANEENABLE 152)
(setq D3DRS_SOFTWAREVERTEXPROCESSING 153)
(setq D3DRS_POINTSIZE 154)
(setq D3DRS_POINTSIZE_MIN 155)
(setq D3DRS_POINTSPRITEENABLE 156)
(setq D3DRS_POINTSCALEENABLE 157)
(setq D3DRS_POINTSCALE_A 158)
(setq D3DRS_POINTSCALE_B 159)
(setq D3DRS_POINTSCALE_C 160)
(setq D3DRS_MULTISAMPLEANTIALIAS 161)
(setq D3DRS_MULTISAMPLEMASK 162)
(setq D3DRS_PATCHEDGESTYLE 163)
(setq D3DRS_PATCHSEGMENTS 164)
(setq D3DRS_DEBUGMONITORTOKEN 165)
(setq D3DRS_POINTSIZE_MAX 166)
(setq D3DRS_INDEXEDVERTEXBLENDENABLE 167)
(setq D3DRS_COLORWRITEENABLE 168)
(setq D3DRS_TWEENFACTOR 170)
(setq D3DRS_BLENDOP 171)
;; };

;; value DWORD D3DTEXTURESTAGESTATETYPE8 {
(setq D3DTSS_COLOROP 1)
(setq D3DTSS_COLORARG1 2)
(setq D3DTSS_COLORARG2 3)
(setq D3DTSS_ALPHAOP 4)
(setq D3DTSS_ALPHAARG1 5)
(setq D3DTSS_ALPHAARG2 6)
(setq D3DTSS_BUMPENVMAT00 7)
(setq D3DTSS_BUMPENVMAT01 8)
(setq D3DTSS_BUMPENVMAT10 9)
(setq D3DTSS_BUMPENVMAT11 10)
(setq D3DTSS_TEXCOORDINDEX 11)
(setq D3DTSS_ADDRESSU 13)
(setq D3DTSS_ADDRESSV 14)
(setq D3DTSS_BORDERCOLOR 15)
(setq D3DTSS_MAGFILTER 16)
(setq D3DTSS_MINFILTER 17)
(setq D3DTSS_MIPFILTER 18)
(setq D3DTSS_MIPMAPLODBIAS 19)
(setq D3DTSS_MAXMIPLEVEL 20)
(setq D3DTSS_MAXANISOTROPY 21)
(setq D3DTSS_BUMPENVLSCALE 22)
(setq D3DTSS_BUMPENVLOFFSET 23)
(setq D3DTSS_TEXTURETRANSFORMFLAGS 24)
(setq D3DTSS_ADDRESSW 25)
(setq D3DTSS_COLORARG0 26)
(setq D3DTSS_ALPHAARG0 27)
(setq D3DTSS_RESULTARG 28)
;; };

;; value DWORD D3DSTATEBLOCKTYPE8 {
(setq D3DSBT_ALL 1)
(setq D3DSBT_PIXELSTATE 2)
(setq D3DSBT_VERTEXSTATE 3)
;; };

;; value DWORD D3DPRIMITIVETYPE8 {
(setq D3DPT_POINTLIST 1)
(setq D3DPT_LINELIST 2)
(setq D3DPT_LINESTRIP 3)
(setq D3DPT_TRIANGLELIST 4)
(setq D3DPT_TRIANGLESTRIP 5)
(setq D3DPT_TRIANGLEFAN 6)
;; };

;; value DWORD D3DBASISTYPE {
(setq D3DBASIS_BEZIER 0)
(setq D3DBASIS_BSPLINE 1)
(setq D3DBASIS_INTERPOLATE 2)
;; };

;; value DWORD D3DORDERTYPE {
(setq D3DORDER_LINEAR 1)
(setq D3DORDER_CUBIC 3)
(setq D3DORDER_QUINTIC 5)
;; };

;; value DWORD D3DFORMAT {
(setq D3DFMT_UNKNOWN 0)
(setq D3DFMT_R8G8B8 20)
(setq D3DFMT_A8R8G8B8 21)
(setq D3DFMT_X8R8G8B8 22)
(setq D3DFMT_R5G6B5 23)
(setq D3DFMT_X1R5G5B5 24)
(setq D3DFMT_A1R5G5B5 25)
(setq D3DFMT_A4R4G4B4 26)
(setq D3DFMT_R3G3B2 27)
(setq D3DFMT_A8 28)
(setq D3DFMT_A8R3G3B2 29)
(setq D3DFMT_X4R4G4B4 30)
(setq D3DFMT_A8P8 40)
(setq D3DFMT_P8 41)
(setq D3DFMT_L8 50)
(setq D3DFMT_A8L8 51)
(setq D3DFMT_A4L4 52)
(setq D3DFMT_V8U8 60)
(setq D3DFMT_L6V5U5 61)
(setq D3DFMT_X8L8V8U8 62)
(setq D3DFMT_Q8W8V8U8 63)
(setq D3DFMT_V16U16 64)
(setq D3DFMT_W11V11U10 65)
(setq D3DFMT_UYVY 0x59565955)
(setq D3DFMT_YUY2 0x32595559)
(setq D3DFMT_DXT1 0x31545844)
(setq D3DFMT_DXT2 0x32545844)
(setq D3DFMT_DXT3 0x33545844)
(setq D3DFMT_DXT4 0x34545844)
(setq D3DFMT_DXT5 0x35545844)
(setq D3DFMT_D16_LOCKABLE 70)
(setq D3DFMT_D32 71)
(setq D3DFMT_D15S1 73)
(setq D3DFMT_D24S8 75)
(setq D3DFMT_D16 80)
(setq D3DFMT_D24X8 77)
(setq D3DFMT_D24X4S4 79)
(setq D3DFMT_VERTEXDATA 100)
(setq D3DFMT_INDEX16 101)
(setq D3DFMT_INDEX32 102)
;; };






;; typedef struct _D3DDISPLAYMODE { {
(struct '_D3DDISPLAYMODE
    UINT ; Width
    UINT ; Height
    UINT ; RefreshRate
    D3DFORMAT ; Format
)
(setq D3DDISPLAYMODE _D3DDISPLAYMODE)
;; } D3DDISPLAYMODE
(setq LPD3DDISPLAYMODE (string _D3DDISPLAYMODE "*"))

;; typedef struct _D3DADAPTER_IDENTIFIER8 { {
(struct '_D3DADAPTER_IDENTIFIER8
    char ; Driver
    char ; Description
    DWORD ; DriverVersionLowPart
    DWORD ; DriverVersionHighPart
    DWORD ; VendorId
    DWORD ; DeviceId
    DWORD ; SubSysId
    DWORD ; Revision
    GUID ; DeviceIdentifier
    DWORD ; WHQLLevel
)
(setq D3DADAPTER_IDENTIFIER8 _D3DADAPTER_IDENTIFIER8)
;; } D3DADAPTER_IDENTIFIER8
(setq LPD3DADAPTER_IDENTIFIER8 (string _D3DADAPTER_IDENTIFIER8 "*"))

;; typedef struct _D3DPRESENT_PARAMETERS_ { {
(struct '_D3DPRESENT_PARAMETERS_
    UINT ; BackBufferWidth
    UINT ; BackBufferHeight
    D3DFORMAT ; BackBufferFormat
    UINT ; BackBufferCount
    D3DMULTISAMPLE_TYPE ; MultiSampleType
    D3DSWAPEFFECT ; SwapEffect
    HWND ; hDeviceWindow
    BOOL ; Windowed
    BOOL ; EnableAutoDepthStencil
    D3DFORMAT ; AutoDepthStencilFormat
    d3dPresentParamsFlags8 ; Flags
    d3dRefreshRate8 ; FullScreen_RefreshRateInHz
    d3dPresentationIntervals8 ; FullScreen_PresentationInterval
)
(setq D3DPRESENT_PARAMETERS _D3DPRESENT_PARAMETERS_)
;; } D3DPRESENT_PARAMETERS
(setq LPD3DPRESENT_PARAMETERS (string _D3DPRESENT_PARAMETERS_ "*"))

;; typedef struct _D3DSURFACE_DESC { {
(struct '_D3DSURFACE_DESC
    D3DFORMAT ; Format
    D3DRESOURCETYPE ; Type
    d3dUsage8 ; Usage
    D3DPOOL ; Pool
    UINT ; Size
    D3DMULTISAMPLE_TYPE ; MultiSampleType
    UINT ; Width
    UINT ; Height
)
(setq D3DSURFACE_DESC _D3DSURFACE_DESC)
;; } D3DSURFACE_DESC
(setq LPD3DSURFACE_DESC (string _D3DSURFACE_DESC "*"))

;; typedef struct _D3DVOLUME_DESC { {
(struct '_D3DVOLUME_DESC
    D3DFORMAT ; Format
    D3DRESOURCETYPE ; Type
    d3dUsage8 ; Usage
    D3DPOOL ; Pool
    UINT ; Size
    UINT ; Width
    UINT ; Height
    UINT ; Depth
)
(setq D3DVOLUME_DESC _D3DVOLUME_DESC)
;; } D3DVOLUME_DESC
(setq LPD3DVOLUME_DESC (string _D3DVOLUME_DESC "*"))

;; typedef struct _D3DLOCKED_RECT { {
(struct '_D3DLOCKED_RECT
    INT ; Pitch
    LPVOID ; pBits
)
(setq D3DLOCKED_RECT _D3DLOCKED_RECT)
;; } D3DLOCKED_RECT
(setq LPD3DLOCKED_RECT (string _D3DLOCKED_RECT "*"))

;; typedef struct _D3DBOX { {
(struct '_D3DBOX
    UINT ; Left
    UINT ; Top
    UINT ; Right
    UINT ; Bottom
    UINT ; Front
    UINT ; Back
)
(setq D3DBOX _D3DBOX)
;; } D3DBOX
(setq LPD3DBOX (string _D3DBOX "*"))

;; typedef struct _D3DLOCKED_BOX { {
(struct '_D3DLOCKED_BOX
    INT ; RowPitch
    INT ; SlicePitch
    LPVOID ; pBits
)
(setq D3DLOCKED_BOX _D3DLOCKED_BOX)
;; } D3DLOCKED_BOX
(setq LPD3DLOCKED_BOX (string _D3DLOCKED_BOX "*"))

;; typedef struct _D3DVERTEXBUFFER_DESC { {
(struct '_D3DVERTEXBUFFER_DESC
    D3DFORMAT ; Format
    D3DRESOURCETYPE ; Type
    d3dUsage8 ; Usage
    D3DPOOL ; Pool
    UINT ; Size
    d3dFVF8 ; FVF

)
(setq D3DVERTEXBUFFER_DESC _D3DVERTEXBUFFER_DESC)
;; } D3DVERTEXBUFFER_DESC
(setq LPD3DVERTEXBUFFER_DESC (string _D3DVERTEXBUFFER_DESC "*"))

;; typedef struct _D3DINDEXBUFFER_DESC { {
(struct '_D3DINDEXBUFFER_DESC
    D3DFORMAT ; Format
    D3DRESOURCETYPE ; Type
    d3dUsage8 ; Usage
    D3DPOOL ; Pool
    UINT ; Size
)
(setq D3DINDEXBUFFER_DESC _D3DINDEXBUFFER_DESC)
;; } D3DINDEXBUFFER_DESC
(setq LPD3DINDEXBUFFER_DESC (string _D3DINDEXBUFFER_DESC "*"))

;; typedef struct _D3DDEVICE_CREATION_PARAMETERS { {
(struct '_D3DDEVICE_CREATION_PARAMETERS
    d3dAdapterID8 ; AdapterOrdinal
    D3DDEVTYPE ; DeviceType
    HWND ; hFocusWindow
    d3dBehaviorFlags8 ; BehaviorFlags
)
(setq D3DDEVICE_CREATION_PARAMETERS _D3DDEVICE_CREATION_PARAMETERS)
;; } D3DDEVICE_CREATION_PARAMETERS
(setq LPD3DDEVICE_CREATION_PARAMETERS (string _D3DDEVICE_CREATION_PARAMETERS "*"))

;; typedef struct _D3DRASTER_STATUS { {
(struct '_D3DRASTER_STATUS
    BOOL ; InVBlank
    UINT ; ScanLine
)
(setq D3DRASTER_STATUS _D3DRASTER_STATUS)
;; } D3DRASTER_STATUS
(setq LPD3DRASTER_STATUS (string _D3DRASTER_STATUS "*"))

;; typedef struct _D3DMATRIX8 { {
(struct '_D3DMATRIX8
    float ; _11
    float ; _12
    float ; _13
    float ; _14
    float ; _21
    float ; _22
    float ; _23
    float ; _24
    float ; _31
    float ; _32
    float ; _33
    float ; _34
    float ; _41
    float ; _42
    float ; _43
    float ; _44
)
(setq D3DMATRIX8 _D3DMATRIX8)
;; } D3DMATRIX8
(setq LPD3DMATRIX8 (string _D3DMATRIX8 "*"))

;; typedef struct _D3DVIEWPORT8 { {
(struct '_D3DVIEWPORT8
    UINT ; X
    UINT ; Y
    UINT ; Width
    UINT ; Height
    float ; MinZ
    float ; MaxZ
)
(setq D3DVIEWPORT8 _D3DVIEWPORT8)
;; } D3DVIEWPORT8
(setq LPD3DVIEWPORT8 (string _D3DVIEWPORT8 "*"))

;; typedef struct _D3DMATERIAL8 { {
(struct '_D3DMATERIAL8
    D3DCOLORVALUE ; Diffuse
    D3DCOLORVALUE ; Ambient
    D3DCOLORVALUE ; Specular
    D3DCOLORVALUE ; Emissive
    float ; Power
)
(setq D3DMATERIAL8 _D3DMATERIAL8)
;; } D3DMATERIAL8
(setq LPD3DMATERIAL8 (string _D3DMATERIAL8 "*"))

;; typedef struct _D3DCLIPSTATUS8  { {
(struct '_D3DCLIPSTATUS8
    d3dClipStatus8 ; ClipUnion
    d3dClipStatus8 ; ClipIntersection
)
(setq D3DCLIPSTATUS8 _D3DCLIPSTATUS8)
;; } D3DCLIPSTATUS8
(setq LPD3DCLIPSTATUS8 (string _D3DCLIPSTATUS8 "*"))

;; typedef struct _D3DLIGHT8  { {
(struct '_D3DLIGHT8
    D3DLIGHTTYPE8 ; Type
    D3DCOLORVALUE ; Diffuse
    D3DCOLORVALUE ; Specular
    D3DCOLORVALUE ; Ambient
    D3DVECTOR ; Position
    D3DVECTOR ; Direction
    float ; Range
    float ; Falloff
    float ; Attenuation0
    float ; Attenuation1
    float ; Attenuation2
    float ; Theta
    float ; Phi
)
(setq D3DLIGHT8 _D3DLIGHT8)
;; } D3DLIGHT8
(setq LPD3DLIGHT8 (string _D3DLIGHT8 "*"))

;; typedef struct _D3DRECTPATCH_INFO { {
(struct '_D3DRECTPATCH_INFO
    UINT ; StartVertexOffsetWidth
    UINT ; StartVertexOffsetHeight
    UINT ; Width
    UINT ; Height
    UINT ; Stride
    D3DBASISTYPE ; Basis
    D3DORDERTYPE ; Order
)
(setq D3DRECTPATCH_INFO _D3DRECTPATCH_INFO)
;; } D3DRECTPATCH_INFO
(setq LPD3DRECTPATCH_INFO (string _D3DRECTPATCH_INFO "*"))

;; typedef struct _D3DTRIPATCH_INFO { {
(struct '_D3DTRIPATCH_INFO
    UINT ; StartVertexOffset
    UINT ; NumVertices
    D3DBASISTYPE ; Basis
    D3DORDERTYPE ; Order
)
(setq D3DTRIPATCH_INFO _D3DTRIPATCH_INFO)
;; } D3DTRIPATCH_INFO
(setq LPD3DTRIPATCH_INFO (string _D3DTRIPATCH_INFO "*"))

;; typedef struct _D3DGAMMARAMP { {
(struct '_D3DGAMMARAMP
    WORD ; red
    WORD ; green
    WORD ; blue
)
(setq D3DGAMMARAMP _D3DGAMMARAMP)
;; } D3DGAMMARAMP
(setq LPD3DGAMMARAMP (string _D3DGAMMARAMP "*"))

alias LPD3DDISPLAYMODE;
alias LPD3DADAPTER_IDENTIFIER8;
alias LPD3DPRESENT_PARAMETERS;
alias LPD3DSURFACE_DESC;
alias LPD3DVOLUME_DESC;
alias LPD3DLOCKED_RECT;
alias LPD3DBOX;
alias LPD3DLOCKED_BOX;
alias LPD3DVERTEXBUFFER_DESC;
alias LPD3DINDEXBUFFER_DESC;
alias LPD3DDEVICE_CREATION_PARAMETERS;
alias LPD3DRASTER_STATUS;
alias LPD3DMATRIX8;
alias LPD3DVIEWPORT8;
alias LPD3DVECTOR;
alias LPD3DCOLORVALUE;
alias LPD3DRECT;
alias LPD3DMATERIAL8;
alias LPD3DCLIPSTATUS8;
alias LPD3DLIGHT8;
alias LPD3DRECTPATCH_INFO;
alias LPD3DTRIPATCH_INFO;
alias LPD3DGAMMARAMP;
