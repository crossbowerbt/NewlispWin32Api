(context 'WIN32)


(setq LPCONTEXT LPVOID)

;; mask DWORD DesiredSecurityAccess {
(setq DesiredSecurityAccess DWORD)
(setq KEY_QUERY_VALUE 0x0001)
(setq KEY_SET_VALUE 0x0002)
(setq KEY_CREATE_SUB_KEY 0x0004)
(setq KEY_ENUMERATE_SUB_KEYS 0x0008)
(setq KEY_NOTIFY 0x0010)
(setq KEY_CREATE_LINK 0x0020)
;; };

;; mask DWORD ServiceTypes {
(setq ServiceTypes DWORD)
(setq SERVICE_WIN32_OWN_PROCESS 0x00000010)
(setq SERVICE_WIN32_SHARE_PROCESS 0x00000020)
(setq SERVICE_KERNEL_DRIVER 0x00000001)
(setq SERVICE_FILE_SYSTEM_DRIVER 0x00000002)
(setq SERVICE_INTERACTIVE_PROCESS 0x00000100)
;; };

;; value DWORD StartTypes {
(setq StartTypes DWORD)
(setq SERVICE_BOOT_START 0x00000000)
(setq SERVICE_SYSTEM_START 0x00000001)
(setq SERVICE_AUTO_START 0x00000002)
(setq SERVICE_DEMAND_START 0x00000003)
(setq SERVICE_DISABLED 0x00000004)
;; };

;; value DWORD ErrorControls {
(setq ErrorControls DWORD)
(setq SERVICE_ERROR_IGNORE 0x00000000)
(setq SERVICE_ERROR_NORMAL 0x00000001)
(setq SERVICE_ERROR_SEVERE 0x00000002)
(setq SERVICE_ERROR_CRITICAL 0x00000003)
;; };

;; value DWORD ControlCodes {
(setq ControlCodes DWORD)
(setq SERVICE_CONTROL_STOP 0x00000001)
(setq SERVICE_CONTROL_PAUSE 0x00000002)
(setq SERVICE_CONTROL_CONTINUE 0x00000003)
(setq SERVICE_CONTROL_INTERROGATE 0x00000004)
(setq SERVICE_CONTROL_SHUTDOWN 0x00000005)
(setq SERVICE_CONTROL_PARAMCHANGE 0x00000006)
(setq SERVICE_CONTROL_NETBINDADD 0x00000007)
(setq SERVICE_CONTROL_NETBINDREMOVE 0x00000008)
(setq SERVICE_CONTROL_NETBINDENABLE 0x00000009)
(setq SERVICE_CONTROL_NETBINDDISABLE 0x0000000A)
;; };

;; mask DWORD DesiredAccessTypes {
(setq DesiredAccessTypes DWORD)
(setq SC_MANAGER_CONNECT 0x0001)
(setq SC_MANAGER_CREATE_SERVICE 0x0002)
(setq SC_MANAGER_ENUMERATE_SERVICE 0x0004)
(setq SC_MANAGER_LOCK 0x0008)
(setq SC_MANAGER_QUERY_LOCK_STATUS 0x0010)
(setq SC_MANAGER_MODIFY_BOOT_CONFIG 0x0020)
;; };

;; value DWORD InfoLevels {
(setq InfoLevels DWORD)
(setq SERVICE_CONFIG_DESCRIPTION 1)
(setq SERVICE_CONFIG_FAILURE_ACTIONS 2)
;; };

;; value DWORD Status {
(setq Status DWORD)
(setq STATUS_WAIT_0 0x00000000)
(setq STATUS_ABANDONED_WAIT_0 0x00000080)
(setq STATUS_USER_APC 0x000000C0)
(setq STATUS_TIMEOUT 0x00000102)
(setq STATUS_PENDING 0x00000103)
(setq STATUS_SEGMENT_NOTIFICATION 0x40000005)
(setq STATUS_GUARD_PAGE_VIOLATION 0x80000001)
(setq STATUS_DATATYPE_MISALIGNMENT 0x80000002)
(setq STATUS_BREAKPOINT 0x80000003)
(setq STATUS_SINGLE_STEP 0x80000004)
(setq STATUS_ACCESS_VIOLATION 0xC0000005)
(setq STATUS_IN_PAGE_ERROR 0xC0000006)
(setq STATUS_INVALID_HANDLE 0xC0000008)
(setq STATUS_NO_MEMORY 0xC0000017)
(setq STATUS_ILLEGAL_INSTRUCTION 0xC000001D)
(setq STATUS_NONCONTINUABLE_EXCEPTION 0xC0000025)
(setq STATUS_INVALID_DISPOSITION 0xC0000026)
(setq STATUS_ARRAY_BOUNDS_EXCEEDED 0xC000008C)
(setq STATUS_FLOAT_DENORMAL_OPERAND 0xC000008D)
(setq STATUS_FLOAT_DIVIDE_BY_ZERO 0xC000008E)
(setq STATUS_FLOAT_INEXACT_RESULT 0xC000008F)
(setq STATUS_FLOAT_INVALID_OPERATION 0xC0000090)
(setq STATUS_FLOAT_OVERFLOW 0xC0000091)
(setq STATUS_FLOAT_STACK_CHECK 0xC0000092)
(setq STATUS_FLOAT_UNDERFLOW 0xC0000093)
(setq STATUS_INTEGER_DIVIDE_BY_ZERO 0xC0000094)
(setq STATUS_INTEGER_OVERFLOW 0xC0000095)
(setq STATUS_PRIVILEGED_INSTRUCTION 0xC0000096)
(setq STATUS_STACK_OVERFLOW 0xC00000FD)
(setq STATUS_CONTROL_C_EXIT 0xC000013A)
(setq STATUS_FLOAT_MULTIPLE_FAULTS 0xC00002B4)
(setq STATUS_FLOAT_MULTIPLE_TRAPS 0xC00002B5)
(setq STATUS_ILLEGAL_VLM_REFERENCE 0xC00002C0)
;; };

;; mask DWORD ControlEvents {
(setq ControlEvents DWORD)
(setq CTRL_C_EVENT 0)
(setq CTRL_BREAK_EVENT 1)
(setq CTRL_CLOSE_EVENT 2)
(setq CTRL_LOGOFF_EVENT 5)
(setq CTRL_SHUTDOWN_EVENT 6)
;; };

;; mask DWORD GenericAccessRights {
(setq GenericAccessRights DWORD)
(setq GENERIC_READ 0x80000000)
(setq GENERIC_WRITE 0x40000000)
(setq GENERIC_EXECUTE 0x20000000)
(setq GENERIC_ALL 0x10000000)
;; };

;; mask DWORD ShareRights {
(setq ShareRights DWORD)
(setq FILE_SHARE_READ 0x00000001)
(setq FILE_SHARE_WRITE 0x00000002)
(setq FILE_SHARE_DELETE 0x00000004)
;; };

;; value DWORD CreationActions {
(setq CreationActions DWORD)
(setq CREATE_NEW 1)
(setq CREATE_ALWAYS 2)
(setq OPEN_EXISTING 3)
(setq OPEN_ALWAYS 4)
(setq TRUNCATE_EXISTING 5)
;; };

;; typedef struct _OVERLAPPED  { {
(struct '_OVERLAPPED
    DWORD ; Internal
    DWORD ; InternalHigh
    DWORD ; Offset
    DWORD ; OffsetHigh
    HANDLE ; hEvent
)
(setq OVERLAPPED _OVERLAPPED)
;; } OVERLAPPED

;; value INT FilePointerStartingPosition {
(setq FilePointerStartingPosition INT)
(setq FILE_BEGIN 0)
(setq FILE_CURRENT 1)
(setq FILE_END 2)
;; };

;; value LONG ThreadBasePriority {
(setq ThreadBasePriority LONG)
(setq THREAD_BASE_PRIORITY_LOWRT 15)
(setq THREAD_BASE_PRIORITY_MAX 2)
(setq THREAD_BASE_PRIORITY_MIN -2)
(setq THREAD_BASE_PRIORITY_IDLE -15)
;; };

;; value LONG ThreadPriority {
(setq ThreadPriority LONG)
(setq THREAD_PRIORITY_LOWEST -2)
(setq THREAD_PRIORITY_BELOW_NORMAL -1)
(setq THREAD_PRIORITY_NORMAL 0)
(setq THREAD_PRIORITY_HIGHEST 2)
(setq THREAD_PRIORITY_ABOVE_NORMAL 1)
(setq THREAD_PRIORITY_ERROR_RETURN 0x7FFFFFFF)
(setq THREAD_PRIORITY_TIME_CRITICAL 15)
(setq THREAD_PRIORITY_IDLE -15)
;; };

(load "debugging.nl")
(load "processes.nl")
(load "memory.nl")
(load "registry.nl")
(load "fileio.nl")
(load "strings.nl")
